// Generated from cypher-editor-support/src/_generated.simple/Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CypherListener = require('./CypherListener').CypherListener;
var grammarFileName = "Cypher.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00e7\u0d80\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0003",
    "\u0002\u0007\u0002\u01ec\n\u0002\f\u0002\u000e\u0002\u01ef\u000b\u0002",
    "\u0003\u0002\u0005\u0002\u01f2\n\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0007\u0003\u01f7\n\u0003\f\u0003\u000e\u0003\u01fa\u000b\u0003",
    "\u0003\u0003\u0005\u0003\u01fd\n\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0004\u0005\u0004\u0202\n\u0004\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u0206\n\u0004\u0003\u0004\u0005\u0004\u0209\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u020e\n\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0007\u0006\u0214\n\u0006\f\u0006\u000e\u0006",
    "\u0217\u000b\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u021c",
    "\n\u0007\f\u0007\u000e\u0007\u021f\u000b\u0007\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u022b",
    "\n\b\u0003\t\u0003\t\u0005\t\u022f\n\t\u0003\t\u0003\t\u0005\t\u0233",
    "\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0005\u000b\u023c\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u0241\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0245\n\u000b",
    "\u0003\u000b\u0005\u000b\u0248\n\u000b\u0003\u000b\u0005\u000b\u024b",
    "\n\u000b\u0003\f\u0003\f\u0003\r\u0005\r\u0250\n\r\u0003\r\u0003\r\u0005",
    "\r\u0254\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0259\n",
    "\u000e\f\u000e\u000e\u000e\u025c\u000b\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u026b\n\u0011\f\u0011\u000e\u0011\u026e\u000b\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u0282",
    "\n\u0017\f\u0017\u000e\u0017\u0285\u000b\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u028c\n\u0018\u0005",
    "\u0018\u028e\n\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u0292\n\u0019",
    "\u0003\u0019\u0007\u0019\u0295\n\u0019\f\u0019\u000e\u0019\u0298\u000b",
    "\u0019\u0003\u001a\u0006\u001a\u029b\n\u001a\r\u001a\u000e\u001a\u029c",
    "\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u02a3\n",
    "\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u02a7\n\u001c\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u02ab\n\u001c\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u02af\n\u001c\u0007\u001c\u02b1\n\u001c\f\u001c\u000e\u001c\u02b4",
    "\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u02ba\n\u001c\u0003\u001c\u0005\u001c\u02bd\n\u001c\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u02c1\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d",
    "\u02c5\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u02cb\n\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u02cf\n\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u02d3\n\u001e\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u02d7\n\u001e\u0007\u001e\u02d9\n\u001e\f\u001e\u000e",
    "\u001e\u02dc\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u02e2\n\u001e\u0003\u001e\u0005\u001e\u02e5\n\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u02ed\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u02f6\n \u0003!\u0003!\u0003!\u0005!\u02fb\n!\u0006!\u02fd",
    "\n!\r!\u000e!\u02fe\u0003!\u0005!\u0302\n!\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u0307\n\"\f\"\u000e\"\u030a\u000b\"\u0003#\u0003#\u0003#\u0003$\u0003",
    "$\u0005$\u0311\n$\u0007$\u0313\n$\f$\u000e$\u0316\u000b$\u0003%\u0003",
    "%\u0003%\u0005%\u031b\n%\u0003&\u0003&\u0003&\u0005&\u0320\n&\u0003",
    "&\u0003&\u0007&\u0324\n&\f&\u000e&\u0327\u000b&\u0003\'\u0003\'\u0003",
    "(\u0003(\u0003)\u0003)\u0003*\u0003*\u0005*\u0331\n*\u0003*\u0003*\u0005",
    "*\u0335\n*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0005+\u033d\n",
    "+\u0003+\u0005+\u0340\n+\u0003,\u0003,\u0005,\u0344\n,\u0003-\u0003",
    "-\u0005-\u0348\n-\u0003-\u0007-\u034b\n-\f-\u000e-\u034e\u000b-\u0003",
    ".\u0003.\u0005.\u0352\n.\u0003.\u0003.\u0003/\u0003/\u0005/\u0358\n",
    "/\u0003/\u0007/\u035b\n/\f/\u000e/\u035e\u000b/\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00050\u0367\n0\u00031\u00031\u00051\u036b",
    "\n1\u00031\u00071\u036e\n1\f1\u000e1\u0371\u000b1\u00032\u00032\u0003",
    "2\u00032\u00052\u0377\n2\u00032\u00032\u00032\u00052\u037c\n2\u0003",
    "2\u00052\u037f\n2\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u038f\n3\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u039b",
    "\n4\u00035\u00035\u00035\u00055\u03a0\n5\u00036\u00036\u00036\u0003",
    "6\u00036\u00056\u03a7\n6\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00057\u03b0\n7\u00038\u00038\u00038\u00038\u00058\u03b6\n8\u0003",
    "9\u00039\u00039\u00039\u00059\u03bc\n9\u00039\u00039\u00039\u00039\u0003",
    "9\u00059\u03c3\n9\u00039\u00039\u00039\u00039\u00059\u03c9\n9\u0003",
    "9\u00039\u00039\u00039\u00039\u00059\u03d0\n9\u00059\u03d2\n9\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u03db\n:\u0003:\u0003",
    ":\u0005:\u03df\n:\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u03e6\n",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u03ed\n:\u0005:\u03ef\n",
    ":\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u0402\n<\u0003",
    "=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0005>\u0410\n>\u0003>\u0003>\u0003>\u0005>\u0415\n>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0005>\u041c\n>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0005>\u0425\n>\u0005>\u0427\n>\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u0430\n?\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0005@\u0440\n@\u0003@\u0003@\u0003@\u0003@\u0005@\u0446\n",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u0451\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u045b\n@\u0003A\u0003A\u0003A\u0003A\u0005A\u0461\nA\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u046b\nA\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u0475\nA\u0003A\u0005",
    "A\u0478\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u04a7\nB\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0005C\u04d6\nC\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u04e5",
    "\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u04ed\nD\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u0501\nE\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u050a\nF\u0003F\u0003",
    "F\u0005F\u050e\nF\u0003F\u0007F\u0511\nF\fF\u000eF\u0514\u000bF\u0005",
    "F\u0516\nF\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u051f",
    "\nG\u0003G\u0003G\u0005G\u0523\nG\u0003G\u0007G\u0526\nG\fG\u000eG\u0529",
    "\u000bG\u0005G\u052b\nG\u0003H\u0003H\u0005H\u052f\nH\u0003H\u0003H",
    "\u0005H\u0533\nH\u0003H\u0007H\u0536\nH\fH\u000eH\u0539\u000bH\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0005I\u0540\nI\u0003I\u0003I\u0003I\u0005",
    "I\u0545\nI\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u054c\nJ\u0003",
    "J\u0003J\u0003J\u0003J\u0005J\u0552\nJ\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0005K\u056f\nK\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0005K\u0578\nK\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0005K\u0581\nK\u0003K\u0003K\u0003K\u0003K\u0005K\u0587\nK\u0003",
    "K\u0003K\u0003K\u0003K\u0005K\u058d\nK\u0003K\u0005K\u0590\nK\u0005",
    "K\u0592\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005",
    "L\u05a6\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u05ad\nM\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0005M\u05b4\nM\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0005M\u05bb\nM\u0005M\u05bd\nM\u0003N\u0003N\u0003N\u0005",
    "N\u05c2\nN\u0003N\u0003N\u0005N\u05c6\nN\u0003N\u0007N\u05c9\nN\fN\u000e",
    "N\u05cc\u000bN\u0005N\u05ce\nN\u0003O\u0003O\u0005O\u05d2\nO\u0003O",
    "\u0003O\u0005O\u05d6\nO\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0005",
    "P\u05de\nP\u0003P\u0003P\u0003P\u0003P\u0005P\u05e4\nP\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u05ed\nQ\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0005Q\u05f4\nQ\u0003Q\u0003Q\u0003Q\u0005Q\u05f9\n",
    "Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u0602\nR\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0003T\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003",
    "V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0005X\u0624\nX\u0003X\u0003X\u0005X\u0628\nX\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0005X\u062f\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0005",
    "Y\u0635\nY\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003",
    "]\u0003^\u0003^\u0003^\u0003^\u0003_\u0003_\u0003_\u0003_\u0003`\u0003",
    "`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003",
    "b\u0003c\u0003c\u0003c\u0003c\u0003d\u0003d\u0003d\u0003d\u0003e\u0003",
    "e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0005f\u066d\nf\u0003f\u0003",
    "f\u0005f\u0671\nf\u0003f\u0003f\u0005f\u0675\nf\u0003f\u0003f\u0005",
    "f\u0679\nf\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0005g\u0681\n",
    "g\u0003g\u0003g\u0005g\u0685\ng\u0003g\u0003g\u0003g\u0005g\u068a\n",
    "g\u0003g\u0003g\u0005g\u068e\ng\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003h\u0003h\u0003h\u0003h\u0005h\u069c\nh\u0003h\u0003",
    "h\u0005h\u06a0\nh\u0003h\u0003h\u0003h\u0005h\u06a5\nh\u0003h\u0003",
    "h\u0005h\u06a9\nh\u0003h\u0003h\u0003h\u0003h\u0005h\u06af\nh\u0003",
    "h\u0003h\u0005h\u06b3\nh\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003i\u0003i\u0003i\u0003i\u0005i\u06c1\ni\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0005i\u06c8\ni\u0003i\u0003i\u0003i\u0003i\u0005i\u06ce",
    "\ni\u0003i\u0003i\u0003i\u0003i\u0003j\u0003j\u0003j\u0003j\u0005j\u06d8",
    "\nj\u0003j\u0003j\u0005j\u06dc\nj\u0003j\u0003j\u0003j\u0003j\u0005",
    "j\u06e2\nj\u0003j\u0003j\u0003j\u0003j\u0003k\u0003k\u0005k\u06ea\n",
    "k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0005",
    "k\u06f5\nk\u0003k\u0003k\u0003k\u0003k\u0005k\u06fb\nk\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0005k\u0707",
    "\nk\u0003k\u0003k\u0003k\u0003k\u0005k\u070d\nk\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0005k\u0719\nk\u0003",
    "k\u0003k\u0005k\u071d\nk\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0005l\u0727\nl\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0005l\u0734\nl\u0003m\u0003m\u0005m\u0738",
    "\nm\u0003m\u0003m\u0005m\u073c\nm\u0003m\u0003m\u0007m\u0740\nm\fm\u000e",
    "m\u0743\u000bm\u0003m\u0005m\u0746\nm\u0003m\u0005m\u0749\nm\u0003n",
    "\u0003n\u0005n\u074d\nn\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "o\u0003o\u0005o\u0757\no\u0003o\u0003o\u0003o\u0007o\u075c\no\fo\u000e",
    "o\u075f\u000bo\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0005p\u076b\np\u0003q\u0003q\u0005q\u076f\nq\u0003",
    "q\u0003q\u0003r\u0003r\u0003r\u0003r\u0005r\u0777\nr\u0003r\u0003r\u0003",
    "s\u0003s\u0005s\u077d\ns\u0003s\u0003s\u0005s\u0781\ns\u0003s\u0003",
    "s\u0005s\u0785\ns\u0003s\u0007s\u0788\ns\fs\u000es\u078b\u000bs\u0003",
    "t\u0003t\u0005t\u078f\nt\u0003t\u0003t\u0005t\u0793\nt\u0003t\u0003",
    "t\u0003t\u0003t\u0005t\u0799\nt\u0003t\u0003t\u0005t\u079d\nt\u0003",
    "t\u0003t\u0003t\u0003t\u0005t\u07a3\nt\u0003t\u0003t\u0005t\u07a7\n",
    "t\u0003t\u0003t\u0003t\u0003t\u0005t\u07ad\nt\u0003t\u0003t\u0005t\u07b1",
    "\nt\u0003u\u0003u\u0005u\u07b5\nu\u0003u\u0003u\u0005u\u07b9\nu\u0003",
    "u\u0003u\u0005u\u07bd\nu\u0003u\u0003u\u0005u\u07c1\nu\u0003u\u0007",
    "u\u07c4\nu\fu\u000eu\u07c7\u000bu\u0003v\u0003v\u0003v\u0003v\u0005",
    "v\u07cd\nv\u0003v\u0003v\u0005v\u07d1\nv\u0003v\u0007v\u07d4\nv\fv\u000e",
    "v\u07d7\u000bv\u0003w\u0003w\u0003w\u0003w\u0005w\u07dd\nw\u0003x\u0003",
    "x\u0005x\u07e1\nx\u0003x\u0003x\u0005x\u07e5\nx\u0003x\u0003x\u0003",
    "x\u0003x\u0003x\u0003x\u0005x\u07ed\nx\u0003x\u0003x\u0003x\u0006x\u07f2",
    "\nx\rx\u000ex\u07f3\u0003x\u0005x\u07f7\nx\u0003x\u0003x\u0003y\u0003",
    "y\u0005y\u07fd\ny\u0003y\u0005y\u0800\ny\u0003y\u0003y\u0003y\u0005",
    "y\u0805\ny\u0003y\u0005y\u0808\ny\u0003z\u0003z\u0005z\u080c\nz\u0003",
    "z\u0005z\u080f\nz\u0003z\u0005z\u0812\nz\u0003z\u0003z\u0003{\u0003",
    "{\u0003{\u0005{\u0819\n{\u0003{\u0003{\u0005{\u081d\n{\u0003{\u0003",
    "{\u0005{\u0821\n{\u0003|\u0003|\u0005|\u0825\n|\u0003|\u0005|\u0828",
    "\n|\u0003}\u0003}\u0005}\u082c\n}\u0003}\u0003}\u0005}\u0830\n}\u0003",
    "}\u0007}\u0833\n}\f}\u000e}\u0836\u000b}\u0003}\u0003}\u0005}\u083a",
    "\n}\u0003}\u0003}\u0005}\u083e\n}\u0003}\u0007}\u0841\n}\f}\u000e}\u0844",
    "\u000b}\u0003}\u0005}\u0847\n}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
    "~\u0003~\u0005~\u0850\n~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0005\u007f\u0856\n\u007f\u0003\u007f\u0005\u007f\u0859\n\u007f\u0003",
    "\u0080\u0003\u0080\u0005\u0080\u085d\n\u0080\u0003\u0080\u0005\u0080",
    "\u0860\n\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u0867\n\u0082\u0003\u0082\u0005\u0082\u086a\n\u0082",
    "\u0003\u0082\u0005\u0082\u086d\n\u0082\u0003\u0082\u0003\u0082\u0005",
    "\u0082\u0871\n\u0082\u0003\u0082\u0007\u0082\u0874\n\u0082\f\u0082\u000e",
    "\u0082\u0877\u000b\u0082\u0003\u0082\u0005\u0082\u087a\n\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0005",
    "\u0083\u0882\n\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0886\n\u0083",
    "\u0003\u0083\u0007\u0083\u0889\n\u0083\f\u0083\u000e\u0083\u088c\u000b",
    "\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0890\n\u0083\u0003\u0084",
    "\u0003\u0084\u0005\u0084\u0894\n\u0084\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003",
    "\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0005\u0088\u08a6\n\u0088\u0003\u0088\u0003\u0088",
    "\u0005\u0088\u08aa\n\u0088\u0003\u0088\u0007\u0088\u08ad\n\u0088\f\u0088",
    "\u000e\u0088\u08b0\u000b\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008b\u0003",
    "\u008b\u0005\u008b\u08bc\n\u008b\u0003\u008b\u0003\u008b\u0005\u008b",
    "\u08c0\n\u008b\u0005\u008b\u08c2\n\u008b\u0003\u008c\u0005\u008c\u08c5",
    "\n\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0005\u008c\u08ce\n\u008c\u0003\u008c\u0003",
    "\u008c\u0005\u008c\u08d2\n\u008c\u0003\u008c\u0003\u008c\u0005\u008c",
    "\u08d6\n\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005",
    "\u008c\u08e2\n\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u08e6\n\u008c",
    "\u0003\u008c\u0007\u008c\u08e9\n\u008c\f\u008c\u000e\u008c\u08ec\u000b",
    "\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008c\u0005\u008c\u08f5\n\u008c\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0005\u008d\u08fb\n\u008d\u0003\u008d\u0003",
    "\u008d\u0005\u008d\u08ff\n\u008d\u0003\u008d\u0007\u008d\u0902\n\u008d",
    "\f\u008d\u000e\u008d\u0905\u000b\u008d\u0003\u008d\u0005\u008d\u0908",
    "\n\u008d\u0003\u008e\u0003\u008e\u0005\u008e\u090c\n\u008e\u0003\u008e",
    "\u0003\u008e\u0005\u008e\u0910\n\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008f\u0003\u008f\u0005\u008f\u0916\n\u008f\u0003\u0090\u0003\u0090",
    "\u0005\u0090\u091a\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005",
    "\u0090\u091f\n\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0005\u0091\u0925\n\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u092e\n\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
    "\u0003\u0093\u0005\u0093\u0937\n\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u093f\n\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0005\u0095\u0945\n",
    "\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u0949\n\u0095\u0003\u0095",
    "\u0007\u0095\u094c\n\u0095\f\u0095\u000e\u0095\u094f\u000b\u0095\u0003",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0097\u0003\u0097\u0005",
    "\u0097\u0957\n\u0097\u0003\u0097\u0003\u0097\u0005\u0097\u095b\n\u0097",
    "\u0003\u0097\u0007\u0097\u095e\n\u0097\f\u0097\u000e\u0097\u0961\u000b",
    "\u0097\u0003\u0098\u0003\u0098\u0005\u0098\u0965\n\u0098\u0003\u0098",
    "\u0003\u0098\u0005\u0098\u0969\n\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0005\u0098\u096e\n\u0098\u0003\u0099\u0003\u0099\u0005\u0099",
    "\u0972\n\u0099\u0003\u009a\u0003\u009a\u0005\u009a\u0976\n\u009a\u0003",
    "\u009a\u0007\u009a\u0979\n\u009a\f\u009a\u000e\u009a\u097c\u000b\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0982\n",
    "\u009a\u0003\u009b\u0003\u009b\u0005\u009b\u0986\n\u009b\u0003\u009b",
    "\u0003\u009b\u0005\u009b\u098a\n\u009b\u0005\u009b\u098c\n\u009b\u0003",
    "\u009b\u0003\u009b\u0005\u009b\u0990\n\u009b\u0005\u009b\u0992\n\u009b",
    "\u0003\u009b\u0003\u009b\u0005\u009b\u0996\n\u009b\u0005\u009b\u0998",
    "\n\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0005\u009c",
    "\u099e\n\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0005",
    "\u009d\u09a4\n\u009d\u0003\u009d\u0005\u009d\u09a7\n\u009d\u0003\u009d",
    "\u0005\u009d\u09aa\n\u009d\u0003\u009d\u0003\u009d\u0003\u009e\u0003",
    "\u009e\u0005\u009e\u09b0\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0005\u009e\u09b5\n\u009e\u0003\u009f\u0003\u009f\u0005\u009f\u09b9",
    "\n\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u09be\n\u009f",
    "\u0003\u00a0\u0003\u00a0\u0005\u00a0\u09c2\n\u00a0\u0003\u00a0\u0003",
    "\u00a0\u0005\u00a0\u09c6\n\u00a0\u0005\u00a0\u09c8\n\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0005\u00a0\u09cc\n\u00a0\u0005\u00a0\u09ce\n\u00a0\u0003",
    "\u00a0\u0005\u00a0\u09d1\n\u00a0\u0003\u00a0\u0003\u00a0\u0005\u00a0",
    "\u09d5\n\u00a0\u0005\u00a0\u09d7\n\u00a0\u0003\u00a0\u0003\u00a0\u0003",
    "\u00a1\u0003\u00a1\u0005\u00a1\u09dd\n\u00a1\u0003\u00a2\u0003\u00a2",
    "\u0005\u00a2\u09e1\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0003",
    "\u00a3\u0005\u00a3\u09e7\n\u00a3\u0003\u00a3\u0003\u00a3\u0007\u00a3",
    "\u09eb\n\u00a3\f\u00a3\u000e\u00a3\u09ee\u000b\u00a3\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a5\u0005\u00a5\u09f4\n\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a6\u0003\u00a6\u0005\u00a6\u09fa\n\u00a6\u0003",
    "\u00a6\u0007\u00a6\u09fd\n\u00a6\f\u00a6\u000e\u00a6\u0a00\u000b\u00a6",
    "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0005\u00a8",
    "\u0a07\n\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0a0b\n\u00a8\u0005",
    "\u00a8\u0a0d\n\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0a11\n\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0a15\n\u00a8\u0005\u00a8\u0a17",
    "\n\u00a8\u0005\u00a8\u0a19\n\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00aa",
    "\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0007\u00ac\u0a26\n\u00ac\f\u00ac\u000e\u00ac",
    "\u0a29\u000b\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003",
    "\u00ad\u0007\u00ad\u0a30\n\u00ad\f\u00ad\u000e\u00ad\u0a33\u000b\u00ad",
    "\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0007\u00ae",
    "\u0a3a\n\u00ae\f\u00ae\u000e\u00ae\u0a3d\u000b\u00ae\u0003\u00af\u0003",
    "\u00af\u0005\u00af\u0a41\n\u00af\u0007\u00af\u0a43\n\u00af\f\u00af\u000e",
    "\u00af\u0a46\u000b\u00af\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0",
    "\u0005\u00b0\u0a4c\n\u00b0\u0003\u00b0\u0007\u00b0\u0a4f\n\u00b0\f\u00b0",
    "\u000e\u00b0\u0a52\u000b\u00b0\u0003\u00b1\u0003\u00b1\u0005\u00b1\u0a56",
    "\n\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u0a5a\n\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0005\u00b1\u0a5e\n\u00b1\u0003\u00b1\u0003\u00b1\u0005",
    "\u00b1\u0a62\n\u00b1\u0003\u00b1\u0007\u00b1\u0a65\n\u00b1\f\u00b1\u000e",
    "\u00b1\u0a68\u000b\u00b1\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0a6c\n",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0a70\n\u00b2\u0003\u00b2",
    "\u0003\u00b2\u0005\u00b2\u0a74\n\u00b2\u0003\u00b2\u0003\u00b2\u0005",
    "\u00b2\u0a78\n\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0a7c\n\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0a80\n\u00b2\u0003\u00b2\u0007",
    "\u00b2\u0a83\n\u00b2\f\u00b2\u000e\u00b2\u0a86\u000b\u00b2\u0003\u00b3",
    "\u0003\u00b3\u0005\u00b3\u0a8a\n\u00b3\u0003\u00b3\u0003\u00b3\u0005",
    "\u00b3\u0a8e\n\u00b3\u0003\u00b3\u0007\u00b3\u0a91\n\u00b3\f\u00b3\u000e",
    "\u00b3\u0a94\u000b\u00b3\u0003\u00b4\u0003\u00b4\u0005\u00b4\u0a98\n",
    "\u00b4\u0007\u00b4\u0a9a\n\u00b4\f\u00b4\u000e\u00b4\u0a9d\u000b\u00b4",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0005\u00b5\u0aa3\n",
    "\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0005",
    "\u00b5\u0aaa\n\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5\u0aae\n\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0005\u00b5\u0ab2\n\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0005\u00b5\u0ab6\n\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5\u0ac5\n",
    "\u00b5\u0003\u00b5\u0005\u00b5\u0ac8\n\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0007\u00b5\u0ad5\n\u00b5\f\u00b5",
    "\u000e\u00b5\u0ad8\u000b\u00b5\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0adc",
    "\n\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0ae0\n\u00b6\u0007\u00b6",
    "\u0ae2\n\u00b6\f\u00b6\u000e\u00b6\u0ae5\u000b\u00b6\u0003\u00b7\u0003",
    "\u00b7\u0005\u00b7\u0ae9\n\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7",
    "\u0aed\n\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0af1\n\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0005",
    "\u00b9\u0af9\n\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u0afd\n\u00b9",
    "\u0003\u00b9\u0003\u00b9\u0005\u00b9\u0b01\n\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0b09",
    "\n\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0b0d\n\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0005\u00bb\u0b11\n\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0b19\n\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0b1d\n\u00bd\u0003\u00bd\u0003",
    "\u00bd\u0005\u00bd\u0b21\n\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00be",
    "\u0003\u00be\u0003\u00bf\u0003\u00bf\u0005\u00bf\u0b29\n\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0005\u00bf\u0b2d\n\u00bf\u0003\u00bf\u0003\u00bf",
    "\u0005\u00bf\u0b31\n\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c1\u0003\u00c1\u0005\u00c1\u0b39\n\u00c1\u0003\u00c1",
    "\u0003\u00c1\u0005\u00c1\u0b3d\n\u00c1\u0003\u00c1\u0003\u00c1\u0005",
    "\u00c1\u0b41\n\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2",
    "\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0b49\n\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0005\u00c3\u0b4d\n\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3",
    "\u0b51\n\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0b55\n\u00c3\u0003",
    "\u00c3\u0005\u00c3\u0b58\n\u00c3\u0003\u00c3\u0005\u00c3\u0b5b\n\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c5\u0003\u00c5",
    "\u0005\u00c5\u0b63\n\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0b67",
    "\n\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0b6b\n\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0005\u00c5\u0b6f\n\u00c5\u0003\u00c5\u0003\u00c5\u0005",
    "\u00c5\u0b73\n\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0b77\n\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0b7b\n\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0005\u00c5\u0b7f\n\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5",
    "\u0b83\n\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c7\u0003\u00c7\u0005\u00c7\u0b8b\n\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0005\u00c7\u0b8f\n\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0b93",
    "\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7",
    "\u0b99\n\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0b9d\n\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0005\u00c7\u0ba1\n\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0005\u00c7\u0ba5\n\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003",
    "\u00c9\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005",
    "\u00ca\u0bb0\n\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0bb4\n\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0bb8\n\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0bca\n\u00ca\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0005\u00cb\u0bd3\n\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003",
    "\u00cd\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0bdb\n\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0005\u00ce\u0bdf\n\u00ce\u0003\u00ce\u0003\u00ce\u0005",
    "\u00ce\u0be3\n\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0be7\n\u00ce",
    "\u0007\u00ce\u0be9\n\u00ce\f\u00ce\u000e\u00ce\u0bec\u000b\u00ce\u0005",
    "\u00ce\u0bee\n\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00cf\u0003\u00cf",
    "\u0005\u00cf\u0bf4\n\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005",
    "\u00cf\u0bf9\n\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf",
    "\u0bfe\n\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0c03",
    "\n\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0c08\n\u00cf",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0c0d\n\u00cf\u0003",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0c12\n\u00cf\u0003\u00cf",
    "\u0005\u00cf\u0c15\n\u00cf\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0c19",
    "\n\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0c1d\n\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d1\u0003\u00d1\u0005\u00d1\u0c23\n\u00d1\u0003",
    "\u00d1\u0006\u00d1\u0c26\n\u00d1\r\u00d1\u000e\u00d1\u0c27\u0003\u00d2",
    "\u0003\u00d2\u0005\u00d2\u0c2c\n\u00d2\u0003\u00d2\u0005\u00d2\u0c2f",
    "\n\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0c39\n\u00d4\u0003",
    "\u00d4\u0003\u00d4\u0005\u00d4\u0c3d\n\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0005\u00d4\u0c41\n\u00d4\u0005\u00d4\u0c43\n\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0005\u00d4\u0c47\n\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4",
    "\u0c4b\n\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0c4f\n\u00d4\u0007",
    "\u00d4\u0c51\n\u00d4\f\u00d4\u000e\u00d4\u0c54\u000b\u00d4\u0005\u00d4",
    "\u0c56\n\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0003\u00d5\u0003",
    "\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d8\u0003",
    "\u00d8\u0005\u00d8\u0c63\n\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8",
    "\u0c67\n\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u0c6b\n\u00d8\u0003",
    "\u00d8\u0005\u00d8\u0c6e\n\u00d8\u0003\u00d8\u0005\u00d8\u0c71\n\u00d8",
    "\u0003\u00d8\u0003\u00d8\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0c77\n",
    "\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0c7b\n\u00d9\u0003\u00d9",
    "\u0003\u00d9\u0005\u00d9\u0c7f\n\u00d9\u0005\u00d9\u0c81\n\u00d9\u0003",
    "\u00d9\u0003\u00d9\u0005\u00d9\u0c85\n\u00d9\u0003\u00d9\u0003\u00d9",
    "\u0005\u00d9\u0c89\n\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0c8d",
    "\n\u00d9\u0005\u00d9\u0c8f\n\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9",
    "\u0c93\n\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0c97\n\u00d9\u0003",
    "\u00d9\u0003\u00d9\u0003\u00da\u0003\u00da\u0005\u00da\u0c9d\n\u00da",
    "\u0003\u00da\u0003\u00da\u0003\u00db\u0003\u00db\u0005\u00db\u0ca3\n",
    "\u00db\u0003\u00db\u0006\u00db\u0ca6\n\u00db\r\u00db\u000e\u00db\u0ca7",
    "\u0003\u00db\u0003\u00db\u0005\u00db\u0cac\n\u00db\u0003\u00db\u0003",
    "\u00db\u0005\u00db\u0cb0\n\u00db\u0003\u00db\u0006\u00db\u0cb3\n\u00db",
    "\r\u00db\u000e\u00db\u0cb4\u0005\u00db\u0cb7\n\u00db\u0003\u00db\u0005",
    "\u00db\u0cba\n\u00db\u0003\u00db\u0003\u00db\u0005\u00db\u0cbe\n\u00db",
    "\u0003\u00db\u0005\u00db\u0cc1\n\u00db\u0003\u00db\u0005\u00db\u0cc4",
    "\n\u00db\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0005\u00dc",
    "\u0cca\n\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0cce\n\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0005\u00dc\u0cd2\n\u00dc\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0005\u00de\u0cda\n",
    "\u00de\u0003\u00df\u0003\u00df\u0005\u00df\u0cde\n\u00df\u0003\u00df",
    "\u0003\u00df\u0005\u00df\u0ce2\n\u00df\u0003\u00df\u0003\u00df\u0005",
    "\u00df\u0ce6\n\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u0cea\n\u00df",
    "\u0007\u00df\u0cec\n\u00df\f\u00df\u000e\u00df\u0cef\u000b\u00df\u0005",
    "\u00df\u0cf1\n\u00df\u0003\u00df\u0003\u00df\u0003\u00e0\u0003\u00e0",
    "\u0005\u00e0\u0cf7\n\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0cfb",
    "\n\u00e0\u0003\u00e0\u0005\u00e0\u0cfe\n\u00e0\u0003\u00e0\u0005\u00e0",
    "\u0d01\n\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0d05\n\u00e0\u0003",
    "\u00e0\u0007\u00e0\u0d08\n\u00e0\f\u00e0\u000e\u00e0\u0d0b\u000b\u00e0",
    "\u0003\u00e0\u0005\u00e0\u0d0e\n\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1\u0d16\n\u00e1",
    "\u0003\u00e2\u0003\u00e2\u0005\u00e2\u0d1a\n\u00e2\u0003\u00e2\u0003",
    "\u00e2\u0005\u00e2\u0d1e\n\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e3",
    "\u0003\u00e3\u0003\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003\u00e5",
    "\u0003\u00e5\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0d2c\n\u00e6\u0003",
    "\u00e7\u0003\u00e7\u0005\u00e7\u0d30\n\u00e7\u0003\u00e7\u0003\u00e7",
    "\u0005\u00e7\u0d34\n\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e8\u0003",
    "\u00e8\u0003\u00e8\u0003\u00e9\u0003\u00e9\u0005\u00e9\u0d3d\n\u00e9",
    "\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0d41\n\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0005\u00ea\u0d45\n\u00ea\u0003\u00ea\u0007\u00ea\u0d48\n\u00ea",
    "\f\u00ea\u000e\u00ea\u0d4b\u000b\u00ea\u0003\u00eb\u0003\u00eb\u0005",
    "\u00eb\u0d4f\n\u00eb\u0003\u00eb\u0006\u00eb\u0d52\n\u00eb\r\u00eb\u000e",
    "\u00eb\u0d53\u0003\u00ec\u0003\u00ec\u0005\u00ec\u0d58\n\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0005\u00ec\u0d5c\n\u00ec\u0003\u00ec\u0007\u00ec",
    "\u0d5f\n\u00ec\f\u00ec\u000e\u00ec\u0d62\u000b\u00ec\u0003\u00ed\u0003",
    "\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0007\u00f0\u0d6d\n\u00f0\f\u00f0\u000e\u00f0\u0d70",
    "\u000b\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4",
    "\u0d7c\n\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0004\u01ed\u0296",
    "\u0002\u00f6\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
    "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094",
    "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac",
    "\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4",
    "\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc",
    "\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4",
    "\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c",
    "\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124",
    "\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c",
    "\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154",
    "\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c",
    "\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184",
    "\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c",
    "\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4",
    "\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc",
    "\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4",
    "\u01e6\u01e8\u0002\u001a\u0004\u0002\t\t\u000f\u000f\u0003\u0002\u00a0",
    "\u00a1\u0003\u0002\u008a\u008b\u0003\u0002\u008c\u008d\u0004\u0002B",
    "B\u00ad\u00ad\u0004\u0002DD\u00b7\u00b7\u0003\u0002\u00b0\u00b1\u0003",
    "\u0002\u00b4\u00b5\u0003\u0002\u00b2\u00b3\u0004\u0002hh\u00a3\u00a3",
    "\u0004\u0002gg\u00a4\u00a4\u0003\u0002\u00a5\u00a6\u0003\u0002\u009a",
    "\u009b\u0003\u0002`c\u0003\u0002hi\u0004\u0002\u0005\u0005\u000f\u000f",
    "\u0003\u0002{|\u0005\u0002uu\u00e0\u00e0\u00e3\u00e3\u0003\u0002\u00d4",
    "\u00d6\u0003\u0002\u00de\u00df\u0004\u0002  %(\u0004\u0002!!),\u0004",
    "\u0002\u0005\u0005-7\u0003\u00028\u00d0\u0002\u0ef6\u0002\u01f1\u0003",
    "\u0002\u0002\u0002\u0004\u01f3\u0003\u0002\u0002\u0002\u0006\u0201\u0003",
    "\u0002\u0002\u0002\b\u020a\u0003\u0002\u0002\u0002\n\u020f\u0003\u0002",
    "\u0002\u0002\f\u0218\u0003\u0002\u0002\u0002\u000e\u022a\u0003\u0002",
    "\u0002\u0002\u0010\u022c\u0003\u0002\u0002\u0002\u0012\u0236\u0003\u0002",
    "\u0002\u0002\u0014\u0238\u0003\u0002\u0002\u0002\u0016\u024c\u0003\u0002",
    "\u0002\u0002\u0018\u024f\u0003\u0002\u0002\u0002\u001a\u0255\u0003\u0002",
    "\u0002\u0002\u001c\u025d\u0003\u0002\u0002\u0002\u001e\u0265\u0003\u0002",
    "\u0002\u0002 \u0267\u0003\u0002\u0002\u0002\"\u026f\u0003\u0002\u0002",
    "\u0002$\u0271\u0003\u0002\u0002\u0002&\u0276\u0003\u0002\u0002\u0002",
    "(\u0278\u0003\u0002\u0002\u0002*\u027b\u0003\u0002\u0002\u0002,\u027e",
    "\u0003\u0002\u0002\u0002.\u0286\u0003\u0002\u0002\u00020\u028f\u0003",
    "\u0002\u0002\u00022\u029a\u0003\u0002\u0002\u00024\u029e\u0003\u0002",
    "\u0002\u00026\u02bc\u0003\u0002\u0002\u00028\u02be\u0003\u0002\u0002",
    "\u0002:\u02e4\u0003\u0002\u0002\u0002<\u02ec\u0003\u0002\u0002\u0002",
    ">\u02ee\u0003\u0002\u0002\u0002@\u02fc\u0003\u0002\u0002\u0002B\u0303",
    "\u0003\u0002\u0002\u0002D\u030b\u0003\u0002\u0002\u0002F\u0314\u0003",
    "\u0002\u0002\u0002H\u031a\u0003\u0002\u0002\u0002J\u031c\u0003\u0002",
    "\u0002\u0002L\u0328\u0003\u0002\u0002\u0002N\u032a\u0003\u0002\u0002",
    "\u0002P\u032c\u0003\u0002\u0002\u0002R\u032e\u0003\u0002\u0002\u0002",
    "T\u033f\u0003\u0002\u0002\u0002V\u0343\u0003\u0002\u0002\u0002X\u0345",
    "\u0003\u0002\u0002\u0002Z\u034f\u0003\u0002\u0002\u0002\\\u0355\u0003",
    "\u0002\u0002\u0002^\u035f\u0003\u0002\u0002\u0002`\u0368\u0003\u0002",
    "\u0002\u0002b\u037e\u0003\u0002\u0002\u0002d\u038e\u0003\u0002\u0002",
    "\u0002f\u039a\u0003\u0002\u0002\u0002h\u039f\u0003\u0002\u0002\u0002",
    "j\u03a6\u0003\u0002\u0002\u0002l\u03af\u0003\u0002\u0002\u0002n\u03b5",
    "\u0003\u0002\u0002\u0002p\u03d1\u0003\u0002\u0002\u0002r\u03ee\u0003",
    "\u0002\u0002\u0002t\u03f0\u0003\u0002\u0002\u0002v\u03f8\u0003\u0002",
    "\u0002\u0002x\u0403\u0003\u0002\u0002\u0002z\u0426\u0003\u0002\u0002",
    "\u0002|\u0428\u0003\u0002\u0002\u0002~\u045a\u0003\u0002\u0002\u0002",
    "\u0080\u0477\u0003\u0002\u0002\u0002\u0082\u04a6\u0003\u0002\u0002\u0002",
    "\u0084\u04d5\u0003\u0002\u0002\u0002\u0086\u04ec\u0003\u0002\u0002\u0002",
    "\u0088\u0500\u0003\u0002\u0002\u0002\u008a\u0515\u0003\u0002\u0002\u0002",
    "\u008c\u052a\u0003\u0002\u0002\u0002\u008e\u052c\u0003\u0002\u0002\u0002",
    "\u0090\u0544\u0003\u0002\u0002\u0002\u0092\u0551\u0003\u0002\u0002\u0002",
    "\u0094\u0591\u0003\u0002\u0002\u0002\u0096\u05a5\u0003\u0002\u0002\u0002",
    "\u0098\u05bc\u0003\u0002\u0002\u0002\u009a\u05cd\u0003\u0002\u0002\u0002",
    "\u009c\u05cf\u0003\u0002\u0002\u0002\u009e\u05e3\u0003\u0002\u0002\u0002",
    "\u00a0\u05f8\u0003\u0002\u0002\u0002\u00a2\u05fa\u0003\u0002\u0002\u0002",
    "\u00a4\u0603\u0003\u0002\u0002\u0002\u00a6\u0609\u0003\u0002\u0002\u0002",
    "\u00a8\u060f\u0003\u0002\u0002\u0002\u00aa\u0615\u0003\u0002\u0002\u0002",
    "\u00ac\u0619\u0003\u0002\u0002\u0002\u00ae\u062e\u0003\u0002\u0002\u0002",
    "\u00b0\u0630\u0003\u0002\u0002\u0002\u00b2\u0638\u0003\u0002\u0002\u0002",
    "\u00b4\u063e\u0003\u0002\u0002\u0002\u00b6\u0640\u0003\u0002\u0002\u0002",
    "\u00b8\u0644\u0003\u0002\u0002\u0002\u00ba\u0648\u0003\u0002\u0002\u0002",
    "\u00bc\u064c\u0003\u0002\u0002\u0002\u00be\u0650\u0003\u0002\u0002\u0002",
    "\u00c0\u0654\u0003\u0002\u0002\u0002\u00c2\u0658\u0003\u0002\u0002\u0002",
    "\u00c4\u065c\u0003\u0002\u0002\u0002\u00c6\u0660\u0003\u0002\u0002\u0002",
    "\u00c8\u0664\u0003\u0002\u0002\u0002\u00ca\u0668\u0003\u0002\u0002\u0002",
    "\u00cc\u067c\u0003\u0002\u0002\u0002\u00ce\u0697\u0003\u0002\u0002\u0002",
    "\u00d0\u06bc\u0003\u0002\u0002\u0002\u00d2\u06d3\u0003\u0002\u0002\u0002",
    "\u00d4\u071c\u0003\u0002\u0002\u0002\u00d6\u071e\u0003\u0002\u0002\u0002",
    "\u00d8\u0737\u0003\u0002\u0002\u0002\u00da\u074a\u0003\u0002\u0002\u0002",
    "\u00dc\u0754\u0003\u0002\u0002\u0002\u00de\u076a\u0003\u0002\u0002\u0002",
    "\u00e0\u076c\u0003\u0002\u0002\u0002\u00e2\u0772\u0003\u0002\u0002\u0002",
    "\u00e4\u077a\u0003\u0002\u0002\u0002\u00e6\u07b0\u0003\u0002\u0002\u0002",
    "\u00e8\u07b4\u0003\u0002\u0002\u0002\u00ea\u07c8\u0003\u0002\u0002\u0002",
    "\u00ec\u07dc\u0003\u0002\u0002\u0002\u00ee\u07de\u0003\u0002\u0002\u0002",
    "\u00f0\u07fa\u0003\u0002\u0002\u0002\u00f2\u0809\u0003\u0002\u0002\u0002",
    "\u00f4\u0815\u0003\u0002\u0002\u0002\u00f6\u0822\u0003\u0002\u0002\u0002",
    "\u00f8\u0846\u0003\u0002\u0002\u0002\u00fa\u084f\u0003\u0002\u0002\u0002",
    "\u00fc\u0851\u0003\u0002\u0002\u0002\u00fe\u085a\u0003\u0002\u0002\u0002",
    "\u0100\u0861\u0003\u0002\u0002\u0002\u0102\u0864\u0003\u0002\u0002\u0002",
    "\u0104\u087d\u0003\u0002\u0002\u0002\u0106\u0893\u0003\u0002\u0002\u0002",
    "\u0108\u0895\u0003\u0002\u0002\u0002\u010a\u089b\u0003\u0002\u0002\u0002",
    "\u010c\u089d\u0003\u0002\u0002\u0002\u010e\u089f\u0003\u0002\u0002\u0002",
    "\u0110\u08b1\u0003\u0002\u0002\u0002\u0112\u08b5\u0003\u0002\u0002\u0002",
    "\u0114\u08b9\u0003\u0002\u0002\u0002\u0116\u08c4\u0003\u0002\u0002\u0002",
    "\u0118\u08f6\u0003\u0002\u0002\u0002\u011a\u0909\u0003\u0002\u0002\u0002",
    "\u011c\u0915\u0003\u0002\u0002\u0002\u011e\u0917\u0003\u0002\u0002\u0002",
    "\u0120\u0920\u0003\u0002\u0002\u0002\u0122\u0926\u0003\u0002\u0002\u0002",
    "\u0124\u0931\u0003\u0002\u0002\u0002\u0126\u093a\u0003\u0002\u0002\u0002",
    "\u0128\u0942\u0003\u0002\u0002\u0002\u012a\u0950\u0003\u0002\u0002\u0002",
    "\u012c\u0954\u0003\u0002\u0002\u0002\u012e\u096d\u0003\u0002\u0002\u0002",
    "\u0130\u0971\u0003\u0002\u0002\u0002\u0132\u0981\u0003\u0002\u0002\u0002",
    "\u0134\u0983\u0003\u0002\u0002\u0002\u0136\u099b\u0003\u0002\u0002\u0002",
    "\u0138\u09a1\u0003\u0002\u0002\u0002\u013a\u09b4\u0003\u0002\u0002\u0002",
    "\u013c\u09bd\u0003\u0002\u0002\u0002\u013e\u09bf\u0003\u0002\u0002\u0002",
    "\u0140\u09dc\u0003\u0002\u0002\u0002\u0142\u09de\u0003\u0002\u0002\u0002",
    "\u0144\u09e4\u0003\u0002\u0002\u0002\u0146\u09ef\u0003\u0002\u0002\u0002",
    "\u0148\u09f3\u0003\u0002\u0002\u0002\u014a\u09f7\u0003\u0002\u0002\u0002",
    "\u014c\u0a01\u0003\u0002\u0002\u0002\u014e\u0a04\u0003\u0002\u0002\u0002",
    "\u0150\u0a1a\u0003\u0002\u0002\u0002\u0152\u0a1c\u0003\u0002\u0002\u0002",
    "\u0154\u0a1e\u0003\u0002\u0002\u0002\u0156\u0a20\u0003\u0002\u0002\u0002",
    "\u0158\u0a2a\u0003\u0002\u0002\u0002\u015a\u0a34\u0003\u0002\u0002\u0002",
    "\u015c\u0a44\u0003\u0002\u0002\u0002\u015e\u0a49\u0003\u0002\u0002\u0002",
    "\u0160\u0a53\u0003\u0002\u0002\u0002\u0162\u0a69\u0003\u0002\u0002\u0002",
    "\u0164\u0a87\u0003\u0002\u0002\u0002\u0166\u0a9b\u0003\u0002\u0002\u0002",
    "\u0168\u0aa0\u0003\u0002\u0002\u0002\u016a\u0ad9\u0003\u0002\u0002\u0002",
    "\u016c\u0ae6\u0003\u0002\u0002\u0002\u016e\u0af4\u0003\u0002\u0002\u0002",
    "\u0170\u0af6\u0003\u0002\u0002\u0002\u0172\u0b04\u0003\u0002\u0002\u0002",
    "\u0174\u0b06\u0003\u0002\u0002\u0002\u0176\u0b14\u0003\u0002\u0002\u0002",
    "\u0178\u0b16\u0003\u0002\u0002\u0002\u017a\u0b24\u0003\u0002\u0002\u0002",
    "\u017c\u0b26\u0003\u0002\u0002\u0002\u017e\u0b34\u0003\u0002\u0002\u0002",
    "\u0180\u0b36\u0003\u0002\u0002\u0002\u0182\u0b44\u0003\u0002\u0002\u0002",
    "\u0184\u0b46\u0003\u0002\u0002\u0002\u0186\u0b5e\u0003\u0002\u0002\u0002",
    "\u0188\u0b60\u0003\u0002\u0002\u0002\u018a\u0b86\u0003\u0002\u0002\u0002",
    "\u018c\u0ba4\u0003\u0002\u0002\u0002\u018e\u0ba6\u0003\u0002\u0002\u0002",
    "\u0190\u0ba8\u0003\u0002\u0002\u0002\u0192\u0bc9\u0003\u0002\u0002\u0002",
    "\u0194\u0bd2\u0003\u0002\u0002\u0002\u0196\u0bd4\u0003\u0002\u0002\u0002",
    "\u0198\u0bd6\u0003\u0002\u0002\u0002\u019a\u0bd8\u0003\u0002\u0002\u0002",
    "\u019c\u0c14\u0003\u0002\u0002\u0002\u019e\u0c16\u0003\u0002\u0002\u0002",
    "\u01a0\u0c20\u0003\u0002\u0002\u0002\u01a2\u0c29\u0003\u0002\u0002\u0002",
    "\u01a4\u0c30\u0003\u0002\u0002\u0002\u01a6\u0c36\u0003\u0002\u0002\u0002",
    "\u01a8\u0c59\u0003\u0002\u0002\u0002\u01aa\u0c5c\u0003\u0002\u0002\u0002",
    "\u01ac\u0c5e\u0003\u0002\u0002\u0002\u01ae\u0c60\u0003\u0002\u0002\u0002",
    "\u01b0\u0c74\u0003\u0002\u0002\u0002\u01b2\u0c9a\u0003\u0002\u0002\u0002",
    "\u01b4\u0cb6\u0003\u0002\u0002\u0002\u01b6\u0cc7\u0003\u0002\u0002\u0002",
    "\u01b8\u0cd5\u0003\u0002\u0002\u0002\u01ba\u0cd9\u0003\u0002\u0002\u0002",
    "\u01bc\u0cdb\u0003\u0002\u0002\u0002\u01be\u0cf4\u0003\u0002\u0002\u0002",
    "\u01c0\u0d15\u0003\u0002\u0002\u0002\u01c2\u0d17\u0003\u0002\u0002\u0002",
    "\u01c4\u0d21\u0003\u0002\u0002\u0002\u01c6\u0d24\u0003\u0002\u0002\u0002",
    "\u01c8\u0d26\u0003\u0002\u0002\u0002\u01ca\u0d2b\u0003\u0002\u0002\u0002",
    "\u01cc\u0d2d\u0003\u0002\u0002\u0002\u01ce\u0d37\u0003\u0002\u0002\u0002",
    "\u01d0\u0d3c\u0003\u0002\u0002\u0002\u01d2\u0d3e\u0003\u0002\u0002\u0002",
    "\u01d4\u0d4c\u0003\u0002\u0002\u0002\u01d6\u0d55\u0003\u0002\u0002\u0002",
    "\u01d8\u0d63\u0003\u0002\u0002\u0002\u01da\u0d65\u0003\u0002\u0002\u0002",
    "\u01dc\u0d67\u0003\u0002\u0002\u0002\u01de\u0d6e\u0003\u0002\u0002\u0002",
    "\u01e0\u0d71\u0003\u0002\u0002\u0002\u01e2\u0d73\u0003\u0002\u0002\u0002",
    "\u01e4\u0d75\u0003\u0002\u0002\u0002\u01e6\u0d7b\u0003\u0002\u0002\u0002",
    "\u01e8\u0d7d\u0003\u0002\u0002\u0002\u01ea\u01ec\u000b\u0002\u0002\u0002",
    "\u01eb\u01ea\u0003\u0002\u0002\u0002\u01ec\u01ef\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002",
    "\u01ee\u01f2\u0003\u0002\u0002\u0002\u01ef\u01ed\u0003\u0002\u0002\u0002",
    "\u01f0\u01f2\u0005\u0006\u0004\u0002\u01f1\u01ed\u0003\u0002\u0002\u0002",
    "\u01f1\u01f0\u0003\u0002\u0002\u0002\u01f2\u0003\u0003\u0002\u0002\u0002",
    "\u01f3\u01f8\u0005\u0002\u0002\u0002\u01f4\u01f5\u0007\u0003\u0002\u0002",
    "\u01f5\u01f7\u0005\u0002\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002",
    "\u01f7\u01fa\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002\u0002\u0002",
    "\u01f8\u01f9\u0003\u0002\u0002\u0002\u01f9\u01fc\u0003\u0002\u0002\u0002",
    "\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fb\u01fd\u0007\u0003\u0002\u0002",
    "\u01fc\u01fb\u0003\u0002\u0002\u0002\u01fc\u01fd\u0003\u0002\u0002\u0002",
    "\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe\u01ff\u0007\u0002\u0002\u0003",
    "\u01ff\u0005\u0003\u0002\u0002\u0002\u0200\u0202\u0007\u00e4\u0002\u0002",
    "\u0201\u0200\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002",
    "\u0202\u0205\u0003\u0002\u0002\u0002\u0203\u0206\u0005D#\u0002\u0204",
    "\u0206\u0005\b\u0005\u0002\u0205\u0203\u0003\u0002\u0002\u0002\u0205",
    "\u0204\u0003\u0002\u0002\u0002\u0206\u0208\u0003\u0002\u0002\u0002\u0207",
    "\u0209\u0007\u00e4\u0002\u0002\u0208\u0207\u0003\u0002\u0002\u0002\u0208",
    "\u0209\u0003\u0002\u0002\u0002\u0209\u0007\u0003\u0002\u0002\u0002\u020a",
    "\u020d\u0005\n\u0006\u0002\u020b\u020c\u0007\u00e4\u0002\u0002\u020c",
    "\u020e\u0005\f\u0007\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020d",
    "\u020e\u0003\u0002\u0002\u0002\u020e\t\u0003\u0002\u0002\u0002\u020f",
    "\u0210\u0007\u0004\u0002\u0002\u0210\u0215\u0005\u01e6\u00f4\u0002\u0211",
    "\u0212\u0007\u0005\u0002\u0002\u0212\u0214\u0005\u01e6\u00f4\u0002\u0213",
    "\u0211\u0003\u0002\u0002\u0002\u0214\u0217\u0003\u0002\u0002\u0002\u0215",
    "\u0213\u0003\u0002\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002\u0216",
    "\u000b\u0003\u0002\u0002\u0002\u0217\u0215\u0003\u0002\u0002\u0002\u0218",
    "\u021d\u0005\u000e\b\u0002\u0219\u021a\u0007\u00e4\u0002\u0002\u021a",
    "\u021c\u0005\u000e\b\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021c",
    "\u021f\u0003\u0002\u0002\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d",
    "\u021e\u0003\u0002\u0002\u0002\u021e\r\u0003\u0002\u0002\u0002\u021f",
    "\u021d\u0003\u0002\u0002\u0002\u0220\u022b\u0005\u0012\n\u0002\u0221",
    "\u022b\u00054\u001b\u0002\u0222\u022b\u0005\u0010\t\u0002\u0223\u022b",
    "\u0005\u01bc\u00df\u0002\u0224\u022b\u0005> \u0002\u0225\u022b\u0005",
    "\u0196\u00cc\u0002\u0226\u022b\u0005\u01ba\u00de\u0002\u0227\u022b\u0005",
    "\u0198\u00cd\u0002\u0228\u022b\u0005B\"\u0002\u0229\u022b\u0005@!\u0002",
    "\u022a\u0220\u0003\u0002\u0002\u0002\u022a\u0221\u0003\u0002\u0002\u0002",
    "\u022a\u0222\u0003\u0002\u0002\u0002\u022a\u0223\u0003\u0002\u0002\u0002",
    "\u022a\u0224\u0003\u0002\u0002\u0002\u022a\u0225\u0003\u0002\u0002\u0002",
    "\u022a\u0226\u0003\u0002\u0002\u0002\u022a\u0227\u0003\u0002\u0002\u0002",
    "\u022a\u0228\u0003\u0002\u0002\u0002\u022a\u0229\u0003\u0002\u0002\u0002",
    "\u022b\u000f\u0003\u0002\u0002\u0002\u022c\u022e\u0005\u01e6\u00f4\u0002",
    "\u022d\u022f\u0007\u00e4\u0002\u0002\u022e\u022d\u0003\u0002\u0002\u0002",
    "\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002",
    "\u0230\u0232\u0007\u0006\u0002\u0002\u0231\u0233\u0007\u00e4\u0002\u0002",
    "\u0232\u0231\u0003\u0002\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002",
    "\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0235\u0005\u0154\u00ab\u0002",
    "\u0235\u0011\u0003\u0002\u0002\u0002\u0236\u0237\u0005\u0014\u000b\u0002",
    "\u0237\u0013\u0003\u0002\u0002\u0002\u0238\u0239\u0005\u0016\f\u0002",
    "\u0239\u023b\u0007\u0007\u0002\u0002\u023a\u023c\u0005$\u0013\u0002",
    "\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002",
    "\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u0240\u0005\u0018\r\u0002",
    "\u023e\u023f\u0007\u0004\u0002\u0002\u023f\u0241\u0005\u001e\u0010\u0002",
    "\u0240\u023e\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002",
    "\u0241\u0244\u0003\u0002\u0002\u0002\u0242\u0243\u0007\b\u0002\u0002",
    "\u0243\u0245\u0005 \u0011\u0002\u0244\u0242\u0003\u0002\u0002\u0002",
    "\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0247\u0003\u0002\u0002\u0002",
    "\u0246\u0248\u0005*\u0016\u0002\u0247\u0246\u0003\u0002\u0002\u0002",
    "\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u024a\u0003\u0002\u0002\u0002",
    "\u0249\u024b\u0005(\u0015\u0002\u024a\u0249\u0003\u0002\u0002\u0002",
    "\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u0015\u0003\u0002\u0002\u0002",
    "\u024c\u024d\u00050\u0019\u0002\u024d\u0017\u0003\u0002\u0002\u0002",
    "\u024e\u0250\u0007\b\u0002\u0002\u024f\u024e\u0003\u0002\u0002\u0002",
    "\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0253\u0003\u0002\u0002\u0002",
    "\u0251\u0254\u0005\u001a\u000e\u0002\u0252\u0254\u0005\u001c\u000f\u0002",
    "\u0253\u0251\u0003\u0002\u0002\u0002\u0253\u0252\u0003\u0002\u0002\u0002",
    "\u0254\u0019\u0003\u0002\u0002\u0002\u0255\u025a\u00050\u0019\u0002",
    "\u0256\u0257\u0007\t\u0002\u0002\u0257\u0259\u00050\u0019\u0002\u0258",
    "\u0256\u0003\u0002\u0002\u0002\u0259\u025c\u0003\u0002\u0002\u0002\u025a",
    "\u0258\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002\u025b",
    "\u001b\u0003\u0002\u0002\u0002\u025c\u025a\u0003\u0002\u0002\u0002\u025d",
    "\u025e\u00052\u001a\u0002\u025e\u025f\u0007\t\u0002\u0002\u025f\u0260",
    "\u00052\u001a\u0002\u0260\u0261\u0007\t\u0002\u0002\u0261\u0262\u0005",
    "2\u001a\u0002\u0262\u0263\u0007\t\u0002\u0002\u0263\u0264\u00052\u001a",
    "\u0002\u0264\u001d\u0003\u0002\u0002\u0002\u0265\u0266\u00052\u001a",
    "\u0002\u0266\u001f\u0003\u0002\u0002\u0002\u0267\u026c\u00050\u0019",
    "\u0002\u0268\u0269\u0007\b\u0002\u0002\u0269\u026b\u00050\u0019\u0002",
    "\u026a\u0268\u0003\u0002\u0002\u0002\u026b\u026e\u0003\u0002\u0002\u0002",
    "\u026c\u026a\u0003\u0002\u0002\u0002\u026c\u026d\u0003\u0002\u0002\u0002",
    "\u026d!\u0003\u0002\u0002\u0002\u026e\u026c\u0003\u0002\u0002\u0002",
    "\u026f\u0270\u00050\u0019\u0002\u0270#\u0003\u0002\u0002\u0002\u0271",
    "\u0272\u0005\"\u0012\u0002\u0272\u0273\u0007\u0004\u0002\u0002\u0273",
    "\u0274\u0005&\u0014\u0002\u0274\u0275\u0007\n\u0002\u0002\u0275%\u0003",
    "\u0002\u0002\u0002\u0276\u0277\u00050\u0019\u0002\u0277\'\u0003\u0002",
    "\u0002\u0002\u0278\u0279\u0007\u000b\u0002\u0002\u0279\u027a\u00050",
    "\u0019\u0002\u027a)\u0003\u0002\u0002\u0002\u027b\u027c\u0007\f\u0002",
    "\u0002\u027c\u027d\u0005,\u0017\u0002\u027d+\u0003\u0002\u0002\u0002",
    "\u027e\u0283\u0005.\u0018\u0002\u027f\u0280\u0007\r\u0002\u0002\u0280",
    "\u0282\u0005.\u0018\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0282",
    "\u0285\u0003\u0002\u0002\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0283",
    "\u0284\u0003\u0002\u0002\u0002\u0284-\u0003\u0002\u0002\u0002\u0285",
    "\u0283\u0003\u0002\u0002\u0002\u0286\u028d\u00050\u0019\u0002\u0287",
    "\u028b\u0007\u000e\u0002\u0002\u0288\u028c\u00050\u0019\u0002\u0289",
    "\u028c\u00052\u001a\u0002\u028a\u028c\u0007\u00d2\u0002\u0002\u028b",
    "\u0288\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002\u0002\u028b",
    "\u028a\u0003\u0002\u0002\u0002\u028c\u028e\u0003\u0002\u0002\u0002\u028d",
    "\u0287\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028e",
    "/\u0003\u0002\u0002\u0002\u028f\u0296\u0005\u01e6\u00f4\u0002\u0290",
    "\u0292\t\u0002\u0002\u0002\u0291\u0290\u0003\u0002\u0002\u0002\u0291",
    "\u0292\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002\u0293",
    "\u0295\u0005\u01e6\u00f4\u0002\u0294\u0291\u0003\u0002\u0002\u0002\u0295",
    "\u0298\u0003\u0002\u0002\u0002\u0296\u0297\u0003\u0002\u0002\u0002\u0296",
    "\u0294\u0003\u0002\u0002\u0002\u02971\u0003\u0002\u0002\u0002\u0298",
    "\u0296\u0003\u0002\u0002\u0002\u0299\u029b\u0005\u01da\u00ee\u0002\u029a",
    "\u0299\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002\u0002\u0002\u029c",
    "\u029a\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d",
    "3\u0003\u0002\u0002\u0002\u029e\u029f\u0005<\u001f\u0002\u029f5\u0003",
    "\u0002\u0002\u0002\u02a0\u02a2\u0007\u0010\u0002\u0002\u02a1\u02a3\u0007",
    "\u00e4\u0002\u0002\u02a2\u02a1\u0003\u0002\u0002\u0002\u02a2\u02a3\u0003",
    "\u0002\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02a6\u0005",
    "8\u001d\u0002\u02a5\u02a7\u0007\u00e4\u0002\u0002\u02a6\u02a5\u0003",
    "\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u02b2\u0003",
    "\u0002\u0002\u0002\u02a8\u02aa\u0007\u0011\u0002\u0002\u02a9\u02ab\u0007",
    "\u00e4\u0002\u0002\u02aa\u02a9\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003",
    "\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac\u02ae\u0005",
    "8\u001d\u0002\u02ad\u02af\u0007\u00e4\u0002\u0002\u02ae\u02ad\u0003",
    "\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af\u02b1\u0003",
    "\u0002\u0002\u0002\u02b0\u02a8\u0003\u0002\u0002\u0002\u02b1\u02b4\u0003",
    "\u0002\u0002\u0002\u02b2\u02b0\u0003\u0002\u0002\u0002\u02b2\u02b3\u0003",
    "\u0002\u0002\u0002\u02b3\u02b5\u0003\u0002\u0002\u0002\u02b4\u02b2\u0003",
    "\u0002\u0002\u0002\u02b5\u02b6\u0007\u0012\u0002\u0002\u02b6\u02bd\u0003",
    "\u0002\u0002\u0002\u02b7\u02b9\u0007\u0010\u0002\u0002\u02b8\u02ba\u0007",
    "\u00e4\u0002\u0002\u02b9\u02b8\u0003\u0002\u0002\u0002\u02b9\u02ba\u0003",
    "\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bd\u0007",
    "\u0012\u0002\u0002\u02bc\u02a0\u0003\u0002\u0002\u0002\u02bc\u02b7\u0003",
    "\u0002\u0002\u0002\u02bd7\u0003\u0002\u0002\u0002\u02be\u02c0\u0005",
    "\u0196\u00cc\u0002\u02bf\u02c1\u0007\u00e4\u0002\u0002\u02c0\u02bf\u0003",
    "\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003",
    "\u0002\u0002\u0002\u02c2\u02c4\u0007\u0004\u0002\u0002\u02c3\u02c5\u0007",
    "\u00e4\u0002\u0002\u02c4\u02c3\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003",
    "\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c7\u0005",
    "<\u001f\u0002\u02c79\u0003\u0002\u0002\u0002\u02c8\u02ca\u0007\u0013",
    "\u0002\u0002\u02c9\u02cb\u0007\u00e4\u0002\u0002\u02ca\u02c9\u0003\u0002",
    "\u0002\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb\u02cc\u0003\u0002",
    "\u0002\u0002\u02cc\u02ce\u0005<\u001f\u0002\u02cd\u02cf\u0007\u00e4",
    "\u0002\u0002\u02ce\u02cd\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002",
    "\u0002\u0002\u02cf\u02da\u0003\u0002\u0002\u0002\u02d0\u02d2\u0007\u0011",
    "\u0002\u0002\u02d1\u02d3\u0007\u00e4\u0002\u0002\u02d2\u02d1\u0003\u0002",
    "\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002",
    "\u0002\u0002\u02d4\u02d6\u0005<\u001f\u0002\u02d5\u02d7\u0007\u00e4",
    "\u0002\u0002\u02d6\u02d5\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002",
    "\u0002\u0002\u02d7\u02d9\u0003\u0002\u0002\u0002\u02d8\u02d0\u0003\u0002",
    "\u0002\u0002\u02d9\u02dc\u0003\u0002\u0002\u0002\u02da\u02d8\u0003\u0002",
    "\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002\u02db\u02dd\u0003\u0002",
    "\u0002\u0002\u02dc\u02da\u0003\u0002\u0002\u0002\u02dd\u02de\u0007\u0014",
    "\u0002\u0002\u02de\u02e5\u0003\u0002\u0002\u0002\u02df\u02e1\u0007\u0013",
    "\u0002\u0002\u02e0\u02e2\u0007\u00e4\u0002\u0002\u02e1\u02e0\u0003\u0002",
    "\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002",
    "\u0002\u0002\u02e3\u02e5\u0007\u0014\u0002\u0002\u02e4\u02c8\u0003\u0002",
    "\u0002\u0002\u02e4\u02df\u0003\u0002\u0002\u0002\u02e5;\u0003\u0002",
    "\u0002\u0002\u02e6\u02ed\u0005\u0196\u00cc\u0002\u02e7\u02ed\u0005\u01ba",
    "\u00de\u0002\u02e8\u02ed\u00056\u001c\u0002\u02e9\u02ed\u0005:\u001e",
    "\u0002\u02ea\u02ed\u0005\u0198\u00cd\u0002\u02eb\u02ed\u0007t\u0002",
    "\u0002\u02ec\u02e6\u0003\u0002\u0002\u0002\u02ec\u02e7\u0003\u0002\u0002",
    "\u0002\u02ec\u02e8\u0003\u0002\u0002\u0002\u02ec\u02e9\u0003\u0002\u0002",
    "\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002\u02ec\u02eb\u0003\u0002\u0002",
    "\u0002\u02ed=\u0003\u0002\u0002\u0002\u02ee\u02ef\u0005\u01b8\u00dd",
    "\u0002\u02ef\u02f0\u0007\u0004\u0002\u0002\u02f0\u02f5\u0007\u00e4\u0002",
    "\u0002\u02f1\u02f6\u0007\u00d1\u0002\u0002\u02f2\u02f6\u0005\u01ba\u00de",
    "\u0002\u02f3\u02f6\u0005\u0198\u00cd\u0002\u02f4\u02f6\u0005\u01e6\u00f4",
    "\u0002\u02f5\u02f1\u0003\u0002\u0002\u0002\u02f5\u02f2\u0003\u0002\u0002",
    "\u0002\u02f5\u02f3\u0003\u0002\u0002\u0002\u02f5\u02f4\u0003\u0002\u0002",
    "\u0002\u02f6?\u0003\u0002\u0002\u0002\u02f7\u02fa\u0007\b\u0002\u0002",
    "\u02f8\u02fb\u0005\u01e6\u00f4\u0002\u02f9\u02fb\u0005\u01ba\u00de\u0002",
    "\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fa\u02f9\u0003\u0002\u0002\u0002",
    "\u02fb\u02fd\u0003\u0002\u0002\u0002\u02fc\u02f7\u0003\u0002\u0002\u0002",
    "\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002",
    "\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff\u0301\u0003\u0002\u0002\u0002",
    "\u0300\u0302\u0007\b\u0002\u0002\u0301\u0300\u0003\u0002\u0002\u0002",
    "\u0301\u0302\u0003\u0002\u0002\u0002\u0302A\u0003\u0002\u0002\u0002",
    "\u0303\u0308\u0005\u01e6\u00f4\u0002\u0304\u0305\u0007\u0005\u0002\u0002",
    "\u0305\u0307\u0005\u01e6\u00f4\u0002\u0306\u0304\u0003\u0002\u0002\u0002",
    "\u0307\u030a\u0003\u0002\u0002\u0002\u0308\u0306\u0003\u0002\u0002\u0002",
    "\u0308\u0309\u0003\u0002\u0002\u0002\u0309C\u0003\u0002\u0002\u0002",
    "\u030a\u0308\u0003\u0002\u0002\u0002\u030b\u030c\u0005F$\u0002\u030c",
    "\u030d\u0005T+\u0002\u030dE\u0003\u0002\u0002\u0002\u030e\u0310\u0005",
    "H%\u0002\u030f\u0311\u0007\u00e4\u0002\u0002\u0310\u030f\u0003\u0002",
    "\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u0313\u0003\u0002",
    "\u0002\u0002\u0312\u030e\u0003\u0002\u0002\u0002\u0313\u0316\u0003\u0002",
    "\u0002\u0002\u0314\u0312\u0003\u0002\u0002\u0002\u0314\u0315\u0003\u0002",
    "\u0002\u0002\u0315G\u0003\u0002\u0002\u0002\u0316\u0314\u0003\u0002",
    "\u0002\u0002\u0317\u031b\u0005J&\u0002\u0318\u031b\u0005N(\u0002\u0319",
    "\u031b\u0005P)\u0002\u031a\u0317\u0003\u0002\u0002\u0002\u031a\u0318",
    "\u0003\u0002\u0002\u0002\u031a\u0319\u0003\u0002\u0002\u0002\u031bI",
    "\u0003\u0002\u0002\u0002\u031c\u031f\u00078\u0002\u0002\u031d\u031e",
    "\u0007\u00e4\u0002\u0002\u031e\u0320\u0005L\'\u0002\u031f\u031d\u0003",
    "\u0002\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002\u0320\u0325\u0003",
    "\u0002\u0002\u0002\u0321\u0322\u0007\u00e4\u0002\u0002\u0322\u0324\u0005",
    "R*\u0002\u0323\u0321\u0003\u0002\u0002\u0002\u0324\u0327\u0003\u0002",
    "\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0325\u0326\u0003\u0002",
    "\u0002\u0002\u0326K\u0003\u0002\u0002\u0002\u0327\u0325\u0003\u0002",
    "\u0002\u0002\u0328\u0329\u0007\u00df\u0002\u0002\u0329M\u0003\u0002",
    "\u0002\u0002\u032a\u032b\u00079\u0002\u0002\u032bO\u0003\u0002\u0002",
    "\u0002\u032c\u032d\u0007:\u0002\u0002\u032dQ\u0003\u0002\u0002\u0002",
    "\u032e\u0330\u0005\u01e6\u00f4\u0002\u032f\u0331\u0007\u00e4\u0002\u0002",
    "\u0330\u032f\u0003\u0002\u0002\u0002\u0330\u0331\u0003\u0002\u0002\u0002",
    "\u0331\u0332\u0003\u0002\u0002\u0002\u0332\u0334\u0007\u000e\u0002\u0002",
    "\u0333\u0335\u0007\u00e4\u0002\u0002\u0334\u0333\u0003\u0002\u0002\u0002",
    "\u0334\u0335\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002",
    "\u0336\u0337\u0005\u01e6\u00f4\u0002\u0337S\u0003\u0002\u0002\u0002",
    "\u0338\u0340\u0005f4\u0002\u0339\u0340\u0005V,\u0002\u033a\u033b\u0007",
    "\u0086\u0002\u0002\u033b\u033d\u0007\u00e4\u0002\u0002\u033c\u033a\u0003",
    "\u0002\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u033e\u0003",
    "\u0002\u0002\u0002\u033e\u0340\u0005h5\u0002\u033f\u0338\u0003\u0002",
    "\u0002\u0002\u033f\u0339\u0003\u0002\u0002\u0002\u033f\u033c\u0003\u0002",
    "\u0002\u0002\u0340U\u0003\u0002\u0002\u0002\u0341\u0344\u0005X-\u0002",
    "\u0342\u0344\u0005Z.\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0343",
    "\u0342\u0003\u0002\u0002\u0002\u0344W\u0003\u0002\u0002\u0002\u0345",
    "\u034c\u0005\\/\u0002\u0346\u0348\u0007\u00e4\u0002\u0002\u0347\u0346",
    "\u0003\u0002\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0349",
    "\u0003\u0002\u0002\u0002\u0349\u034b\u0005b2\u0002\u034a\u0347\u0003",
    "\u0002\u0002\u0002\u034b\u034e\u0003\u0002\u0002\u0002\u034c\u034a\u0003",
    "\u0002\u0002\u0002\u034c\u034d\u0003\u0002\u0002\u0002\u034dY\u0003",
    "\u0002\u0002\u0002\u034e\u034c\u0003\u0002\u0002\u0002\u034f\u0351\u0005",
    "^0\u0002\u0350\u0352\u0007\u00e4\u0002\u0002\u0351\u0350\u0003\u0002",
    "\u0002\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0353\u0003\u0002",
    "\u0002\u0002\u0353\u0354\u0005`1\u0002\u0354[\u0003\u0002\u0002\u0002",
    "\u0355\u035c\u0005d3\u0002\u0356\u0358\u0007\u00e4\u0002\u0002\u0357",
    "\u0356\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002\u0358",
    "\u0359\u0003\u0002\u0002\u0002\u0359\u035b\u0005d3\u0002\u035a\u0357",
    "\u0003\u0002\u0002\u0002\u035b\u035e\u0003\u0002\u0002\u0002\u035c\u035a",
    "\u0003\u0002\u0002\u0002\u035c\u035d\u0003\u0002\u0002\u0002\u035d]",
    "\u0003\u0002\u0002\u0002\u035e\u035c\u0003\u0002\u0002\u0002\u035f\u0360",
    "\u0007;\u0002\u0002\u0360\u0361\u0007\u00e4\u0002\u0002\u0361\u0362",
    "\u0007<\u0002\u0002\u0362\u0363\u0007\u00e4\u0002\u0002\u0363\u0366",
    "\u0007=\u0002\u0002\u0364\u0365\u0007\u00e4\u0002\u0002\u0365\u0367",
    "\u0005\u01da\u00ee\u0002\u0366\u0364\u0003\u0002\u0002\u0002\u0366\u0367",
    "\u0003\u0002\u0002\u0002\u0367_\u0003\u0002\u0002\u0002\u0368\u036f",
    "\u0005\u00d6l\u0002\u0369\u036b\u0007\u00e4\u0002\u0002\u036a\u0369",
    "\u0003\u0002\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u036c",
    "\u0003\u0002\u0002\u0002\u036c\u036e\u0005d3\u0002\u036d\u036a\u0003",
    "\u0002\u0002\u0002\u036e\u0371\u0003\u0002\u0002\u0002\u036f\u036d\u0003",
    "\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370a\u0003",
    "\u0002\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0372\u0373\u0007",
    ">\u0002\u0002\u0373\u0374\u0007\u00e4\u0002\u0002\u0374\u0376\u0007",
    "?\u0002\u0002\u0375\u0377\u0007\u00e4\u0002\u0002\u0376\u0375\u0003",
    "\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002\u0377\u0378\u0003",
    "\u0002\u0002\u0002\u0378\u037f\u0005\\/\u0002\u0379\u037b\u0007>\u0002",
    "\u0002\u037a\u037c\u0007\u00e4\u0002\u0002\u037b\u037a\u0003\u0002\u0002",
    "\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002",
    "\u0002\u037d\u037f\u0005\\/\u0002\u037e\u0372\u0003\u0002\u0002\u0002",
    "\u037e\u0379\u0003\u0002\u0002\u0002\u037fc\u0003\u0002\u0002\u0002",
    "\u0380\u038f\u0005\u00d6l\u0002\u0381\u038f\u0005\u0118\u008d\u0002",
    "\u0382\u038f\u0005\u00d8m\u0002\u0383\u038f\u0005\u00dan\u0002\u0384",
    "\u038f\u0005\u00dco\u0002\u0385\u038f\u0005\u00e0q\u0002\u0386\u038f",
    "\u0005\u00e2r\u0002\u0387\u038f\u0005\u00e4s\u0002\u0388\u038f\u0005",
    "\u00e8u\u0002\u0389\u038f\u0005\u00eav\u0002\u038a\u038f\u0005\u00ee",
    "x\u0002\u038b\u038f\u0005\u00f0y\u0002\u038c\u038f\u0005\u00f2z\u0002",
    "\u038d\u038f\u0005\u00fc\u007f\u0002\u038e\u0380\u0003\u0002\u0002\u0002",
    "\u038e\u0381\u0003\u0002\u0002\u0002\u038e\u0382\u0003\u0002\u0002\u0002",
    "\u038e\u0383\u0003\u0002\u0002\u0002\u038e\u0384\u0003\u0002\u0002\u0002",
    "\u038e\u0385\u0003\u0002\u0002\u0002\u038e\u0386\u0003\u0002\u0002\u0002",
    "\u038e\u0387\u0003\u0002\u0002\u0002\u038e\u0388\u0003\u0002\u0002\u0002",
    "\u038e\u0389\u0003\u0002\u0002\u0002\u038e\u038a\u0003\u0002\u0002\u0002",
    "\u038e\u038b\u0003\u0002\u0002\u0002\u038e\u038c\u0003\u0002\u0002\u0002",
    "\u038e\u038d\u0003\u0002\u0002\u0002\u038fe\u0003\u0002\u0002\u0002",
    "\u0390\u039b\u0005\u00be`\u0002\u0391\u039b\u0005\u00c8e\u0002\u0392",
    "\u039b\u0005\u00b6\\\u0002\u0393\u039b\u0005\u00c0a\u0002\u0394\u039b",
    "\u0005\u00b8]\u0002\u0395\u039b\u0005\u00c2b\u0002\u0396\u039b\u0005",
    "\u00ba^\u0002\u0397\u039b\u0005\u00c4c\u0002\u0398\u039b\u0005\u00bc",
    "_\u0002\u0399\u039b\u0005\u00c6d\u0002\u039a\u0390\u0003\u0002\u0002",
    "\u0002\u039a\u0391\u0003\u0002\u0002\u0002\u039a\u0392\u0003\u0002\u0002",
    "\u0002\u039a\u0393\u0003\u0002\u0002\u0002\u039a\u0394\u0003\u0002\u0002",
    "\u0002\u039a\u0395\u0003\u0002\u0002\u0002\u039a\u0396\u0003\u0002\u0002",
    "\u0002\u039a\u0397\u0003\u0002\u0002\u0002\u039a\u0398\u0003\u0002\u0002",
    "\u0002\u039a\u0399\u0003\u0002\u0002\u0002\u039bg\u0003\u0002\u0002",
    "\u0002\u039c\u03a0\u0005j6\u0002\u039d\u03a0\u0005l7\u0002\u039e\u03a0",
    "\u0005n8\u0002\u039f\u039c\u0003\u0002\u0002\u0002\u039f\u039d\u0003",
    "\u0002\u0002\u0002\u039f\u039e\u0003\u0002\u0002\u0002\u03a0i\u0003",
    "\u0002\u0002\u0002\u03a1\u03a7\u0005\u009eP\u0002\u03a2\u03a7\u0005",
    "\u00a0Q\u0002\u03a3\u03a7\u0005\u00a2R\u0002\u03a4\u03a7\u0005\u00a4",
    "S\u0002\u03a5\u03a7\u0005\u00a6T\u0002\u03a6\u03a1\u0003\u0002\u0002",
    "\u0002\u03a6\u03a2\u0003\u0002\u0002\u0002\u03a6\u03a3\u0003\u0002\u0002",
    "\u0002\u03a6\u03a4\u0003\u0002\u0002\u0002\u03a6\u03a5\u0003\u0002\u0002",
    "\u0002\u03a7k\u0003\u0002\u0002\u0002\u03a8\u03b0\u0005p9\u0002\u03a9",
    "\u03b0\u0005r:\u0002\u03aa\u03b0\u0005v<\u0002\u03ab\u03b0\u0005x=\u0002",
    "\u03ac\u03b0\u0005z>\u0002\u03ad\u03b0\u0005|?\u0002\u03ae\u03b0\u0005",
    "~@\u0002\u03af\u03a8\u0003\u0002\u0002\u0002\u03af\u03a9\u0003\u0002",
    "\u0002\u0002\u03af\u03aa\u0003\u0002\u0002\u0002\u03af\u03ab\u0003\u0002",
    "\u0002\u0002\u03af\u03ac\u0003\u0002\u0002\u0002\u03af\u03ad\u0003\u0002",
    "\u0002\u0002\u03af\u03ae\u0003\u0002\u0002\u0002\u03b0m\u0003\u0002",
    "\u0002\u0002\u03b1\u03b6\u0005\u0080A\u0002\u03b2\u03b6\u0005\u0082",
    "B\u0002\u03b3\u03b6\u0005\u0084C\u0002\u03b4\u03b6\u0005\u0086D\u0002",
    "\u03b5\u03b1\u0003\u0002\u0002\u0002\u03b5\u03b2\u0003\u0002\u0002\u0002",
    "\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b4\u0003\u0002\u0002\u0002",
    "\u03b6o\u0003\u0002\u0002\u0002\u03b7\u03b8\u0007\u0087\u0002\u0002",
    "\u03b8\u03bb\u0007\u00e4\u0002\u0002\u03b9\u03ba\u0007?\u0002\u0002",
    "\u03ba\u03bc\u0007\u00e4\u0002\u0002\u03bb\u03b9\u0003\u0002\u0002\u0002",
    "\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002\u0002\u0002",
    "\u03bd\u03c2\u0007\u0092\u0002\u0002\u03be\u03bf\u0007\u00e4\u0002\u0002",
    "\u03bf\u03c0\u0007K\u0002\u0002\u03c0\u03c1\u0007\u00e4\u0002\u0002",
    "\u03c1\u03c3\u0007\u0094\u0002\u0002\u03c2\u03be\u0003\u0002\u0002\u0002",
    "\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3\u03d2\u0003\u0002\u0002\u0002",
    "\u03c4\u03c5\u0007\u0087\u0002\u0002\u03c5\u03c8\u0007\u00e4\u0002\u0002",
    "\u03c6\u03c7\u0007\u0095\u0002\u0002\u03c7\u03c9\u0007\u00e4\u0002\u0002",
    "\u03c8\u03c6\u0003\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002",
    "\u03c9\u03ca\u0003\u0002\u0002\u0002\u03ca\u03cf\u0007\u0092\u0002\u0002",
    "\u03cb\u03cc\u0007\u00e4\u0002\u0002\u03cc\u03cd\u0007K\u0002\u0002",
    "\u03cd\u03ce\u0007\u00e4\u0002\u0002\u03ce\u03d0\u0007\u0094\u0002\u0002",
    "\u03cf\u03cb\u0003\u0002\u0002\u0002\u03cf\u03d0\u0003\u0002\u0002\u0002",
    "\u03d0\u03d2\u0003\u0002\u0002\u0002\u03d1\u03b7\u0003\u0002\u0002\u0002",
    "\u03d1\u03c4\u0003\u0002\u0002\u0002\u03d2q\u0003\u0002\u0002\u0002",
    "\u03d3\u03d4\u0007@\u0002\u0002\u03d4\u03d5\u0007\u00e4\u0002\u0002",
    "\u03d5\u03d6\u0007\u0091\u0002\u0002\u03d6\u03d7\u0007\u00e4\u0002\u0002",
    "\u03d7\u03da\u0005\u01e6\u00f4\u0002\u03d8\u03d9\u0007\u00e4\u0002\u0002",
    "\u03d9\u03db\u0005\u00a8U\u0002\u03da\u03d8\u0003\u0002\u0002\u0002",
    "\u03da\u03db\u0003\u0002\u0002\u0002\u03db\u03de\u0003\u0002\u0002\u0002",
    "\u03dc\u03dd\u0007\u00e4\u0002\u0002\u03dd\u03df\u0005t;\u0002\u03de",
    "\u03dc\u0003\u0002\u0002\u0002\u03de\u03df\u0003\u0002\u0002\u0002\u03df",
    "\u03ef\u0003\u0002\u0002\u0002\u03e0\u03e1\u0007@\u0002\u0002\u03e1",
    "\u03e5\u0007\u00e4\u0002\u0002\u03e2\u03e3\u0005\u00acW\u0002\u03e3",
    "\u03e4\u0007\u00e4\u0002\u0002\u03e4\u03e6\u0003\u0002\u0002\u0002\u03e5",
    "\u03e2\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6",
    "\u03e7\u0003\u0002\u0002\u0002\u03e7\u03e8\u0007\u0091\u0002\u0002\u03e8",
    "\u03e9\u0007\u00e4\u0002\u0002\u03e9\u03ec\u0005\u01e6\u00f4\u0002\u03ea",
    "\u03eb\u0007\u00e4\u0002\u0002\u03eb\u03ed\u0005t;\u0002\u03ec\u03ea",
    "\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002\u0002\u0002\u03ed\u03ef",
    "\u0003\u0002\u0002\u0002\u03ee\u03d3\u0003\u0002\u0002\u0002\u03ee\u03e0",
    "\u0003\u0002\u0002\u0002\u03efs\u0003\u0002\u0002\u0002\u03f0\u03f1",
    "\u0007N\u0002\u0002\u03f1\u03f2\u0007\u00e4\u0002\u0002\u03f2\u03f3",
    "\u0007\u00a7\u0002\u0002\u03f3\u03f4\u0007\u00e4\u0002\u0002\u03f4\u03f5",
    "\u0007\u00a8\u0002\u0002\u03f5\u03f6\u0007\u00e4\u0002\u0002\u03f6\u03f7",
    "\u0005\u01e6\u00f4\u0002\u03f7u\u0003\u0002\u0002\u0002\u03f8\u03f9",
    "\u0007A\u0002\u0002\u03f9\u03fa\u0007\u00e4\u0002\u0002\u03fa\u03fb",
    "\u0007\u0091\u0002\u0002\u03fb\u03fc\u0007\u00e4\u0002\u0002\u03fc\u0401",
    "\u0005\u01e6\u00f4\u0002\u03fd\u03fe\u0007\u00e4\u0002\u0002\u03fe\u03ff",
    "\u0007\u008f\u0002\u0002\u03ff\u0400\u0007\u00e4\u0002\u0002\u0400\u0402",
    "\u0007H\u0002\u0002\u0401\u03fd\u0003\u0002\u0002\u0002\u0401\u0402",
    "\u0003\u0002\u0002\u0002\u0402w\u0003\u0002\u0002\u0002\u0403\u0404",
    "\u0007\u0087\u0002\u0002\u0404\u0405\u0007\u00e4\u0002\u0002\u0405\u0406",
    "\u0007\u0094\u0002\u0002\u0406y\u0003\u0002\u0002\u0002\u0407\u0408",
    "\u0007@\u0002\u0002\u0408\u0409\u0007\u00e4\u0002\u0002\u0409\u040a",
    "\u0007\u0093\u0002\u0002\u040a\u040b\u0007\u00e4\u0002\u0002\u040b\u040c",
    "\u0005\"\u0012\u0002\u040c\u040f\u0007\u00e4\u0002\u0002\u040d\u040e",
    "\u0007\u00e4\u0002\u0002\u040e\u0410\u0005\u00a8U\u0002\u040f\u040d",
    "\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u0411",
    "\u0003\u0002\u0002\u0002\u0411\u0414\u0005\u00aeX\u0002\u0412\u0413",
    "\u0007\u00e4\u0002\u0002\u0413\u0415\u0005\u00b2Z\u0002\u0414\u0412",
    "\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002\u0002\u0002\u0415\u0427",
    "\u0003\u0002\u0002\u0002\u0416\u0417\u0007@\u0002\u0002\u0417\u041b",
    "\u0007\u00e4\u0002\u0002\u0418\u0419\u0005\u00acW\u0002\u0419\u041a",
    "\u0007\u00e4\u0002\u0002\u041a\u041c\u0003\u0002\u0002\u0002\u041b\u0418",
    "\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002\u0002\u0002\u041c\u041d",
    "\u0003\u0002\u0002\u0002\u041d\u041e\u0007\u0093\u0002\u0002\u041e\u041f",
    "\u0007\u00e4\u0002\u0002\u041f\u0420\u0005\"\u0012\u0002\u0420\u0421",
    "\u0007\u00e4\u0002\u0002\u0421\u0424\u0005\u00aeX\u0002\u0422\u0423",
    "\u0007\u00e4\u0002\u0002\u0423\u0425\u0005\u00b2Z\u0002\u0424\u0422",
    "\u0003\u0002\u0002\u0002\u0424\u0425\u0003\u0002\u0002\u0002\u0425\u0427",
    "\u0003\u0002\u0002\u0002\u0426\u0407\u0003\u0002\u0002\u0002\u0426\u0416",
    "\u0003\u0002\u0002\u0002\u0427{\u0003\u0002\u0002\u0002\u0428\u0429",
    "\u0007A\u0002\u0002\u0429\u042a\u0007\u00e4\u0002\u0002\u042a\u042b",
    "\u0007\u0093\u0002\u0002\u042b\u042c\u0007\u00e4\u0002\u0002\u042c\u042f",
    "\u0005\"\u0012\u0002\u042d\u042e\u0007\u00e4\u0002\u0002\u042e\u0430",
    "\u0005\u00aaV\u0002\u042f\u042d\u0003\u0002\u0002\u0002\u042f\u0430",
    "\u0003\u0002\u0002\u0002\u0430}\u0003\u0002\u0002\u0002\u0431\u0432",
    "\u0007\u009c\u0002\u0002\u0432\u0433\u0007\u00e4\u0002\u0002\u0433\u0434",
    "\u0007\u009d\u0002\u0002\u0434\u0435\u0007\u00e4\u0002\u0002\u0435\u0436",
    "\u0007\u0093\u0002\u0002\u0436\u0437\u0007\u00e4\u0002\u0002\u0437\u0438",
    "\u0007T\u0002\u0002\u0438\u0439\u0007\u00e4\u0002\u0002\u0439\u043a",
    "\u0007\u0096\u0002\u0002\u043a\u043b\u0007\u00e4\u0002\u0002\u043b\u043c",
    "\u0007M\u0002\u0002\u043c\u043f\u0007\u00e4\u0002\u0002\u043d\u0440",
    "\u0005&\u0014\u0002\u043e\u0440\u0005\u01ca\u00e6\u0002\u043f\u043d",
    "\u0003\u0002\u0002\u0002\u043f\u043e\u0003\u0002\u0002\u0002\u0440\u0441",
    "\u0003\u0002\u0002\u0002\u0441\u0442\u0007\u009e\u0002\u0002\u0442\u0445",
    "\u0007\u00e4\u0002\u0002\u0443\u0446\u0005&\u0014\u0002\u0444\u0446",
    "\u0005\u01ca\u00e6\u0002\u0445\u0443\u0003\u0002\u0002\u0002\u0445\u0444",
    "\u0003\u0002\u0002\u0002\u0446\u045b\u0003\u0002\u0002\u0002\u0447\u0448",
    "\u0007\u009c\u0002\u0002\u0448\u0449\u0007\u00e4\u0002\u0002\u0449\u044a",
    "\u0007\u0093\u0002\u0002\u044a\u044b\u0007\u00e4\u0002\u0002\u044b\u044c",
    "\u0005\"\u0012\u0002\u044c\u044d\u0007\u00e4\u0002\u0002\u044d\u0450",
    "\u0005\u00aeX\u0002\u044e\u044f\u0007\u00e4\u0002\u0002\u044f\u0451",
    "\u0005\u00b2Z\u0002\u0450\u044e\u0003\u0002\u0002\u0002\u0450\u0451",
    "\u0003\u0002\u0002\u0002\u0451\u045b\u0003\u0002\u0002\u0002\u0452\u0453",
    "\u0007\u009c\u0002\u0002\u0453\u0454\u0007\u00e4\u0002\u0002\u0454\u0455",
    "\u0007\u0093\u0002\u0002\u0455\u0456\u0007\u00e4\u0002\u0002\u0456\u0457",
    "\u0005\"\u0012\u0002\u0457\u0458\u0007\u00e4\u0002\u0002\u0458\u0459",
    "\u0005\u00b2Z\u0002\u0459\u045b\u0003\u0002\u0002\u0002\u045a\u0431",
    "\u0003\u0002\u0002\u0002\u045a\u0447\u0003\u0002\u0002\u0002\u045a\u0452",
    "\u0003\u0002\u0002\u0002\u045b\u007f\u0003\u0002\u0002\u0002\u045c\u045d",
    "\u0007\u0087\u0002\u0002\u045d\u0460\u0007\u00e4\u0002\u0002\u045e\u045f",
    "\u0007?\u0002\u0002\u045f\u0461\u0007\u00e4\u0002\u0002\u0460\u045e",
    "\u0003\u0002\u0002\u0002\u0460\u0461\u0003\u0002\u0002\u0002\u0461\u0462",
    "\u0003\u0002\u0002\u0002\u0462\u0478\u0007\u009f\u0002\u0002\u0463\u0464",
    "\u0007\u0087\u0002\u0002\u0464\u046a\u0007\u00e4\u0002\u0002\u0465\u0466",
    "\u0007\u0091\u0002\u0002\u0466\u0467\u0007\u00e4\u0002\u0002\u0467\u0468",
    "\u0005\u01e6\u00f4\u0002\u0468\u0469\u0007\u00e4\u0002\u0002\u0469\u046b",
    "\u0003\u0002\u0002\u0002\u046a\u0465\u0003\u0002\u0002\u0002\u046a\u046b",
    "\u0003\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002\u0002\u046c\u0478",
    "\u0007\u009f\u0002\u0002\u046d\u046e\u0007\u0087\u0002\u0002\u046e\u0474",
    "\u0007\u00e4\u0002\u0002\u046f\u0470\u0007\u0093\u0002\u0002\u0470\u0471",
    "\u0007\u00e4\u0002\u0002\u0471\u0472\u0005\"\u0012\u0002\u0472\u0473",
    "\u0007\u00e4\u0002\u0002\u0473\u0475\u0003\u0002\u0002\u0002\u0474\u046f",
    "\u0003\u0002\u0002\u0002\u0474\u0475\u0003\u0002\u0002\u0002\u0475\u0476",
    "\u0003\u0002\u0002\u0002\u0476\u0478\u0007\u009f\u0002\u0002\u0477\u045c",
    "\u0003\u0002\u0002\u0002\u0477\u0463\u0003\u0002\u0002\u0002\u0477\u046d",
    "\u0003\u0002\u0002\u0002\u0478\u0081\u0003\u0002\u0002\u0002\u0479\u047a",
    "\u0007\u00a0\u0002\u0002\u047a\u047b\u0007\u00e4\u0002\u0002\u047b\u047c",
    "\u0007\u0091\u0002\u0002\u047c\u047d\u0007\u00e4\u0002\u0002\u047d\u047e",
    "\u0005\u008eH\u0002\u047e\u047f\u0007\u00e4\u0002\u0002\u047f\u0480",
    "\u0007\u009e\u0002\u0002\u0480\u0481\u0007\u00e4\u0002\u0002\u0481\u0482",
    "\u0005\"\u0012\u0002\u0482\u04a7\u0003\u0002\u0002\u0002\u0483\u0484",
    "\u0007\u00a0\u0002\u0002\u0484\u0485\u0007\u00e4\u0002\u0002\u0485\u0486",
    "\u0005\u0094K\u0002\u0486\u0487\u0007\u00e4\u0002\u0002\u0487\u0488",
    "\u0007C\u0002\u0002\u0488\u0489\u0007\u00e4\u0002\u0002\u0489\u048a",
    "\u0005\u008aF\u0002\u048a\u048b\u0007\u00e4\u0002\u0002\u048b\u048c",
    "\u0007\u009e\u0002\u0002\u048c\u048d\u0005\u008eH\u0002\u048d\u04a7",
    "\u0003\u0002\u0002\u0002\u048e\u048f\u0007\u00a0\u0002\u0002\u048f\u0490",
    "\u0007\u00e4\u0002\u0002\u0490\u0491\u0005\u0090I\u0002\u0491\u0492",
    "\u0007\u00e4\u0002\u0002\u0492\u0493\u0007C\u0002\u0002\u0493\u0494",
    "\u0007\u00e4\u0002\u0002\u0494\u0495\u0005\u008cG\u0002\u0495\u0496",
    "\u0007\u00e4\u0002\u0002\u0496\u0497\u0005\u0098M\u0002\u0497\u0498",
    "\u0007\u00e4\u0002\u0002\u0498\u0499\u0007\u009e\u0002\u0002\u0499\u049a",
    "\u0005\u008eH\u0002\u049a\u04a7\u0003\u0002\u0002\u0002\u049b\u049c",
    "\u0007\u00a0\u0002\u0002\u049c\u049d\u0007\u00e4\u0002\u0002\u049d\u049e",
    "\u0005\u0096L\u0002\u049e\u049f\u0007\u00e4\u0002\u0002\u049f\u04a0",
    "\u0007C\u0002\u0002\u04a0\u04a1\u0007\u00e4\u0002\u0002\u04a1\u04a2",
    "\u0007\u0089\u0002\u0002\u04a2\u04a3\u0007\u00e4\u0002\u0002\u04a3\u04a4",
    "\u0007\u009e\u0002\u0002\u04a4\u04a5\u0005\u008eH\u0002\u04a5\u04a7",
    "\u0003\u0002\u0002\u0002\u04a6\u0479\u0003\u0002\u0002\u0002\u04a6\u0483",
    "\u0003\u0002\u0002\u0002\u04a6\u048e\u0003\u0002\u0002\u0002\u04a6\u049b",
    "\u0003\u0002\u0002\u0002\u04a7\u0083\u0003\u0002\u0002\u0002\u04a8\u04a9",
    "\u0007\u00a1\u0002\u0002\u04a9\u04aa\u0007\u00e4\u0002\u0002\u04aa\u04ab",
    "\u0007\u0091\u0002\u0002\u04ab\u04ac\u0007\u00e4\u0002\u0002\u04ac\u04ad",
    "\u0005\u008eH\u0002\u04ad\u04ae\u0007\u00e4\u0002\u0002\u04ae\u04af",
    "\u0007\u009e\u0002\u0002\u04af\u04b0\u0007\u00e4\u0002\u0002\u04b0\u04b1",
    "\u0005\"\u0012\u0002\u04b1\u04d6\u0003\u0002\u0002\u0002\u04b2\u04b3",
    "\u0007\u00a1\u0002\u0002\u04b3\u04b4\u0007\u00e4\u0002\u0002\u04b4\u04b5",
    "\u0005\u0094K\u0002\u04b5\u04b6\u0007\u00e4\u0002\u0002\u04b6\u04b7",
    "\u0007C\u0002\u0002\u04b7\u04b8\u0007\u00e4\u0002\u0002\u04b8\u04b9",
    "\u0005\u008aF\u0002\u04b9\u04ba\u0007\u00e4\u0002\u0002\u04ba\u04bb",
    "\u0007\u009e\u0002\u0002\u04bb\u04bc\u0005\u008eH\u0002\u04bc\u04d6",
    "\u0003\u0002\u0002\u0002\u04bd\u04be\u0007\u00a1\u0002\u0002\u04be\u04bf",
    "\u0007\u00e4\u0002\u0002\u04bf\u04c0\u0005\u0090I\u0002\u04c0\u04c1",
    "\u0007\u00e4\u0002\u0002\u04c1\u04c2\u0007C\u0002\u0002\u04c2\u04c3",
    "\u0007\u00e4\u0002\u0002\u04c3\u04c4\u0005\u008cG\u0002\u04c4\u04c5",
    "\u0007\u00e4\u0002\u0002\u04c5\u04c6\u0005\u0098M\u0002\u04c6\u04c7",
    "\u0007\u00e4\u0002\u0002\u04c7\u04c8\u0007\u009e\u0002\u0002\u04c8\u04c9",
    "\u0005\u008eH\u0002\u04c9\u04d6\u0003\u0002\u0002\u0002\u04ca\u04cb",
    "\u0007\u00a1\u0002\u0002\u04cb\u04cc\u0007\u00e4\u0002\u0002\u04cc\u04cd",
    "\u0005\u0096L\u0002\u04cd\u04ce\u0007\u00e4\u0002\u0002\u04ce\u04cf",
    "\u0007C\u0002\u0002\u04cf\u04d0\u0007\u00e4\u0002\u0002\u04d0\u04d1",
    "\u0007\u0089\u0002\u0002\u04d1\u04d2\u0007\u00e4\u0002\u0002\u04d2\u04d3",
    "\u0007\u009e\u0002\u0002\u04d3\u04d4\u0005\u008eH\u0002\u04d4\u04d6",
    "\u0003\u0002\u0002\u0002\u04d5\u04a8\u0003\u0002\u0002\u0002\u04d5\u04b2",
    "\u0003\u0002\u0002\u0002\u04d5\u04bd\u0003\u0002\u0002\u0002\u04d5\u04ca",
    "\u0003\u0002\u0002\u0002\u04d6\u0085\u0003\u0002\u0002\u0002\u04d7\u04d8",
    "\u0007\u00a2\u0002\u0002\u04d8\u04d9\u0007\u00e4\u0002\u0002\u04d9\u04da",
    "\u0007\u0091\u0002\u0002\u04da\u04db\u0007\u00e4\u0002\u0002\u04db\u04dc",
    "\u0005\u008eH\u0002\u04dc\u04dd\u0007\u00e4\u0002\u0002\u04dd\u04de",
    "\u0007M\u0002\u0002\u04de\u04df\u0007\u00e4\u0002\u0002\u04df\u04e0",
    "\u0005\"\u0012\u0002\u04e0\u04ed\u0003\u0002\u0002\u0002\u04e1\u04e4",
    "\u0007\u00a2\u0002\u0002\u04e2\u04e3\u0007\u00e4\u0002\u0002\u04e3\u04e5",
    "\t\u0003\u0002\u0002\u04e4\u04e2\u0003\u0002\u0002\u0002\u04e4\u04e5",
    "\u0003\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6\u04e7",
    "\u0005\u0088E\u0002\u04e7\u04e8\u0007\u00e4\u0002\u0002\u04e8\u04e9",
    "\u0007M\u0002\u0002\u04e9\u04ea\u0007\u00e4\u0002\u0002\u04ea\u04eb",
    "\u0005\u008eH\u0002\u04eb\u04ed\u0003\u0002\u0002\u0002\u04ec\u04d7",
    "\u0003\u0002\u0002\u0002\u04ec\u04e1\u0003\u0002\u0002\u0002\u04ed\u0087",
    "\u0003\u0002\u0002\u0002\u04ee\u04ef\u0005\u0094K\u0002\u04ef\u04f0",
    "\u0007\u00e4\u0002\u0002\u04f0\u04f1\u0007C\u0002\u0002\u04f1\u04f2",
    "\u0007\u00e4\u0002\u0002\u04f2\u04f3\u0005\u008aF\u0002\u04f3\u0501",
    "\u0003\u0002\u0002\u0002\u04f4\u04f5\u0005\u0092J\u0002\u04f5\u04f6",
    "\u0007\u00e4\u0002\u0002\u04f6\u04f7\u0007C\u0002\u0002\u04f7\u04f8",
    "\u0007\u00e4\u0002\u0002\u04f8\u04f9\u0005\u008cG\u0002\u04f9\u0501",
    "\u0003\u0002\u0002\u0002\u04fa\u04fb\u0005\u0096L\u0002\u04fb\u04fc",
    "\u0007\u00e4\u0002\u0002\u04fc\u04fd\u0007C\u0002\u0002\u04fd\u04fe",
    "\u0007\u00e4\u0002\u0002\u04fe\u04ff\u0007\u0089\u0002\u0002\u04ff\u0501",
    "\u0003\u0002\u0002\u0002\u0500\u04ee\u0003\u0002\u0002\u0002\u0500\u04f4",
    "\u0003\u0002\u0002\u0002\u0500\u04fa\u0003\u0002\u0002\u0002\u0501\u0089",
    "\u0003\u0002\u0002\u0002\u0502\u0503\t\u0004\u0002\u0002\u0503\u0504",
    "\u0007\u00e4\u0002\u0002\u0504\u0516\u0007\u0015\u0002\u0002\u0505\u0506",
    "\t\u0004\u0002\u0002\u0506\u0507\u0007\u00e4\u0002\u0002\u0507\u0512",
    "\u0005\u01e6\u00f4\u0002\u0508\u050a\u0007\u00e4\u0002\u0002\u0509\u0508",
    "\u0003\u0002\u0002\u0002\u0509\u050a\u0003\u0002\u0002\u0002\u050a\u050b",
    "\u0003\u0002\u0002\u0002\u050b\u050d\u0007\u0011\u0002\u0002\u050c\u050e",
    "\u0007\u00e4\u0002\u0002\u050d\u050c\u0003\u0002\u0002\u0002\u050d\u050e",
    "\u0003\u0002\u0002\u0002\u050e\u050f\u0003\u0002\u0002\u0002\u050f\u0511",
    "\u0005\u01e6\u00f4\u0002\u0510\u0509\u0003\u0002\u0002\u0002\u0511\u0514",
    "\u0003\u0002\u0002\u0002\u0512\u0510\u0003\u0002\u0002\u0002\u0512\u0513",
    "\u0003\u0002\u0002\u0002\u0513\u0516\u0003\u0002\u0002\u0002\u0514\u0512",
    "\u0003\u0002\u0002\u0002\u0515\u0502\u0003\u0002\u0002\u0002\u0515\u0505",
    "\u0003\u0002\u0002\u0002\u0516\u008b\u0003\u0002\u0002\u0002\u0517\u0518",
    "\t\u0005\u0002\u0002\u0518\u0519\u0007\u00e4\u0002\u0002\u0519\u052b",
    "\u0007\u0015\u0002\u0002\u051a\u051b\t\u0005\u0002\u0002\u051b\u051c",
    "\u0007\u00e4\u0002\u0002\u051c\u0527\u0005\u01e6\u00f4\u0002\u051d\u051f",
    "\u0007\u00e4\u0002\u0002\u051e\u051d\u0003\u0002\u0002\u0002\u051e\u051f",
    "\u0003\u0002\u0002\u0002\u051f\u0520\u0003\u0002\u0002\u0002\u0520\u0522",
    "\u0007\u0011\u0002\u0002\u0521\u0523\u0007\u00e4\u0002\u0002\u0522\u0521",
    "\u0003\u0002\u0002\u0002\u0522\u0523\u0003\u0002\u0002\u0002\u0523\u0524",
    "\u0003\u0002\u0002\u0002\u0524\u0526\u0005\u01e6\u00f4\u0002\u0525\u051e",
    "\u0003\u0002\u0002\u0002\u0526\u0529\u0003\u0002\u0002\u0002\u0527\u0525",
    "\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002\u0528\u052b",
    "\u0003\u0002\u0002\u0002\u0529\u0527\u0003\u0002\u0002\u0002\u052a\u0517",
    "\u0003\u0002\u0002\u0002\u052a\u051a\u0003\u0002\u0002\u0002\u052b\u008d",
    "\u0003\u0002\u0002\u0002\u052c\u0537\u0005\u01e6\u00f4\u0002\u052d\u052f",
    "\u0007\u00e4\u0002\u0002\u052e\u052d\u0003\u0002\u0002\u0002\u052e\u052f",
    "\u0003\u0002\u0002\u0002\u052f\u0530\u0003\u0002\u0002\u0002\u0530\u0532",
    "\u0007\u0011\u0002\u0002\u0531\u0533\u0007\u00e4\u0002\u0002\u0532\u0531",
    "\u0003\u0002\u0002\u0002\u0532\u0533\u0003\u0002\u0002\u0002\u0533\u0534",
    "\u0003\u0002\u0002\u0002\u0534\u0536\u0005\u01e6\u00f4\u0002\u0535\u052e",
    "\u0003\u0002\u0002\u0002\u0536\u0539\u0003\u0002\u0002\u0002\u0537\u0535",
    "\u0003\u0002\u0002\u0002\u0537\u0538\u0003\u0002\u0002\u0002\u0538\u008f",
    "\u0003\u0002\u0002\u0002\u0539\u0537\u0003\u0002\u0002\u0002\u053a\u0545",
    "\u0005\u0092J\u0002\u053b\u053c\u0007Q\u0002\u0002\u053c\u053d\u0007",
    "\u00e4\u0002\u0002\u053d\u053f\u0007\u0010\u0002\u0002\u053e\u0540\u0007",
    "\u00e4\u0002\u0002\u053f\u053e\u0003\u0002\u0002\u0002\u053f\u0540\u0003",
    "\u0002\u0002\u0002\u0540\u0541\u0003\u0002\u0002\u0002\u0541\u0542\u0005",
    "\u009aN\u0002\u0542\u0543\u0007\u0012\u0002\u0002\u0543\u0545\u0003",
    "\u0002\u0002\u0002\u0544\u053a\u0003\u0002\u0002\u0002\u0544\u053b\u0003",
    "\u0002\u0002\u0002\u0545\u0091\u0003\u0002\u0002\u0002\u0546\u0552\u0007",
    "\u00a9\u0002\u0002\u0547\u0548\u0007\u00aa\u0002\u0002\u0548\u0549\u0007",
    "\u00e4\u0002\u0002\u0549\u054b\u0007\u0010\u0002\u0002\u054a\u054c\u0007",
    "\u00e4\u0002\u0002\u054b\u054a\u0003\u0002\u0002\u0002\u054b\u054c\u0003",
    "\u0002\u0002\u0002\u054c\u054d\u0003\u0002\u0002\u0002\u054d\u054e\u0005",
    "\u009aN\u0002\u054e\u054f\u0007\u0012\u0002\u0002\u054f\u0552\u0003",
    "\u0002\u0002\u0002\u0550\u0552\u0007\u00ab\u0002\u0002\u0551\u0546\u0003",
    "\u0002\u0002\u0002\u0551\u0547\u0003\u0002\u0002\u0002\u0551\u0550\u0003",
    "\u0002\u0002\u0002\u0552\u0093\u0003\u0002\u0002\u0002\u0553\u0592\u0007",
    "\u00ac\u0002\u0002\u0554\u0592\u0007f\u0002\u0002\u0555\u0592\u0007",
    "\u0090\u0002\u0002\u0556\u0557\u0007@\u0002\u0002\u0557\u0558\u0007",
    "\u00e4\u0002\u0002\u0558\u0592\t\u0006\u0002\u0002\u0559\u055a\u0007",
    "A\u0002\u0002\u055a\u055b\u0007\u00e4\u0002\u0002\u055b\u0592\t\u0006",
    "\u0002\u0002\u055c\u055d\t\u0006\u0002\u0002\u055d\u055e\u0007\u00e4",
    "\u0002\u0002\u055e\u0592\u0007\u00ae\u0002\u0002\u055f\u0560\u0007@",
    "\u0002\u0002\u0560\u0561\u0007\u00e4\u0002\u0002\u0561\u0592\t\u0007",
    "\u0002\u0002\u0562\u0563\u0007A\u0002\u0002\u0563\u0564\u0007\u00e4",
    "\u0002\u0002\u0564\u0592\t\u0007\u0002\u0002\u0565\u0566\t\u0007\u0002",
    "\u0002\u0566\u0567\u0007\u00e4\u0002\u0002\u0567\u0592\u0007\u00ae\u0002",
    "\u0002\u0568\u0569\u0007@\u0002\u0002\u0569\u056a\u0007\u00e4\u0002",
    "\u0002\u056a\u056b\u0007\u00af\u0002\u0002\u056b\u056e\u0007\u00e4\u0002",
    "\u0002\u056c\u056d\u0007g\u0002\u0002\u056d\u056f\u0007\u00e4\u0002",
    "\u0002\u056e\u056c\u0003\u0002\u0002\u0002\u056e\u056f\u0003\u0002\u0002",
    "\u0002\u056f\u0570\u0003\u0002\u0002\u0002\u0570\u0592\t\b\u0002\u0002",
    "\u0571\u0572\u0007@\u0002\u0002\u0572\u0573\u0007\u00e4\u0002\u0002",
    "\u0573\u0574\u0007\u00af\u0002\u0002\u0574\u0577\u0007\u00e4\u0002\u0002",
    "\u0575\u0576\u0007h\u0002\u0002\u0576\u0578\u0007\u00e4\u0002\u0002",
    "\u0577\u0575\u0003\u0002\u0002\u0002\u0577\u0578\u0003\u0002\u0002\u0002",
    "\u0578\u0579\u0003\u0002\u0002\u0002\u0579\u0592\t\t\u0002\u0002\u057a",
    "\u057b\u0007@\u0002\u0002\u057b\u057c\u0007\u00e4\u0002\u0002\u057c",
    "\u057d\u0007\u00af\u0002\u0002\u057d\u0580\u0007\u00e4\u0002\u0002\u057e",
    "\u057f\u0007\u00b6\u0002\u0002\u057f\u0581\u0007\u00e4\u0002\u0002\u0580",
    "\u057e\u0003\u0002\u0002\u0002\u0580\u0581\u0003\u0002\u0002\u0002\u0581",
    "\u0582\u0003\u0002\u0002\u0002\u0582\u0592\t\n\u0002\u0002\u0583\u0586",
    "\u0007\u00b2\u0002\u0002\u0584\u0585\u0007\u00e4\u0002\u0002\u0585\u0587",
    "\u0007\u00ae\u0002\u0002\u0586\u0584\u0003\u0002\u0002\u0002\u0586\u0587",
    "\u0003\u0002\u0002\u0002\u0587\u0592\u0003\u0002\u0002\u0002\u0588\u058f",
    "\u0007?\u0002\u0002\u0589\u058c\u0007\u00e4\u0002\u0002\u058a\u058b",
    "\u0007\u008a\u0002\u0002\u058b\u058d\u0007\u00e4\u0002\u0002\u058c\u058a",
    "\u0003\u0002\u0002\u0002\u058c\u058d\u0003\u0002\u0002\u0002\u058d\u058e",
    "\u0003\u0002\u0002\u0002\u058e\u0590\u0007\u009f\u0002\u0002\u058f\u0589",
    "\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590\u0592",
    "\u0003\u0002\u0002\u0002\u0591\u0553\u0003\u0002\u0002\u0002\u0591\u0554",
    "\u0003\u0002\u0002\u0002\u0591\u0555\u0003\u0002\u0002\u0002\u0591\u0556",
    "\u0003\u0002\u0002\u0002\u0591\u0559\u0003\u0002\u0002\u0002\u0591\u055c",
    "\u0003\u0002\u0002\u0002\u0591\u055f\u0003\u0002\u0002\u0002\u0591\u0562",
    "\u0003\u0002\u0002\u0002\u0591\u0565\u0003\u0002\u0002\u0002\u0591\u0568",
    "\u0003\u0002\u0002\u0002\u0591\u0571\u0003\u0002\u0002\u0002\u0591\u057a",
    "\u0003\u0002\u0002\u0002\u0591\u0583\u0003\u0002\u0002\u0002\u0591\u0588",
    "\u0003\u0002\u0002\u0002\u0592\u0095\u0003\u0002\u0002\u0002\u0593\u0594",
    "\u0007\u0091\u0002\u0002\u0594\u0595\u0007\u00e4\u0002\u0002\u0595\u05a6",
    "\u0007\u00ae\u0002\u0002\u0596\u0597\u0007@\u0002\u0002\u0597\u0598",
    "\u0007\u00e4\u0002\u0002\u0598\u05a6\u0007\u0091\u0002\u0002\u0599\u059a",
    "\u0007A\u0002\u0002\u059a\u059b\u0007\u00e4\u0002\u0002\u059b\u05a6",
    "\u0007\u0091\u0002\u0002\u059c\u059d\u0007\u00b8\u0002\u0002\u059d\u059e",
    "\u0007\u00e4\u0002\u0002\u059e\u05a6\u0007\u0091\u0002\u0002\u059f\u05a0",
    "\u0007W\u0002\u0002\u05a0\u05a1\u0007\u00e4\u0002\u0002\u05a1\u05a6",
    "\u0007\u0091\u0002\u0002\u05a2\u05a3\u0007\u0087\u0002\u0002\u05a3\u05a4",
    "\u0007\u00e4\u0002\u0002\u05a4\u05a6\u0007\u0091\u0002\u0002\u05a5\u0593",
    "\u0003\u0002\u0002\u0002\u05a5\u0596\u0003\u0002\u0002\u0002\u05a5\u0599",
    "\u0003\u0002\u0002\u0002\u05a5\u059c\u0003\u0002\u0002\u0002\u05a5\u059f",
    "\u0003\u0002\u0002\u0002\u05a5\u05a2\u0003\u0002\u0002\u0002\u05a6\u0097",
    "\u0003\u0002\u0002\u0002\u05a7\u05a8\t\u000b\u0002\u0002\u05a8\u05a9",
    "\u0007\u00e4\u0002\u0002\u05a9\u05ac\u0005\u009aN\u0002\u05aa\u05ab",
    "\u0007\u00e4\u0002\u0002\u05ab\u05ad\u0005\u009cO\u0002\u05ac\u05aa",
    "\u0003\u0002\u0002\u0002\u05ac\u05ad\u0003\u0002\u0002\u0002\u05ad\u05bd",
    "\u0003\u0002\u0002\u0002\u05ae\u05af\t\f\u0002\u0002\u05af\u05b0\u0007",
    "\u00e4\u0002\u0002\u05b0\u05b3\u0005\u009aN\u0002\u05b1\u05b2\u0007",
    "\u00e4\u0002\u0002\u05b2\u05b4\u0005\u009cO\u0002\u05b3\u05b1\u0003",
    "\u0002\u0002\u0002\u05b3\u05b4\u0003\u0002\u0002\u0002\u05b4\u05bd\u0003",
    "\u0002\u0002\u0002\u05b5\u05b6\t\r\u0002\u0002\u05b6\u05b7\u0007\u00e4",
    "\u0002\u0002\u05b7\u05ba\u0005\u009aN\u0002\u05b8\u05b9\u0007\u00e4",
    "\u0002\u0002\u05b9\u05bb\u0005\u009cO\u0002\u05ba\u05b8\u0003\u0002",
    "\u0002\u0002\u05ba\u05bb\u0003\u0002\u0002\u0002\u05bb\u05bd\u0003\u0002",
    "\u0002\u0002\u05bc\u05a7\u0003\u0002\u0002\u0002\u05bc\u05ae\u0003\u0002",
    "\u0002\u0002\u05bc\u05b5\u0003\u0002\u0002\u0002\u05bd\u0099\u0003\u0002",
    "\u0002\u0002\u05be\u05ce\u0007\u0015\u0002\u0002\u05bf\u05ca\u0005\u01e6",
    "\u00f4\u0002\u05c0\u05c2\u0007\u00e4\u0002\u0002\u05c1\u05c0\u0003\u0002",
    "\u0002\u0002\u05c1\u05c2\u0003\u0002\u0002\u0002\u05c2\u05c3\u0003\u0002",
    "\u0002\u0002\u05c3\u05c5\u0007\u0011\u0002\u0002\u05c4\u05c6\u0007\u00e4",
    "\u0002\u0002\u05c5\u05c4\u0003\u0002\u0002\u0002\u05c5\u05c6\u0003\u0002",
    "\u0002\u0002\u05c6\u05c7\u0003\u0002\u0002\u0002\u05c7\u05c9\u0005\u01e6",
    "\u00f4\u0002\u05c8\u05c1\u0003\u0002\u0002\u0002\u05c9\u05cc\u0003\u0002",
    "\u0002\u0002\u05ca\u05c8\u0003\u0002\u0002\u0002\u05ca\u05cb\u0003\u0002",
    "\u0002\u0002\u05cb\u05ce\u0003\u0002\u0002\u0002\u05cc\u05ca\u0003\u0002",
    "\u0002\u0002\u05cd\u05be\u0003\u0002\u0002\u0002\u05cd\u05bf\u0003\u0002",
    "\u0002\u0002\u05ce\u009b\u0003\u0002\u0002\u0002\u05cf\u05d1\u0007\u0016",
    "\u0002\u0002\u05d0\u05d2\u0007\u00e4\u0002\u0002\u05d1\u05d0\u0003\u0002",
    "\u0002\u0002\u05d1\u05d2\u0003\u0002\u0002\u0002\u05d2\u05d3\u0003\u0002",
    "\u0002\u0002\u05d3\u05d5\u0007\u0015\u0002\u0002\u05d4\u05d6\u0007\u00e4",
    "\u0002\u0002\u05d5\u05d4\u0003\u0002\u0002\u0002\u05d5\u05d6\u0003\u0002",
    "\u0002\u0002\u05d6\u05d7\u0003\u0002\u0002\u0002\u05d7\u05d8\u0007\u0017",
    "\u0002\u0002\u05d8\u009d\u0003\u0002\u0002\u0002\u05d9\u05da\u0007\u0087",
    "\u0002\u0002\u05da\u05dd\u0007\u00e4\u0002\u0002\u05db\u05dc\u0007\u0088",
    "\u0002\u0002\u05dc\u05de\u0007\u00e4\u0002\u0002\u05dd\u05db\u0003\u0002",
    "\u0002\u0002\u05dd\u05de\u0003\u0002\u0002\u0002\u05de\u05df\u0003\u0002",
    "\u0002\u0002\u05df\u05e4\u0007\u008a\u0002\u0002\u05e0\u05e1\u0007\u0087",
    "\u0002\u0002\u05e1\u05e2\u0007\u00e4\u0002\u0002\u05e2\u05e4\u0007\u008b",
    "\u0002\u0002\u05e3\u05d9\u0003\u0002\u0002\u0002\u05e3\u05e0\u0003\u0002",
    "\u0002\u0002\u05e4\u009f\u0003\u0002\u0002\u0002\u05e5\u05e6\u0007@",
    "\u0002\u0002\u05e6\u05e7\u0007\u00e4\u0002\u0002\u05e7\u05e8\u0007\u008a",
    "\u0002\u0002\u05e8\u05e9\u0007\u00e4\u0002\u0002\u05e9\u05ec\u0005\u01e6",
    "\u00f4\u0002\u05ea\u05eb\u0007\u00e4\u0002\u0002\u05eb\u05ed\u0005\u00a8",
    "U\u0002\u05ec\u05ea\u0003\u0002\u0002\u0002\u05ec\u05ed\u0003\u0002",
    "\u0002\u0002\u05ed\u05f9\u0003\u0002\u0002\u0002\u05ee\u05ef\u0007@",
    "\u0002\u0002\u05ef\u05f3\u0007\u00e4\u0002\u0002\u05f0\u05f1\u0005\u00ac",
    "W\u0002\u05f1\u05f2\u0007\u00e4\u0002\u0002\u05f2\u05f4\u0003\u0002",
    "\u0002\u0002\u05f3\u05f0\u0003\u0002\u0002\u0002\u05f3\u05f4\u0003\u0002",
    "\u0002\u0002\u05f4\u05f5\u0003\u0002\u0002\u0002\u05f5\u05f6\u0007\u008a",
    "\u0002\u0002\u05f6\u05f7\u0007\u00e4\u0002\u0002\u05f7\u05f9\u0005\u01e6",
    "\u00f4\u0002\u05f8\u05e5\u0003\u0002\u0002\u0002\u05f8\u05ee\u0003\u0002",
    "\u0002\u0002\u05f9\u00a1\u0003\u0002\u0002\u0002\u05fa\u05fb\u0007A",
    "\u0002\u0002\u05fb\u05fc\u0007\u00e4\u0002\u0002\u05fc\u05fd\u0007\u008a",
    "\u0002\u0002\u05fd\u05fe\u0007\u00e4\u0002\u0002\u05fe\u0601\u0005\u01e6",
    "\u00f4\u0002\u05ff\u0600\u0007\u00e4\u0002\u0002\u0600\u0602\u0005\u00aa",
    "V\u0002\u0601\u05ff\u0003\u0002\u0002\u0002\u0601\u0602\u0003\u0002",
    "\u0002\u0002\u0602\u00a3\u0003\u0002\u0002\u0002\u0603\u0604\u0007f",
    "\u0002\u0002\u0604\u0605\u0007\u00e4\u0002\u0002\u0605\u0606\u0007\u008a",
    "\u0002\u0002\u0606\u0607\u0007\u00e4\u0002\u0002\u0607\u0608\u0005\u01e6",
    "\u00f4\u0002\u0608\u00a5\u0003\u0002\u0002\u0002\u0609\u060a\u0007\u0090",
    "\u0002\u0002\u060a\u060b\u0007\u00e4\u0002\u0002\u060b\u060c\u0007\u008a",
    "\u0002\u0002\u060c\u060d\u0007\u00e4\u0002\u0002\u060d\u060e\u0005\u01e6",
    "\u00f4\u0002\u060e\u00a7\u0003\u0002\u0002\u0002\u060f\u0610\u0007\u008f",
    "\u0002\u0002\u0610\u0611\u0007\u00e4\u0002\u0002\u0611\u0612\u0007p",
    "\u0002\u0002\u0612\u0613\u0007\u00e4\u0002\u0002\u0613\u0614\u0007H",
    "\u0002\u0002\u0614\u00a9\u0003\u0002\u0002\u0002\u0615\u0616\u0007\u008f",
    "\u0002\u0002\u0616\u0617\u0007\u00e4\u0002\u0002\u0617\u0618\u0007H",
    "\u0002\u0002\u0618\u00ab\u0003\u0002\u0002\u0002\u0619\u061a\u0007m",
    "\u0002\u0002\u061a\u061b\u0007\u00e4\u0002\u0002\u061b\u061c\u0007\u008e",
    "\u0002\u0002\u061c\u00ad\u0003\u0002\u0002\u0002\u061d\u061e\u0007T",
    "\u0002\u0002\u061e\u061f\u0007\u00e4\u0002\u0002\u061f\u0620\u0007\u0096",
    "\u0002\u0002\u0620\u0623\u0007\u00e4\u0002\u0002\u0621\u0624\u0005&",
    "\u0014\u0002\u0622\u0624\u0005\u01ca\u00e6\u0002\u0623\u0621\u0003\u0002",
    "\u0002\u0002\u0623\u0622\u0003\u0002\u0002\u0002\u0624\u0627\u0003\u0002",
    "\u0002\u0002\u0625\u0626\u0007\u00e4\u0002\u0002\u0626\u0628\u0005\u00b0",
    "Y\u0002\u0627\u0625\u0003\u0002\u0002\u0002\u0627\u0628\u0003\u0002",
    "\u0002\u0002\u0628\u062f\u0003\u0002\u0002\u0002\u0629\u062a\u0007T",
    "\u0002\u0002\u062a\u062b\u0007\u00e4\u0002\u0002\u062b\u062c\u0007\u0096",
    "\u0002\u0002\u062c\u062d\u0007\u00e4\u0002\u0002\u062d\u062f\u0005\u00b0",
    "Y\u0002\u062e\u061d\u0003\u0002\u0002\u0002\u062e\u0629\u0003\u0002",
    "\u0002\u0002\u062f\u00af\u0003\u0002\u0002\u0002\u0630\u0631\u0007\u0097",
    "\u0002\u0002\u0631\u0634\u0007\u00e4\u0002\u0002\u0632\u0633\u0007p",
    "\u0002\u0002\u0633\u0635\u0007\u00e4\u0002\u0002\u0634\u0632\u0003\u0002",
    "\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002\u0635\u0636\u0003\u0002",
    "\u0002\u0002\u0636\u0637\u0007\u0098\u0002\u0002\u0637\u00b1\u0003\u0002",
    "\u0002\u0002\u0638\u0639\u0007T\u0002\u0002\u0639\u063a\u0007\u00e4",
    "\u0002\u0002\u063a\u063b\u0007\u0099\u0002\u0002\u063b\u063c\u0007\u00e4",
    "\u0002\u0002\u063c\u063d\u0005\u00b4[\u0002\u063d\u00b3\u0003\u0002",
    "\u0002\u0002\u063e\u063f\t\u000e\u0002\u0002\u063f\u00b5\u0003\u0002",
    "\u0002\u0002\u0640\u0641\u0007@\u0002\u0002\u0641\u0642\u0007\u00e4",
    "\u0002\u0002\u0642\u0643\u0005\u00ccg\u0002\u0643\u00b7\u0003\u0002",
    "\u0002\u0002\u0644\u0645\u0007@\u0002\u0002\u0645\u0646\u0007\u00e4",
    "\u0002\u0002\u0646\u0647\u0005\u00ceh\u0002\u0647\u00b9\u0003\u0002",
    "\u0002\u0002\u0648\u0649\u0007@\u0002\u0002\u0649\u064a\u0007\u00e4",
    "\u0002\u0002\u064a\u064b\u0005\u00d0i\u0002\u064b\u00bb\u0003\u0002",
    "\u0002\u0002\u064c\u064d\u0007@\u0002\u0002\u064d\u064e\u0007\u00e4",
    "\u0002\u0002\u064e\u064f\u0005\u00d2j\u0002\u064f\u00bd\u0003\u0002",
    "\u0002\u0002\u0650\u0651\u0007@\u0002\u0002\u0651\u0652\u0007\u00e4",
    "\u0002\u0002\u0652\u0653\u0005\u00caf\u0002\u0653\u00bf\u0003\u0002",
    "\u0002\u0002\u0654\u0655\u0007A\u0002\u0002\u0655\u0656\u0007\u00e4",
    "\u0002\u0002\u0656\u0657\u0005\u00ccg\u0002\u0657\u00c1\u0003\u0002",
    "\u0002\u0002\u0658\u0659\u0007A\u0002\u0002\u0659\u065a\u0007\u00e4",
    "\u0002\u0002\u065a\u065b\u0005\u00ceh\u0002\u065b\u00c3\u0003\u0002",
    "\u0002\u0002\u065c\u065d\u0007A\u0002\u0002\u065d\u065e\u0007\u00e4",
    "\u0002\u0002\u065e\u065f\u0005\u00d0i\u0002\u065f\u00c5\u0003\u0002",
    "\u0002\u0002\u0660\u0661\u0007A\u0002\u0002\u0661\u0662\u0007\u00e4",
    "\u0002\u0002\u0662\u0663\u0005\u00d2j\u0002\u0663\u00c7\u0003\u0002",
    "\u0002\u0002\u0664\u0665\u0007A\u0002\u0002\u0665\u0666\u0007\u00e4",
    "\u0002\u0002\u0666\u0667\u0005\u00caf\u0002\u0667\u00c9\u0003\u0002",
    "\u0002\u0002\u0668\u0669\u0007B\u0002\u0002\u0669\u066a\u0007\u00e4",
    "\u0002\u0002\u066a\u066c\u0007C\u0002\u0002\u066b\u066d\u0007\u00e4",
    "\u0002\u0002\u066c\u066b\u0003\u0002\u0002\u0002\u066c\u066d\u0003\u0002",
    "\u0002\u0002\u066d\u066e\u0003\u0002\u0002\u0002\u066e\u0670\u0005\u014c",
    "\u00a7\u0002\u066f\u0671\u0007\u00e4\u0002\u0002\u0670\u066f\u0003\u0002",
    "\u0002\u0002\u0670\u0671\u0003\u0002\u0002\u0002\u0671\u0672\u0003\u0002",
    "\u0002\u0002\u0672\u0674\u0007\u0016\u0002\u0002\u0673\u0675\u0007\u00e4",
    "\u0002\u0002\u0674\u0673\u0003\u0002\u0002\u0002\u0674\u0675\u0003\u0002",
    "\u0002\u0002\u0675\u0676\u0003\u0002\u0002\u0002\u0676\u0678\u0005\u01d6",
    "\u00ec\u0002\u0677\u0679\u0007\u00e4\u0002\u0002\u0678\u0677\u0003\u0002",
    "\u0002\u0002\u0678\u0679\u0003\u0002\u0002\u0002\u0679\u067a\u0003\u0002",
    "\u0002\u0002\u067a\u067b\u0007\u0017\u0002\u0002\u067b\u00cb\u0003\u0002",
    "\u0002\u0002\u067c\u067d\u0007D\u0002\u0002\u067d\u067e\u0007\u00e4",
    "\u0002\u0002\u067e\u0680\u0007C\u0002\u0002\u067f\u0681\u0007\u00e4",
    "\u0002\u0002\u0680\u067f\u0003\u0002\u0002\u0002\u0680\u0681\u0003\u0002",
    "\u0002\u0002\u0681\u0682\u0003\u0002\u0002\u0002\u0682\u0684\u0007\u0016",
    "\u0002\u0002\u0683\u0685\u0007\u00e4\u0002\u0002\u0684\u0683\u0003\u0002",
    "\u0002\u0002\u0684\u0685\u0003\u0002\u0002\u0002\u0685\u0686\u0003\u0002",
    "\u0002\u0002\u0686\u0687\u0005\u01b8\u00dd\u0002\u0687\u0689\u0005\u014c",
    "\u00a7\u0002\u0688\u068a\u0007\u00e4\u0002\u0002\u0689\u0688\u0003\u0002",
    "\u0002\u0002\u0689\u068a\u0003\u0002\u0002\u0002\u068a\u068b\u0003\u0002",
    "\u0002\u0002\u068b\u068d\u0007\u0017\u0002\u0002\u068c\u068e\u0007\u00e4",
    "\u0002\u0002\u068d\u068c\u0003\u0002\u0002\u0002\u068d\u068e\u0003\u0002",
    "\u0002\u0002\u068e\u068f\u0003\u0002\u0002\u0002\u068f\u0690\u0007E",
    "\u0002\u0002\u0690\u0691\u0007\u00e4\u0002\u0002\u0691\u0692\u0005\u01d4",
    "\u00eb\u0002\u0692\u0693\u0007\u00e4\u0002\u0002\u0693\u0694\u0007F",
    "\u0002\u0002\u0694\u0695\u0007\u00e4\u0002\u0002\u0695\u0696\u0007G",
    "\u0002\u0002\u0696\u00cd\u0003\u0002\u0002\u0002\u0697\u0698\u0007D",
    "\u0002\u0002\u0698\u0699\u0007\u00e4\u0002\u0002\u0699\u069b\u0007C",
    "\u0002\u0002\u069a\u069c\u0007\u00e4\u0002\u0002\u069b\u069a\u0003\u0002",
    "\u0002\u0002\u069b\u069c\u0003\u0002\u0002\u0002\u069c\u069d\u0003\u0002",
    "\u0002\u0002\u069d\u069f\u0007\u0016\u0002\u0002\u069e\u06a0\u0007\u00e4",
    "\u0002\u0002\u069f\u069e\u0003\u0002\u0002\u0002\u069f\u06a0\u0003\u0002",
    "\u0002\u0002\u06a0\u06a1\u0003\u0002\u0002\u0002\u06a1\u06a2\u0005\u01b8",
    "\u00dd\u0002\u06a2\u06a4\u0005\u014c\u00a7\u0002\u06a3\u06a5\u0007\u00e4",
    "\u0002\u0002\u06a4\u06a3\u0003\u0002\u0002\u0002\u06a4\u06a5\u0003\u0002",
    "\u0002\u0002\u06a5\u06a6\u0003\u0002\u0002\u0002\u06a6\u06a8\u0007\u0017",
    "\u0002\u0002\u06a7\u06a9\u0007\u00e4\u0002\u0002\u06a8\u06a7\u0003\u0002",
    "\u0002\u0002\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9\u06aa\u0003\u0002",
    "\u0002\u0002\u06aa\u06ab\u0007E\u0002\u0002\u06ab\u06ac\u0007\u00e4",
    "\u0002\u0002\u06ac\u06ae\u0007\u0016\u0002\u0002\u06ad\u06af\u0007\u00e4",
    "\u0002\u0002\u06ae\u06ad\u0003\u0002\u0002\u0002\u06ae\u06af\u0003\u0002",
    "\u0002\u0002\u06af\u06b0\u0003\u0002\u0002\u0002\u06b0\u06b2\u0005\u01d2",
    "\u00ea\u0002\u06b1\u06b3\u0007\u00e4\u0002\u0002\u06b2\u06b1\u0003\u0002",
    "\u0002\u0002\u06b2\u06b3\u0003\u0002\u0002\u0002\u06b3\u06b4\u0003\u0002",
    "\u0002\u0002\u06b4\u06b5\u0007\u0017\u0002\u0002\u06b5\u06b6\u0007\u00e4",
    "\u0002\u0002\u06b6\u06b7\u0007F\u0002\u0002\u06b7\u06b8\u0007\u00e4",
    "\u0002\u0002\u06b8\u06b9\u0007g\u0002\u0002\u06b9\u06ba\u0007\u00e4",
    "\u0002\u0002\u06ba\u06bb\u0007\u0085\u0002\u0002\u06bb\u00cf\u0003\u0002",
    "\u0002\u0002\u06bc\u06bd\u0007D\u0002\u0002\u06bd\u06be\u0007\u00e4",
    "\u0002\u0002\u06be\u06c0\u0007C\u0002\u0002\u06bf\u06c1\u0007\u00e4",
    "\u0002\u0002\u06c0\u06bf\u0003\u0002\u0002\u0002\u06c0\u06c1\u0003\u0002",
    "\u0002\u0002\u06c1\u06c2\u0003\u0002\u0002\u0002\u06c2\u06c3\u0007\u0016",
    "\u0002\u0002\u06c3\u06c4\u0005\u01b8\u00dd\u0002\u06c4\u06c5\u0005\u014c",
    "\u00a7\u0002\u06c5\u06c7\u0007\u0017\u0002\u0002\u06c6\u06c8\u0007\u00e4",
    "\u0002\u0002\u06c7\u06c6\u0003\u0002\u0002\u0002\u06c7\u06c8\u0003\u0002",
    "\u0002\u0002\u06c8\u06c9\u0003\u0002\u0002\u0002\u06c9\u06ca\u0007E",
    "\u0002\u0002\u06ca\u06cb\u0007\u00e4\u0002\u0002\u06cb\u06cd\u0007H",
    "\u0002\u0002\u06cc\u06ce\u0007\u00e4\u0002\u0002\u06cd\u06cc\u0003\u0002",
    "\u0002\u0002\u06cd\u06ce\u0003\u0002\u0002\u0002\u06ce\u06cf\u0003\u0002",
    "\u0002\u0002\u06cf\u06d0\u0007\u0016\u0002\u0002\u06d0\u06d1\u0005\u01d4",
    "\u00eb\u0002\u06d1\u06d2\u0007\u0017\u0002\u0002\u06d2\u00d1\u0003\u0002",
    "\u0002\u0002\u06d3\u06d4\u0007D\u0002\u0002\u06d4\u06d5\u0007\u00e4",
    "\u0002\u0002\u06d5\u06d7\u0007C\u0002\u0002\u06d6\u06d8\u0007\u00e4",
    "\u0002\u0002\u06d7\u06d6\u0003\u0002\u0002\u0002\u06d7\u06d8\u0003\u0002",
    "\u0002\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u06db\u0005\u00d4",
    "k\u0002\u06da\u06dc\u0007\u00e4\u0002\u0002\u06db\u06da\u0003\u0002",
    "\u0002\u0002\u06db\u06dc\u0003\u0002\u0002\u0002\u06dc\u06dd\u0003\u0002",
    "\u0002\u0002\u06dd\u06de\u0007E\u0002\u0002\u06de\u06df\u0007\u00e4",
    "\u0002\u0002\u06df\u06e1\u0007H\u0002\u0002\u06e0\u06e2\u0007\u00e4",
    "\u0002\u0002\u06e1\u06e0\u0003\u0002\u0002\u0002\u06e1\u06e2\u0003\u0002",
    "\u0002\u0002\u06e2\u06e3\u0003\u0002\u0002\u0002\u06e3\u06e4\u0007\u0016",
    "\u0002\u0002\u06e4\u06e5\u0005\u01d4\u00eb\u0002\u06e5\u06e6\u0007\u0017",
    "\u0002\u0002\u06e6\u00d3\u0003\u0002\u0002\u0002\u06e7\u06e9\u0007\u0016",
    "\u0002\u0002\u06e8\u06ea\u0007\u00e4\u0002\u0002\u06e9\u06e8\u0003\u0002",
    "\u0002\u0002\u06e9\u06ea\u0003\u0002\u0002\u0002\u06ea\u06eb\u0003\u0002",
    "\u0002\u0002\u06eb\u06ec\u0007\u0017\u0002\u0002\u06ec\u06ed\u0005\u01e4",
    "\u00f3\u0002\u06ed\u06ee\u0007\u0013\u0002\u0002\u06ee\u06ef\u0005\u01b8",
    "\u00dd\u0002\u06ef\u06f0\u0005\u0142\u00a2\u0002\u06f0\u06f1\u0007\u0014",
    "\u0002\u0002\u06f1\u06f2\u0005\u01e4\u00f3\u0002\u06f2\u06f4\u0007\u0016",
    "\u0002\u0002\u06f3\u06f5\u0007\u00e4\u0002\u0002\u06f4\u06f3\u0003\u0002",
    "\u0002\u0002\u06f4\u06f5\u0003\u0002\u0002\u0002\u06f5\u06f6\u0003\u0002",
    "\u0002\u0002\u06f6\u06f7\u0007\u0017\u0002\u0002\u06f7\u071d\u0003\u0002",
    "\u0002\u0002\u06f8\u06fa\u0007\u0016\u0002\u0002\u06f9\u06fb\u0007\u00e4",
    "\u0002\u0002\u06fa\u06f9\u0003\u0002\u0002\u0002\u06fa\u06fb\u0003\u0002",
    "\u0002\u0002\u06fb\u06fc\u0003\u0002\u0002\u0002\u06fc\u06fd\u0007\u0017",
    "\u0002\u0002\u06fd\u06fe\u0005\u01e4\u00f3\u0002\u06fe\u06ff\u0007\u0013",
    "\u0002\u0002\u06ff\u0700\u0005\u01b8\u00dd\u0002\u0700\u0701\u0005\u0142",
    "\u00a2\u0002\u0701\u0702\u0007\u0014\u0002\u0002\u0702\u0703\u0005\u01e4",
    "\u00f3\u0002\u0703\u0704\u0005\u01e2\u00f2\u0002\u0704\u0706\u0007\u0016",
    "\u0002\u0002\u0705\u0707\u0007\u00e4\u0002\u0002\u0706\u0705\u0003\u0002",
    "\u0002\u0002\u0706\u0707\u0003\u0002\u0002\u0002\u0707\u0708\u0003\u0002",
    "\u0002\u0002\u0708\u0709\u0007\u0017\u0002\u0002\u0709\u071d\u0003\u0002",
    "\u0002\u0002\u070a\u070c\u0007\u0016\u0002\u0002\u070b\u070d\u0007\u00e4",
    "\u0002\u0002\u070c\u070b\u0003\u0002\u0002\u0002\u070c\u070d\u0003\u0002",
    "\u0002\u0002\u070d\u070e\u0003\u0002\u0002\u0002\u070e\u070f\u0007\u0017",
    "\u0002\u0002\u070f\u0710\u0005\u01e0\u00f1\u0002\u0710\u0711\u0005\u01e4",
    "\u00f3\u0002\u0711\u0712\u0007\u0013\u0002\u0002\u0712\u0713\u0005\u01b8",
    "\u00dd\u0002\u0713\u0714\u0005\u0142\u00a2\u0002\u0714\u0715\u0007\u0014",
    "\u0002\u0002\u0715\u0716\u0005\u01e4\u00f3\u0002\u0716\u0718\u0007\u0016",
    "\u0002\u0002\u0717\u0719\u0007\u00e4\u0002\u0002\u0718\u0717\u0003\u0002",
    "\u0002\u0002\u0718\u0719\u0003\u0002\u0002\u0002\u0719\u071a\u0003\u0002",
    "\u0002\u0002\u071a\u071b\u0007\u0017\u0002\u0002\u071b\u071d\u0003\u0002",
    "\u0002\u0002\u071c\u06e7\u0003\u0002\u0002\u0002\u071c\u06f8\u0003\u0002",
    "\u0002\u0002\u071c\u070a\u0003\u0002\u0002\u0002\u071d\u00d5\u0003\u0002",
    "\u0002\u0002\u071e\u071f\u0007I\u0002\u0002\u071f\u0720\u0007\u00e4",
    "\u0002\u0002\u0720\u0721\u0007J\u0002\u0002\u0721\u0726\u0007\u00e4",
    "\u0002\u0002\u0722\u0723\u0007K\u0002\u0002\u0723\u0724\u0007\u00e4",
    "\u0002\u0002\u0724\u0725\u0007L\u0002\u0002\u0725\u0727\u0007\u00e4",
    "\u0002\u0002\u0726\u0722\u0003\u0002\u0002\u0002\u0726\u0727\u0003\u0002",
    "\u0002\u0002\u0727\u0728\u0003\u0002\u0002\u0002\u0728\u0729\u0007M",
    "\u0002\u0002\u0729\u072a\u0007\u00e4\u0002\u0002\u072a\u072b\u0005\u0154",
    "\u00ab\u0002\u072b\u072c\u0007\u00e4\u0002\u0002\u072c\u072d\u0007N",
    "\u0002\u0002\u072d\u072e\u0007\u00e4\u0002\u0002\u072e\u072f\u0005\u01b8",
    "\u00dd\u0002\u072f\u0733\u0007\u00e4\u0002\u0002\u0730\u0731\u0007O",
    "\u0002\u0002\u0731\u0732\u0007\u00e4\u0002\u0002\u0732\u0734\u0007\u00d1",
    "\u0002\u0002\u0733\u0730\u0003\u0002\u0002\u0002\u0733\u0734\u0003\u0002",
    "\u0002\u0002\u0734\u00d7\u0003\u0002\u0002\u0002\u0735\u0736\u0007P",
    "\u0002\u0002\u0736\u0738\u0007\u00e4\u0002\u0002\u0737\u0735\u0003\u0002",
    "\u0002\u0002\u0737\u0738\u0003\u0002\u0002\u0002\u0738\u0739\u0003\u0002",
    "\u0002\u0002\u0739\u073b\u0007Q\u0002\u0002\u073a\u073c\u0007\u00e4",
    "\u0002\u0002\u073b\u073a\u0003\u0002\u0002\u0002\u073b\u073c\u0003\u0002",
    "\u0002\u0002\u073c\u073d\u0003\u0002\u0002\u0002\u073d\u0741\u0005\u012c",
    "\u0097\u0002\u073e\u0740\u0005\u0116\u008c\u0002\u073f\u073e\u0003\u0002",
    "\u0002\u0002\u0740\u0743\u0003\u0002\u0002\u0002\u0741\u073f\u0003\u0002",
    "\u0002\u0002\u0741\u0742\u0003\u0002\u0002\u0002\u0742\u0748\u0003\u0002",
    "\u0002\u0002\u0743\u0741\u0003\u0002\u0002\u0002\u0744\u0746\u0007\u00e4",
    "\u0002\u0002\u0745\u0744\u0003\u0002\u0002\u0002\u0745\u0746\u0003\u0002",
    "\u0002\u0002\u0746\u0747\u0003\u0002\u0002\u0002\u0747\u0749\u0005\u012a",
    "\u0096\u0002\u0748\u0745\u0003\u0002\u0002\u0002\u0748\u0749\u0003\u0002",
    "\u0002\u0002\u0749\u00d9\u0003\u0002\u0002\u0002\u074a\u074c\u0007R",
    "\u0002\u0002\u074b\u074d\u0007\u00e4\u0002\u0002\u074c\u074b\u0003\u0002",
    "\u0002\u0002\u074c\u074d\u0003\u0002\u0002\u0002\u074d\u074e\u0003\u0002",
    "\u0002\u0002\u074e\u074f\u0005\u0154\u00ab\u0002\u074f\u0750\u0007\u00e4",
    "\u0002\u0002\u0750\u0751\u0007N\u0002\u0002\u0751\u0752\u0007\u00e4",
    "\u0002\u0002\u0752\u0753\u0005\u01b8\u00dd\u0002\u0753\u00db\u0003\u0002",
    "\u0002\u0002\u0754\u0756\u0007S\u0002\u0002\u0755\u0757\u0007\u00e4",
    "\u0002\u0002\u0756\u0755\u0003\u0002\u0002\u0002\u0756\u0757\u0003\u0002",
    "\u0002\u0002\u0757\u0758\u0003\u0002\u0002\u0002\u0758\u075d\u0005\u012e",
    "\u0098\u0002\u0759\u075a\u0007\u00e4\u0002\u0002\u075a\u075c\u0005\u00de",
    "p\u0002\u075b\u0759\u0003\u0002\u0002\u0002\u075c\u075f\u0003\u0002",
    "\u0002\u0002\u075d\u075b\u0003\u0002\u0002\u0002\u075d\u075e\u0003\u0002",
    "\u0002\u0002\u075e\u00dd\u0003\u0002\u0002\u0002\u075f\u075d\u0003\u0002",
    "\u0002\u0002\u0760\u0761\u0007C\u0002\u0002\u0761\u0762\u0007\u00e4",
    "\u0002\u0002\u0762\u0763\u0007Q\u0002\u0002\u0763\u0764\u0007\u00e4",
    "\u0002\u0002\u0764\u076b\u0005\u00e4s\u0002\u0765\u0766\u0007C\u0002",
    "\u0002\u0766\u0767\u0007\u00e4\u0002\u0002\u0767\u0768\u0007@\u0002",
    "\u0002\u0768\u0769\u0007\u00e4\u0002\u0002\u0769\u076b\u0005\u00e4s",
    "\u0002\u076a\u0760\u0003\u0002\u0002\u0002\u076a\u0765\u0003\u0002\u0002",
    "\u0002\u076b\u00df\u0003\u0002\u0002\u0002\u076c\u076e\u0007@\u0002",
    "\u0002\u076d\u076f\u0007\u00e4\u0002\u0002\u076e\u076d\u0003\u0002\u0002",
    "\u0002\u076e\u076f\u0003\u0002\u0002\u0002\u076f\u0770\u0003\u0002\u0002",
    "\u0002\u0770\u0771\u0005\u012c\u0097\u0002\u0771\u00e1\u0003\u0002\u0002",
    "\u0002\u0772\u0773\u0007@\u0002\u0002\u0773\u0774\u0007\u00e4\u0002",
    "\u0002\u0774\u0776\u0007G\u0002\u0002\u0775\u0777\u0007\u00e4\u0002",
    "\u0002\u0776\u0775\u0003\u0002\u0002\u0002\u0776\u0777\u0003\u0002\u0002",
    "\u0002\u0777\u0778\u0003\u0002\u0002\u0002\u0778\u0779\u0005\u012c\u0097",
    "\u0002\u0779\u00e3\u0003\u0002\u0002\u0002\u077a\u077c\u0007T\u0002",
    "\u0002\u077b\u077d\u0007\u00e4\u0002\u0002\u077c\u077b\u0003\u0002\u0002",
    "\u0002\u077c\u077d\u0003\u0002\u0002\u0002\u077d\u077e\u0003\u0002\u0002",
    "\u0002\u077e\u0789\u0005\u00e6t\u0002\u077f\u0781\u0007\u00e4\u0002",
    "\u0002\u0780\u077f\u0003\u0002\u0002\u0002\u0780\u0781\u0003\u0002\u0002",
    "\u0002\u0781\u0782\u0003\u0002\u0002\u0002\u0782\u0784\u0007\u0011\u0002",
    "\u0002\u0783\u0785\u0007\u00e4\u0002\u0002\u0784\u0783\u0003\u0002\u0002",
    "\u0002\u0784\u0785\u0003\u0002\u0002\u0002\u0785\u0786\u0003\u0002\u0002",
    "\u0002\u0786\u0788\u0005\u00e6t\u0002\u0787\u0780\u0003\u0002\u0002",
    "\u0002\u0788\u078b\u0003\u0002\u0002\u0002\u0789\u0787\u0003\u0002\u0002",
    "\u0002\u0789\u078a\u0003\u0002\u0002\u0002\u078a\u00e5\u0003\u0002\u0002",
    "\u0002\u078b\u0789\u0003\u0002\u0002\u0002\u078c\u078e\u0005\u01d4\u00eb",
    "\u0002\u078d\u078f\u0007\u00e4\u0002\u0002\u078e\u078d\u0003\u0002\u0002",
    "\u0002\u078e\u078f\u0003\u0002\u0002\u0002\u078f\u0790\u0003\u0002\u0002",
    "\u0002\u0790\u0792\u0007\u000e\u0002\u0002\u0791\u0793\u0007\u00e4\u0002",
    "\u0002\u0792\u0791\u0003\u0002\u0002\u0002\u0792\u0793\u0003\u0002\u0002",
    "\u0002\u0793\u0794\u0003\u0002\u0002\u0002\u0794\u0795\u0005\u0154\u00ab",
    "\u0002\u0795\u07b1\u0003\u0002\u0002\u0002\u0796\u0798\u0005\u01b8\u00dd",
    "\u0002\u0797\u0799\u0007\u00e4\u0002\u0002\u0798\u0797\u0003\u0002\u0002",
    "\u0002\u0798\u0799\u0003\u0002\u0002\u0002\u0799\u079a\u0003\u0002\u0002",
    "\u0002\u079a\u079c\u0007\u000e\u0002\u0002\u079b\u079d\u0007\u00e4\u0002",
    "\u0002\u079c\u079b\u0003\u0002\u0002\u0002\u079c\u079d\u0003\u0002\u0002",
    "\u0002\u079d\u079e\u0003\u0002\u0002\u0002\u079e\u079f\u0005\u0154\u00ab",
    "\u0002\u079f\u07b1\u0003\u0002\u0002\u0002\u07a0\u07a2\u0005\u01b8\u00dd",
    "\u0002\u07a1\u07a3\u0007\u00e4\u0002\u0002\u07a2\u07a1\u0003\u0002\u0002",
    "\u0002\u07a2\u07a3\u0003\u0002\u0002\u0002\u07a3\u07a4\u0003\u0002\u0002",
    "\u0002\u07a4\u07a6\u0007\u0018\u0002\u0002\u07a5\u07a7\u0007\u00e4\u0002",
    "\u0002\u07a6\u07a5\u0003\u0002\u0002\u0002\u07a6\u07a7\u0003\u0002\u0002",
    "\u0002\u07a7\u07a8\u0003\u0002\u0002\u0002\u07a8\u07a9\u0005\u0154\u00ab",
    "\u0002\u07a9\u07b1\u0003\u0002\u0002\u0002\u07aa\u07ac\u0005\u01b8\u00dd",
    "\u0002\u07ab\u07ad\u0007\u00e4\u0002\u0002\u07ac\u07ab\u0003\u0002\u0002",
    "\u0002\u07ac\u07ad\u0003\u0002\u0002\u0002\u07ad\u07ae\u0003\u0002\u0002",
    "\u0002\u07ae\u07af\u0005\u014a\u00a6\u0002\u07af\u07b1\u0003\u0002\u0002",
    "\u0002\u07b0\u078c\u0003\u0002\u0002\u0002\u07b0\u0796\u0003\u0002\u0002",
    "\u0002\u07b0\u07a0\u0003\u0002\u0002\u0002\u07b0\u07aa\u0003\u0002\u0002",
    "\u0002\u07b1\u00e7\u0003\u0002\u0002\u0002\u07b2\u07b3\u0007U\u0002",
    "\u0002\u07b3\u07b5\u0007\u00e4\u0002\u0002\u07b4\u07b2\u0003\u0002\u0002",
    "\u0002\u07b4\u07b5\u0003\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002\u0002",
    "\u0002\u07b6\u07b8\u0007V\u0002\u0002\u07b7\u07b9\u0007\u00e4\u0002",
    "\u0002\u07b8\u07b7\u0003\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002\u0002",
    "\u0002\u07b9\u07ba\u0003\u0002\u0002\u0002\u07ba\u07c5\u0005\u0154\u00ab",
    "\u0002\u07bb\u07bd\u0007\u00e4\u0002\u0002\u07bc\u07bb\u0003\u0002\u0002",
    "\u0002\u07bc\u07bd\u0003\u0002\u0002\u0002\u07bd\u07be\u0003\u0002\u0002",
    "\u0002\u07be\u07c0\u0007\u0011\u0002\u0002\u07bf\u07c1\u0007\u00e4\u0002",
    "\u0002\u07c0\u07bf\u0003\u0002\u0002\u0002\u07c0\u07c1\u0003\u0002\u0002",
    "\u0002\u07c1\u07c2\u0003\u0002\u0002\u0002\u07c2\u07c4\u0005\u0154\u00ab",
    "\u0002\u07c3\u07bc\u0003\u0002\u0002\u0002\u07c4\u07c7\u0003\u0002\u0002",
    "\u0002\u07c5\u07c3\u0003\u0002\u0002\u0002\u07c5\u07c6\u0003\u0002\u0002",
    "\u0002\u07c6\u00e9\u0003\u0002\u0002\u0002\u07c7\u07c5\u0003\u0002\u0002",
    "\u0002\u07c8\u07c9\u0007W\u0002\u0002\u07c9\u07ca\u0007\u00e4\u0002",
    "\u0002\u07ca\u07d5\u0005\u00ecw\u0002\u07cb\u07cd\u0007\u00e4\u0002",
    "\u0002\u07cc\u07cb\u0003\u0002\u0002\u0002\u07cc\u07cd\u0003\u0002\u0002",
    "\u0002\u07cd\u07ce\u0003\u0002\u0002\u0002\u07ce\u07d0\u0007\u0011\u0002",
    "\u0002\u07cf\u07d1\u0007\u00e4\u0002\u0002\u07d0\u07cf\u0003\u0002\u0002",
    "\u0002\u07d0\u07d1\u0003\u0002\u0002\u0002\u07d1\u07d2\u0003\u0002\u0002",
    "\u0002\u07d2\u07d4\u0005\u00ecw\u0002\u07d3\u07cc\u0003\u0002\u0002",
    "\u0002\u07d4\u07d7\u0003\u0002\u0002\u0002\u07d5\u07d3\u0003\u0002\u0002",
    "\u0002\u07d5\u07d6\u0003\u0002\u0002\u0002\u07d6\u00eb\u0003\u0002\u0002",
    "\u0002\u07d7\u07d5\u0003\u0002\u0002\u0002\u07d8\u07d9\u0005\u01b8\u00dd",
    "\u0002\u07d9\u07da\u0005\u014a\u00a6\u0002\u07da\u07dd\u0003\u0002\u0002",
    "\u0002\u07db\u07dd\u0005\u01d4\u00eb\u0002\u07dc\u07d8\u0003\u0002\u0002",
    "\u0002\u07dc\u07db\u0003\u0002\u0002\u0002\u07dd\u00ed\u0003\u0002\u0002",
    "\u0002\u07de\u07e0\u0007X\u0002\u0002\u07df\u07e1\u0007\u00e4\u0002",
    "\u0002\u07e0\u07df\u0003\u0002\u0002\u0002\u07e0\u07e1\u0003\u0002\u0002",
    "\u0002\u07e1\u07e2\u0003\u0002\u0002\u0002\u07e2\u07e4\u0007\u0016\u0002",
    "\u0002\u07e3\u07e5\u0007\u00e4\u0002\u0002\u07e4\u07e3\u0003\u0002\u0002",
    "\u0002\u07e4\u07e5\u0003\u0002\u0002\u0002\u07e5\u07e6\u0003\u0002\u0002",
    "\u0002\u07e6\u07e7\u0005\u01b8\u00dd\u0002\u07e7\u07e8\u0007\u00e4\u0002",
    "\u0002\u07e8\u07e9\u0007Y\u0002\u0002\u07e9\u07ea\u0007\u00e4\u0002",
    "\u0002\u07ea\u07ec\u0005\u0154\u00ab\u0002\u07eb\u07ed\u0007\u00e4\u0002",
    "\u0002\u07ec\u07eb\u0003\u0002\u0002\u0002\u07ec\u07ed\u0003\u0002\u0002",
    "\u0002\u07ed\u07ee\u0003\u0002\u0002\u0002\u07ee\u07f1\u0007\u0019\u0002",
    "\u0002\u07ef\u07f0\u0007\u00e4\u0002\u0002\u07f0\u07f2\u0005d3\u0002",
    "\u07f1\u07ef\u0003\u0002\u0002\u0002\u07f2\u07f3\u0003\u0002\u0002\u0002",
    "\u07f3\u07f1\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002\u0002\u0002",
    "\u07f4\u07f6\u0003\u0002\u0002\u0002\u07f5\u07f7\u0007\u00e4\u0002\u0002",
    "\u07f6\u07f5\u0003\u0002\u0002\u0002\u07f6\u07f7\u0003\u0002\u0002\u0002",
    "\u07f7\u07f8\u0003\u0002\u0002\u0002\u07f8\u07f9\u0007\u0017\u0002\u0002",
    "\u07f9\u00ef\u0003\u0002\u0002\u0002\u07fa\u07ff\u0007K\u0002\u0002",
    "\u07fb\u07fd\u0007\u00e4\u0002\u0002\u07fc\u07fb\u0003\u0002\u0002\u0002",
    "\u07fc\u07fd\u0003\u0002\u0002\u0002\u07fd\u07fe\u0003\u0002\u0002\u0002",
    "\u07fe\u0800\u0007Z\u0002\u0002\u07ff\u07fc\u0003\u0002\u0002\u0002",
    "\u07ff\u0800\u0003\u0002\u0002\u0002\u0800\u0801\u0003\u0002\u0002\u0002",
    "\u0801\u0802\u0007\u00e4\u0002\u0002\u0802\u0807\u0005\u00f4{\u0002",
    "\u0803\u0805\u0007\u00e4\u0002\u0002\u0804\u0803\u0003\u0002\u0002\u0002",
    "\u0804\u0805\u0003\u0002\u0002\u0002\u0805\u0806\u0003\u0002\u0002\u0002",
    "\u0806\u0808\u0005\u012a\u0096\u0002\u0807\u0804\u0003\u0002\u0002\u0002",
    "\u0807\u0808\u0003\u0002\u0002\u0002\u0808\u00f1\u0003\u0002\u0002\u0002",
    "\u0809\u080e\u0007[\u0002\u0002\u080a\u080c\u0007\u00e4\u0002\u0002",
    "\u080b\u080a\u0003\u0002\u0002\u0002\u080b\u080c\u0003\u0002\u0002\u0002",
    "\u080c\u080d\u0003\u0002\u0002\u0002\u080d\u080f\u0007Z\u0002\u0002",
    "\u080e\u080b\u0003\u0002\u0002\u0002\u080e\u080f\u0003\u0002\u0002\u0002",
    "\u080f\u0811\u0003\u0002\u0002\u0002\u0810\u0812\u0007\u00e4\u0002\u0002",
    "\u0811\u0810\u0003\u0002\u0002\u0002\u0811\u0812\u0003\u0002\u0002\u0002",
    "\u0812\u0813\u0003\u0002\u0002\u0002\u0813\u0814\u0005\u00f4{\u0002",
    "\u0814\u00f3\u0003\u0002\u0002\u0002\u0815\u0818\u0005\u00f8}\u0002",
    "\u0816\u0817\u0007\u00e4\u0002\u0002\u0817\u0819\u0005\u010e\u0088\u0002",
    "\u0818\u0816\u0003\u0002\u0002\u0002\u0818\u0819\u0003\u0002\u0002\u0002",
    "\u0819\u081c\u0003\u0002\u0002\u0002\u081a\u081b\u0007\u00e4\u0002\u0002",
    "\u081b\u081d\u0005\u0110\u0089\u0002\u081c\u081a\u0003\u0002\u0002\u0002",
    "\u081c\u081d\u0003\u0002\u0002\u0002\u081d\u0820\u0003\u0002\u0002\u0002",
    "\u081e\u081f\u0007\u00e4\u0002\u0002\u081f\u0821\u0005\u0112\u008a\u0002",
    "\u0820\u081e\u0003\u0002\u0002\u0002\u0820\u0821\u0003\u0002\u0002\u0002",
    "\u0821\u00f5\u0003\u0002\u0002\u0002\u0822\u0824\u0005\u00fe\u0080\u0002",
    "\u0823\u0825\u0007\u00e4\u0002\u0002\u0824\u0823\u0003\u0002\u0002\u0002",
    "\u0824\u0825\u0003\u0002\u0002\u0002\u0825\u0827\u0003\u0002\u0002\u0002",
    "\u0826\u0828\u0005\u0104\u0083\u0002\u0827\u0826\u0003\u0002\u0002\u0002",
    "\u0827\u0828\u0003\u0002\u0002\u0002\u0828\u00f7\u0003\u0002\u0002\u0002",
    "\u0829\u0834\u0007\u0015\u0002\u0002\u082a\u082c\u0007\u00e4\u0002\u0002",
    "\u082b\u082a\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002",
    "\u082c\u082d\u0003\u0002\u0002\u0002\u082d\u082f\u0007\u0011\u0002\u0002",
    "\u082e\u0830\u0007\u00e4\u0002\u0002\u082f\u082e\u0003\u0002\u0002\u0002",
    "\u082f\u0830\u0003\u0002\u0002\u0002\u0830\u0831\u0003\u0002\u0002\u0002",
    "\u0831\u0833\u0005\u00fa~\u0002\u0832\u082b\u0003\u0002\u0002\u0002",
    "\u0833\u0836\u0003\u0002\u0002\u0002\u0834\u0832\u0003\u0002\u0002\u0002",
    "\u0834\u0835\u0003\u0002\u0002\u0002\u0835\u0847\u0003\u0002\u0002\u0002",
    "\u0836\u0834\u0003\u0002\u0002\u0002\u0837\u0842\u0005\u00fa~\u0002",
    "\u0838\u083a\u0007\u00e4\u0002\u0002\u0839\u0838\u0003\u0002\u0002\u0002",
    "\u0839\u083a\u0003\u0002\u0002\u0002\u083a\u083b\u0003\u0002\u0002\u0002",
    "\u083b\u083d\u0007\u0011\u0002\u0002\u083c\u083e\u0007\u00e4\u0002\u0002",
    "\u083d\u083c\u0003\u0002\u0002\u0002\u083d\u083e\u0003\u0002\u0002\u0002",
    "\u083e\u083f\u0003\u0002\u0002\u0002\u083f\u0841\u0005\u00fa~\u0002",
    "\u0840\u0839\u0003\u0002\u0002\u0002\u0841\u0844\u0003\u0002\u0002\u0002",
    "\u0842\u0840\u0003\u0002\u0002\u0002\u0842\u0843\u0003\u0002\u0002\u0002",
    "\u0843\u0847\u0003\u0002\u0002\u0002\u0844\u0842\u0003\u0002\u0002\u0002",
    "\u0845\u0847\u0005\u00f6|\u0002\u0846\u0829\u0003\u0002\u0002\u0002",
    "\u0846\u0837\u0003\u0002\u0002\u0002\u0846\u0845\u0003\u0002\u0002\u0002",
    "\u0847\u00f9\u0003\u0002\u0002\u0002\u0848\u0849\u0005\u0154\u00ab\u0002",
    "\u0849\u084a\u0007\u00e4\u0002\u0002\u084a\u084b\u0007N\u0002\u0002",
    "\u084b\u084c\u0007\u00e4\u0002\u0002\u084c\u084d\u0005\u01b8\u00dd\u0002",
    "\u084d\u0850\u0003\u0002\u0002\u0002\u084e\u0850\u0005\u0154\u00ab\u0002",
    "\u084f\u0848\u0003\u0002\u0002\u0002\u084f\u084e\u0003\u0002\u0002\u0002",
    "\u0850\u00fb\u0003\u0002\u0002\u0002\u0851\u0852\u0007\u0083\u0002\u0002",
    "\u0852\u0853\u0007\u00e4\u0002\u0002\u0853\u0855\u0005\u00fe\u0080\u0002",
    "\u0854\u0856\u0007\u00e4\u0002\u0002\u0855\u0854\u0003\u0002\u0002\u0002",
    "\u0855\u0856\u0003\u0002\u0002\u0002\u0856\u0858\u0003\u0002\u0002\u0002",
    "\u0857\u0859\u0005\u0104\u0083\u0002\u0858\u0857\u0003\u0002\u0002\u0002",
    "\u0858\u0859\u0003\u0002\u0002\u0002\u0859\u00fd\u0003\u0002\u0002\u0002",
    "\u085a\u085c\u0005\u0100\u0081\u0002\u085b\u085d\u0007\u00e4\u0002\u0002",
    "\u085c\u085b\u0003\u0002\u0002\u0002\u085c\u085d\u0003\u0002\u0002\u0002",
    "\u085d\u085f\u0003\u0002\u0002\u0002\u085e\u0860\u0005\u0102\u0082\u0002",
    "\u085f\u085e\u0003\u0002\u0002\u0002\u085f\u0860\u0003\u0002\u0002\u0002",
    "\u0860\u00ff\u0003\u0002\u0002\u0002\u0861\u0862\u0005\u01de\u00f0\u0002",
    "\u0862\u0863\u0005\u01ac\u00d7\u0002\u0863\u0101\u0003\u0002\u0002\u0002",
    "\u0864\u0866\u0007\u0016\u0002\u0002\u0865\u0867\u0007\u00e4\u0002\u0002",
    "\u0866\u0865\u0003\u0002\u0002\u0002\u0866\u0867\u0003\u0002\u0002\u0002",
    "\u0867\u0869\u0003\u0002\u0002\u0002\u0868\u086a\u0005\u0154\u00ab\u0002",
    "\u0869\u0868\u0003\u0002\u0002\u0002\u0869\u086a\u0003\u0002\u0002\u0002",
    "\u086a\u0875\u0003\u0002\u0002\u0002\u086b\u086d\u0007\u00e4\u0002\u0002",
    "\u086c\u086b\u0003\u0002\u0002\u0002\u086c\u086d\u0003\u0002\u0002\u0002",
    "\u086d\u086e\u0003\u0002\u0002\u0002\u086e\u0870\u0007\u0011\u0002\u0002",
    "\u086f\u0871\u0007\u00e4\u0002\u0002\u0870\u086f\u0003\u0002\u0002\u0002",
    "\u0870\u0871\u0003\u0002\u0002\u0002\u0871\u0872\u0003\u0002\u0002\u0002",
    "\u0872\u0874\u0005\u0154\u00ab\u0002\u0873\u086c\u0003\u0002\u0002\u0002",
    "\u0874\u0877\u0003\u0002\u0002\u0002\u0875\u0873\u0003\u0002\u0002\u0002",
    "\u0875\u0876\u0003\u0002\u0002\u0002\u0876\u0879\u0003\u0002\u0002\u0002",
    "\u0877\u0875\u0003\u0002\u0002\u0002\u0878\u087a\u0007\u00e4\u0002\u0002",
    "\u0879\u0878\u0003\u0002\u0002\u0002\u0879\u087a\u0003\u0002\u0002\u0002",
    "\u087a\u087b\u0003\u0002\u0002\u0002\u087b\u087c\u0007\u0017\u0002\u0002",
    "\u087c\u0103\u0003\u0002\u0002\u0002\u087d\u087e\u0007\u0084\u0002\u0002",
    "\u087e\u087f\u0007\u00e4\u0002\u0002\u087f\u088a\u0005\u0106\u0084\u0002",
    "\u0880\u0882\u0007\u00e4\u0002\u0002\u0881\u0880\u0003\u0002\u0002\u0002",
    "\u0881\u0882\u0003\u0002\u0002\u0002\u0882\u0883\u0003\u0002\u0002\u0002",
    "\u0883\u0885\u0007\u0011\u0002\u0002\u0884\u0886\u0007\u00e4\u0002\u0002",
    "\u0885\u0884\u0003\u0002\u0002\u0002\u0885\u0886\u0003\u0002\u0002\u0002",
    "\u0886\u0887\u0003\u0002\u0002\u0002\u0887\u0889\u0005\u0106\u0084\u0002",
    "\u0888\u0881\u0003\u0002\u0002\u0002\u0889\u088c\u0003\u0002\u0002\u0002",
    "\u088a\u0888\u0003\u0002\u0002\u0002\u088a\u088b\u0003\u0002\u0002\u0002",
    "\u088b\u088f\u0003\u0002\u0002\u0002\u088c\u088a\u0003\u0002\u0002\u0002",
    "\u088d\u088e\u0007\u00e4\u0002\u0002\u088e\u0890\u0005\u012a\u0096\u0002",
    "\u088f\u088d\u0003\u0002\u0002\u0002\u088f\u0890\u0003\u0002\u0002\u0002",
    "\u0890\u0105\u0003\u0002\u0002\u0002\u0891\u0894\u0005\u0108\u0085\u0002",
    "\u0892\u0894\u0005\u010a\u0086\u0002\u0893\u0891\u0003\u0002\u0002\u0002",
    "\u0893\u0892\u0003\u0002\u0002\u0002\u0894\u0107\u0003\u0002\u0002\u0002",
    "\u0895\u0896\u0005\u010c\u0087\u0002\u0896\u0897\u0007\u00e4\u0002\u0002",
    "\u0897\u0898\u0007N\u0002\u0002\u0898\u0899\u0007\u00e4\u0002\u0002",
    "\u0899\u089a\u0005\u01b8\u00dd\u0002\u089a\u0109\u0003\u0002\u0002\u0002",
    "\u089b\u089c\u0005\u010c\u0087\u0002\u089c\u010b\u0003\u0002\u0002\u0002",
    "\u089d\u089e\u0005\u01e6\u00f4\u0002\u089e\u010d\u0003\u0002\u0002\u0002",
    "\u089f\u08a0\u0007\\\u0002\u0002\u08a0\u08a1\u0007\u00e4\u0002\u0002",
    "\u08a1\u08a2\u0007]\u0002\u0002\u08a2\u08a3\u0007\u00e4\u0002\u0002",
    "\u08a3\u08ae\u0005\u0114\u008b\u0002\u08a4\u08a6\u0007\u00e4\u0002\u0002",
    "\u08a5\u08a4\u0003\u0002\u0002\u0002\u08a5\u08a6\u0003\u0002\u0002\u0002",
    "\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7\u08a9\u0007\u0011\u0002\u0002",
    "\u08a8\u08aa\u0007\u00e4\u0002\u0002\u08a9\u08a8\u0003\u0002\u0002\u0002",
    "\u08a9\u08aa\u0003\u0002\u0002\u0002\u08aa\u08ab\u0003\u0002\u0002\u0002",
    "\u08ab\u08ad\u0005\u0114\u008b\u0002\u08ac\u08a5\u0003\u0002\u0002\u0002",
    "\u08ad\u08b0\u0003\u0002\u0002\u0002\u08ae\u08ac\u0003\u0002\u0002\u0002",
    "\u08ae\u08af\u0003\u0002\u0002\u0002\u08af\u010f\u0003\u0002\u0002\u0002",
    "\u08b0\u08ae\u0003\u0002\u0002\u0002\u08b1\u08b2\u0007^\u0002\u0002",
    "\u08b2\u08b3\u0007\u00e4\u0002\u0002\u08b3\u08b4\u0005\u0154\u00ab\u0002",
    "\u08b4\u0111\u0003\u0002\u0002\u0002\u08b5\u08b6\u0007_\u0002\u0002",
    "\u08b6\u08b7\u0007\u00e4\u0002\u0002\u08b7\u08b8\u0005\u0154\u00ab\u0002",
    "\u08b8\u0113\u0003\u0002\u0002\u0002\u08b9\u08c1\u0005\u0154\u00ab\u0002",
    "\u08ba\u08bc\u0007\u00e4\u0002\u0002\u08bb\u08ba\u0003\u0002\u0002\u0002",
    "\u08bb\u08bc\u0003\u0002\u0002\u0002\u08bc\u08bd\u0003\u0002\u0002\u0002",
    "\u08bd\u08bf\t\u000f\u0002\u0002\u08be\u08c0\u0007\u00e4\u0002\u0002",
    "\u08bf\u08be\u0003\u0002\u0002\u0002\u08bf\u08c0\u0003\u0002\u0002\u0002",
    "\u08c0\u08c2\u0003\u0002\u0002\u0002\u08c1\u08bb\u0003\u0002\u0002\u0002",
    "\u08c1\u08c2\u0003\u0002\u0002\u0002\u08c2\u0115\u0003\u0002\u0002\u0002",
    "\u08c3\u08c5\u0007\u00e4\u0002\u0002\u08c4\u08c3\u0003\u0002\u0002\u0002",
    "\u08c4\u08c5\u0003\u0002\u0002\u0002\u08c5\u08f4\u0003\u0002\u0002\u0002",
    "\u08c6\u08c7\u0007;\u0002\u0002\u08c7\u08c8\u0007\u00e4\u0002\u0002",
    "\u08c8\u08c9\u0007B\u0002\u0002\u08c9\u08ca\u0007\u00e4\u0002\u0002",
    "\u08ca\u08cb\u0005\u01b8\u00dd\u0002\u08cb\u08cd\u0005\u014c\u00a7\u0002",
    "\u08cc\u08ce\u0007\u00e4\u0002\u0002\u08cd\u08cc\u0003\u0002\u0002\u0002",
    "\u08cd\u08ce\u0003\u0002\u0002\u0002\u08ce\u08cf\u0003\u0002\u0002\u0002",
    "\u08cf\u08d1\u0007\u0016\u0002\u0002\u08d0\u08d2\u0007\u00e4\u0002\u0002",
    "\u08d1\u08d0\u0003\u0002\u0002\u0002\u08d1\u08d2\u0003\u0002\u0002\u0002",
    "\u08d2\u08d3\u0003\u0002\u0002\u0002\u08d3\u08d5\u0005\u01d6\u00ec\u0002",
    "\u08d4\u08d6\u0007\u00e4\u0002\u0002\u08d5\u08d4\u0003\u0002\u0002\u0002",
    "\u08d5\u08d6\u0003\u0002\u0002\u0002\u08d6\u08d7\u0003\u0002\u0002\u0002",
    "\u08d7\u08d8\u0007\u0017\u0002\u0002\u08d8\u08f5\u0003\u0002\u0002\u0002",
    "\u08d9\u08da\u0007;\u0002\u0002\u08da\u08db\u0007\u00e4\u0002\u0002",
    "\u08db\u08dc\u0007d\u0002\u0002\u08dc\u08dd\u0007\u00e4\u0002\u0002",
    "\u08dd\u08de\u0007C\u0002\u0002\u08de\u08df\u0007\u00e4\u0002\u0002",
    "\u08df\u08ea\u0005\u01b8\u00dd\u0002\u08e0\u08e2\u0007\u00e4\u0002\u0002",
    "\u08e1\u08e0\u0003\u0002\u0002\u0002\u08e1\u08e2\u0003\u0002\u0002\u0002",
    "\u08e2\u08e3\u0003\u0002\u0002\u0002\u08e3\u08e5\u0007\u0011\u0002\u0002",
    "\u08e4\u08e6\u0007\u00e4\u0002\u0002\u08e5\u08e4\u0003\u0002\u0002\u0002",
    "\u08e5\u08e6\u0003\u0002\u0002\u0002\u08e6\u08e7\u0003\u0002\u0002\u0002",
    "\u08e7\u08e9\u0005\u01b8\u00dd\u0002\u08e8\u08e1\u0003\u0002\u0002\u0002",
    "\u08e9\u08ec\u0003\u0002\u0002\u0002\u08ea\u08e8\u0003\u0002\u0002\u0002",
    "\u08ea\u08eb\u0003\u0002\u0002\u0002\u08eb\u08f5\u0003\u0002\u0002\u0002",
    "\u08ec\u08ea\u0003\u0002\u0002\u0002\u08ed\u08ee\u0007;\u0002\u0002",
    "\u08ee\u08ef\u0007\u00e4\u0002\u0002\u08ef\u08f0\u0007e\u0002\u0002",
    "\u08f0\u08f1\u0007\u00e4\u0002\u0002\u08f1\u08f2\u0005\u01b8\u00dd\u0002",
    "\u08f2\u08f3\u0005\u014c\u00a7\u0002\u08f3\u08f5\u0003\u0002\u0002\u0002",
    "\u08f4\u08c6\u0003\u0002\u0002\u0002\u08f4\u08d9\u0003\u0002\u0002\u0002",
    "\u08f4\u08ed\u0003\u0002\u0002\u0002\u08f5\u0117\u0003\u0002\u0002\u0002",
    "\u08f6\u08f7\u0007f\u0002\u0002\u08f7\u08f8\u0007\u00e4\u0002\u0002",
    "\u08f8\u0903\u0005\u011a\u008e\u0002\u08f9\u08fb\u0007\u00e4\u0002\u0002",
    "\u08fa\u08f9\u0003\u0002\u0002\u0002\u08fa\u08fb\u0003\u0002\u0002\u0002",
    "\u08fb\u08fc\u0003\u0002\u0002\u0002\u08fc\u08fe\u0007\u0011\u0002\u0002",
    "\u08fd\u08ff\u0007\u00e4\u0002\u0002\u08fe\u08fd\u0003\u0002\u0002\u0002",
    "\u08fe\u08ff\u0003\u0002\u0002\u0002\u08ff\u0900\u0003\u0002\u0002\u0002",
    "\u0900\u0902\u0005\u011a\u008e\u0002\u0901\u08fa\u0003\u0002\u0002\u0002",
    "\u0902\u0905\u0003\u0002\u0002\u0002\u0903\u0901\u0003\u0002\u0002\u0002",
    "\u0903\u0904\u0003\u0002\u0002\u0002\u0904\u0907\u0003\u0002\u0002\u0002",
    "\u0905\u0903\u0003\u0002\u0002\u0002\u0906\u0908\u0005\u012a\u0096\u0002",
    "\u0907\u0906\u0003\u0002\u0002\u0002\u0907\u0908\u0003\u0002\u0002\u0002",
    "\u0908\u0119\u0003\u0002\u0002\u0002\u0909\u090b\u0005\u01b8\u00dd\u0002",
    "\u090a\u090c\u0007\u00e4\u0002\u0002\u090b\u090a\u0003\u0002\u0002\u0002",
    "\u090b\u090c\u0003\u0002\u0002\u0002\u090c\u090d\u0003\u0002\u0002\u0002",
    "\u090d\u090f\u0007\u000e\u0002\u0002\u090e\u0910\u0007\u00e4\u0002\u0002",
    "\u090f\u090e\u0003\u0002\u0002\u0002\u090f\u0910\u0003\u0002\u0002\u0002",
    "\u0910\u0911\u0003\u0002\u0002\u0002\u0911\u0912\u0005\u011c\u008f\u0002",
    "\u0912\u011b\u0003\u0002\u0002\u0002\u0913\u0916\u0005\u011e\u0090\u0002",
    "\u0914\u0916\u0005\u0120\u0091\u0002\u0915\u0913\u0003\u0002\u0002\u0002",
    "\u0915\u0914\u0003\u0002\u0002\u0002\u0916\u011d\u0003\u0002\u0002\u0002",
    "\u0917\u0919\u0007g\u0002\u0002\u0918\u091a\u0007\u00e4\u0002\u0002",
    "\u0919\u0918\u0003\u0002\u0002\u0002\u0919\u091a\u0003\u0002\u0002\u0002",
    "\u091a\u091e\u0003\u0002\u0002\u0002\u091b\u091f\u0005\u0122\u0092\u0002",
    "\u091c\u091f\u0005\u0124\u0093\u0002\u091d\u091f\u0005\u0126\u0094\u0002",
    "\u091e\u091b\u0003\u0002\u0002\u0002\u091e\u091c\u0003\u0002\u0002\u0002",
    "\u091e\u091d\u0003\u0002\u0002\u0002\u091f\u011f\u0003\u0002\u0002\u0002",
    "\u0920\u0924\t\u0010\u0002\u0002\u0921\u0925\u0005\u0122\u0092\u0002",
    "\u0922\u0925\u0005\u0124\u0093\u0002\u0923\u0925\u0005\u0126\u0094\u0002",
    "\u0924\u0921\u0003\u0002\u0002\u0002\u0924\u0922\u0003\u0002\u0002\u0002",
    "\u0924\u0923\u0003\u0002\u0002\u0002\u0925\u0121\u0003\u0002\u0002\u0002",
    "\u0926\u0927\u0007\u0004\u0002\u0002\u0927\u0928\u0005\u01e6\u00f4\u0002",
    "\u0928\u0929\u0007\u0016\u0002\u0002\u0929\u092a\u0005\u01e6\u00f4\u0002",
    "\u092a\u092d\u0007\u000e\u0002\u0002\u092b\u092e\u0007\u00d1\u0002\u0002",
    "\u092c\u092e\u0005\u01ca\u00e6\u0002\u092d\u092b\u0003\u0002\u0002\u0002",
    "\u092d\u092c\u0003\u0002\u0002\u0002\u092e\u092f\u0003\u0002\u0002\u0002",
    "\u092f\u0930\u0007\u0017\u0002\u0002\u0930\u0123\u0003\u0002\u0002\u0002",
    "\u0931\u0932\u0007\u0004\u0002\u0002\u0932\u0933\u0005\u01e6\u00f4\u0002",
    "\u0933\u0936\u0007\u0016\u0002\u0002\u0934\u0937\u0007\u00d1\u0002\u0002",
    "\u0935\u0937\u0005\u01ca\u00e6\u0002\u0936\u0934\u0003\u0002\u0002\u0002",
    "\u0936\u0935\u0003\u0002\u0002\u0002\u0937\u0938\u0003\u0002\u0002\u0002",
    "\u0938\u0939\u0007\u0017\u0002\u0002\u0939\u0125\u0003\u0002\u0002\u0002",
    "\u093a\u093e\u0007\u0016\u0002\u0002\u093b\u093f\u0005\u0128\u0095\u0002",
    "\u093c\u093f\u0005\u01ca\u00e6\u0002\u093d\u093f\u0007\u0015\u0002\u0002",
    "\u093e\u093b\u0003\u0002\u0002\u0002\u093e\u093c\u0003\u0002\u0002\u0002",
    "\u093e\u093d\u0003\u0002\u0002\u0002\u093f\u0940\u0003\u0002\u0002\u0002",
    "\u0940\u0941\u0007\u0017\u0002\u0002\u0941\u0127\u0003\u0002\u0002\u0002",
    "\u0942\u094d\u0005\u01da\u00ee\u0002\u0943\u0945\u0007\u00e4\u0002\u0002",
    "\u0944\u0943\u0003\u0002\u0002\u0002\u0944\u0945\u0003\u0002\u0002\u0002",
    "\u0945\u0946\u0003\u0002\u0002\u0002\u0946\u0948\u0007\u0011\u0002\u0002",
    "\u0947\u0949\u0007\u00e4\u0002\u0002\u0948\u0947\u0003\u0002\u0002\u0002",
    "\u0948\u0949\u0003\u0002\u0002\u0002\u0949\u094a\u0003\u0002\u0002\u0002",
    "\u094a\u094c\u0005\u01da\u00ee\u0002\u094b\u0944\u0003\u0002\u0002\u0002",
    "\u094c\u094f\u0003\u0002\u0002\u0002\u094d\u094b\u0003\u0002\u0002\u0002",
    "\u094d\u094e\u0003\u0002\u0002\u0002\u094e\u0129\u0003\u0002\u0002\u0002",
    "\u094f\u094d\u0003\u0002\u0002\u0002\u0950\u0951\u0007j\u0002\u0002",
    "\u0951\u0952\u0007\u00e4\u0002\u0002\u0952\u0953\u0005\u0154\u00ab\u0002",
    "\u0953\u012b\u0003\u0002\u0002\u0002\u0954\u095f\u0005\u012e\u0098\u0002",
    "\u0955\u0957\u0007\u00e4\u0002\u0002\u0956\u0955\u0003\u0002\u0002\u0002",
    "\u0956\u0957\u0003\u0002\u0002\u0002\u0957\u0958\u0003\u0002\u0002\u0002",
    "\u0958\u095a\u0007\u0011\u0002\u0002\u0959\u095b\u0007\u00e4\u0002\u0002",
    "\u095a\u0959\u0003\u0002\u0002\u0002\u095a\u095b\u0003\u0002\u0002\u0002",
    "\u095b\u095c\u0003\u0002\u0002\u0002\u095c\u095e\u0005\u012e\u0098\u0002",
    "\u095d\u0956\u0003\u0002\u0002\u0002\u095e\u0961\u0003\u0002\u0002\u0002",
    "\u095f\u095d\u0003\u0002\u0002\u0002\u095f\u0960\u0003\u0002\u0002\u0002",
    "\u0960\u012d\u0003\u0002\u0002\u0002\u0961\u095f\u0003\u0002\u0002\u0002",
    "\u0962\u0964\u0005\u01b8\u00dd\u0002\u0963\u0965\u0007\u00e4\u0002\u0002",
    "\u0964\u0963\u0003\u0002\u0002\u0002\u0964\u0965\u0003\u0002\u0002\u0002",
    "\u0965\u0966\u0003\u0002\u0002\u0002\u0966\u0968\u0007\u000e\u0002\u0002",
    "\u0967\u0969\u0007\u00e4\u0002\u0002\u0968\u0967\u0003\u0002\u0002\u0002",
    "\u0968\u0969\u0003\u0002\u0002\u0002\u0969\u096a\u0003\u0002\u0002\u0002",
    "\u096a\u096b\u0005\u0130\u0099\u0002\u096b\u096e\u0003\u0002\u0002\u0002",
    "\u096c\u096e\u0005\u0130\u0099\u0002\u096d\u0962\u0003\u0002\u0002\u0002",
    "\u096d\u096c\u0003\u0002\u0002\u0002\u096e\u012f\u0003\u0002\u0002\u0002",
    "\u096f\u0972\u0005\u018c\u00c7\u0002\u0970\u0972\u0005\u0132\u009a\u0002",
    "\u0971\u096f\u0003\u0002\u0002\u0002\u0971\u0970\u0003\u0002\u0002\u0002",
    "\u0972\u0131\u0003\u0002\u0002\u0002\u0973\u097a\u0005\u0134\u009b\u0002",
    "\u0974\u0976\u0007\u00e4\u0002\u0002\u0975\u0974\u0003\u0002\u0002\u0002",
    "\u0975\u0976\u0003\u0002\u0002\u0002\u0976\u0977\u0003\u0002\u0002\u0002",
    "\u0977\u0979\u0005\u0136\u009c\u0002\u0978\u0975\u0003\u0002\u0002\u0002",
    "\u0979\u097c\u0003\u0002\u0002\u0002\u097a\u0978\u0003\u0002\u0002\u0002",
    "\u097a\u097b\u0003\u0002\u0002\u0002\u097b\u0982\u0003\u0002\u0002\u0002",
    "\u097c\u097a\u0003\u0002\u0002\u0002\u097d\u097e\u0007\u0016\u0002\u0002",
    "\u097e\u097f\u0005\u0132\u009a\u0002\u097f\u0980\u0007\u0017\u0002\u0002",
    "\u0980\u0982\u0003\u0002\u0002\u0002\u0981\u0973\u0003\u0002\u0002\u0002",
    "\u0981\u097d\u0003\u0002\u0002\u0002\u0982\u0133\u0003\u0002\u0002\u0002",
    "\u0983\u0985\u0007\u0016\u0002\u0002\u0984\u0986\u0007\u00e4\u0002\u0002",
    "\u0985\u0984\u0003\u0002\u0002\u0002\u0985\u0986\u0003\u0002\u0002\u0002",
    "\u0986\u098b\u0003\u0002\u0002\u0002\u0987\u0989\u0005\u01b8\u00dd\u0002",
    "\u0988\u098a\u0007\u00e4\u0002\u0002\u0989\u0988\u0003\u0002\u0002\u0002",
    "\u0989\u098a\u0003\u0002\u0002\u0002\u098a\u098c\u0003\u0002\u0002\u0002",
    "\u098b\u0987\u0003\u0002\u0002\u0002\u098b\u098c\u0003\u0002\u0002\u0002",
    "\u098c\u0991\u0003\u0002\u0002\u0002\u098d\u098f\u0005\u014a\u00a6\u0002",
    "\u098e\u0990\u0007\u00e4\u0002\u0002\u098f\u098e\u0003\u0002\u0002\u0002",
    "\u098f\u0990\u0003\u0002\u0002\u0002\u0990\u0992\u0003\u0002\u0002\u0002",
    "\u0991\u098d\u0003\u0002\u0002\u0002\u0991\u0992\u0003\u0002\u0002\u0002",
    "\u0992\u0997\u0003\u0002\u0002\u0002\u0993\u0995\u0005\u0140\u00a1\u0002",
    "\u0994\u0996\u0007\u00e4\u0002\u0002\u0995\u0994\u0003\u0002\u0002\u0002",
    "\u0995\u0996\u0003\u0002\u0002\u0002\u0996\u0998\u0003\u0002\u0002\u0002",
    "\u0997\u0993\u0003\u0002\u0002\u0002\u0997\u0998\u0003\u0002\u0002\u0002",
    "\u0998\u0999\u0003\u0002\u0002\u0002\u0999\u099a\u0007\u0017\u0002\u0002",
    "\u099a\u0135\u0003\u0002\u0002\u0002\u099b\u099d\u0005\u0138\u009d\u0002",
    "\u099c\u099e\u0007\u00e4\u0002\u0002\u099d\u099c\u0003\u0002\u0002\u0002",
    "\u099d\u099e\u0003\u0002\u0002\u0002\u099e\u099f\u0003\u0002\u0002\u0002",
    "\u099f\u09a0\u0005\u0134\u009b\u0002\u09a0\u0137\u0003\u0002\u0002\u0002",
    "\u09a1\u09a3\u0005\u013a\u009e\u0002\u09a2\u09a4\u0007\u00e4\u0002\u0002",
    "\u09a3\u09a2\u0003\u0002\u0002\u0002\u09a3\u09a4\u0003\u0002\u0002\u0002",
    "\u09a4\u09a6\u0003\u0002\u0002\u0002\u09a5\u09a7\u0005\u013e\u00a0\u0002",
    "\u09a6\u09a5\u0003\u0002\u0002\u0002\u09a6\u09a7\u0003\u0002\u0002\u0002",
    "\u09a7\u09a9\u0003\u0002\u0002\u0002\u09a8\u09aa\u0007\u00e4\u0002\u0002",
    "\u09a9\u09a8\u0003\u0002\u0002\u0002\u09a9\u09aa\u0003\u0002\u0002\u0002",
    "\u09aa\u09ab\u0003\u0002\u0002\u0002\u09ab\u09ac\u0005\u013c\u009f\u0002",
    "\u09ac\u0139\u0003\u0002\u0002\u0002\u09ad\u09af\u0005\u01e0\u00f1\u0002",
    "\u09ae\u09b0\u0007\u00e4\u0002\u0002\u09af\u09ae\u0003\u0002\u0002\u0002",
    "\u09af\u09b0\u0003\u0002\u0002\u0002\u09b0\u09b1\u0003\u0002\u0002\u0002",
    "\u09b1\u09b2\u0005\u01e4\u00f3\u0002\u09b2\u09b5\u0003\u0002\u0002\u0002",
    "\u09b3\u09b5\u0005\u01e4\u00f3\u0002\u09b4\u09ad\u0003\u0002\u0002\u0002",
    "\u09b4\u09b3\u0003\u0002\u0002\u0002\u09b5\u013b\u0003\u0002\u0002\u0002",
    "\u09b6\u09b8\u0005\u01e4\u00f3\u0002\u09b7\u09b9\u0007\u00e4\u0002\u0002",
    "\u09b8\u09b7\u0003\u0002\u0002\u0002\u09b8\u09b9\u0003\u0002\u0002\u0002",
    "\u09b9\u09ba\u0003\u0002\u0002\u0002\u09ba\u09bb\u0005\u01e2\u00f2\u0002",
    "\u09bb\u09be\u0003\u0002\u0002\u0002\u09bc\u09be\u0005\u01e4\u00f3\u0002",
    "\u09bd\u09b6\u0003\u0002\u0002\u0002\u09bd\u09bc\u0003\u0002\u0002\u0002",
    "\u09be\u013d\u0003\u0002\u0002\u0002\u09bf\u09c1\u0007\u0013\u0002\u0002",
    "\u09c0\u09c2\u0007\u00e4\u0002\u0002\u09c1\u09c0\u0003\u0002\u0002\u0002",
    "\u09c1\u09c2\u0003\u0002\u0002\u0002\u09c2\u09c7\u0003\u0002\u0002\u0002",
    "\u09c3\u09c5\u0005\u01b8\u00dd\u0002\u09c4\u09c6\u0007\u00e4\u0002\u0002",
    "\u09c5\u09c4\u0003\u0002\u0002\u0002\u09c5\u09c6\u0003\u0002\u0002\u0002",
    "\u09c6\u09c8\u0003\u0002\u0002\u0002\u09c7\u09c3\u0003\u0002\u0002\u0002",
    "\u09c7\u09c8\u0003\u0002\u0002\u0002\u09c8\u09cd\u0003\u0002\u0002\u0002",
    "\u09c9\u09cb\u0005\u0144\u00a3\u0002\u09ca\u09cc\u0007\u00e4\u0002\u0002",
    "\u09cb\u09ca\u0003\u0002\u0002\u0002\u09cb\u09cc\u0003\u0002\u0002\u0002",
    "\u09cc\u09ce\u0003\u0002\u0002\u0002\u09cd\u09c9\u0003\u0002\u0002\u0002",
    "\u09cd\u09ce\u0003\u0002\u0002\u0002\u09ce\u09d0\u0003\u0002\u0002\u0002",
    "\u09cf\u09d1\u0005\u014e\u00a8\u0002\u09d0\u09cf\u0003\u0002\u0002\u0002",
    "\u09d0\u09d1\u0003\u0002\u0002\u0002\u09d1\u09d6\u0003\u0002\u0002\u0002",
    "\u09d2\u09d4\u0005\u0140\u00a1\u0002\u09d3\u09d5\u0007\u00e4\u0002\u0002",
    "\u09d4\u09d3\u0003\u0002\u0002\u0002\u09d4\u09d5\u0003\u0002\u0002\u0002",
    "\u09d5\u09d7\u0003\u0002\u0002\u0002\u09d6\u09d2\u0003\u0002\u0002\u0002",
    "\u09d6\u09d7\u0003\u0002\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002\u0002",
    "\u09d8\u09d9\u0007\u0014\u0002\u0002\u09d9\u013f\u0003\u0002\u0002\u0002",
    "\u09da\u09dd\u0005\u01bc\u00df\u0002\u09db\u09dd\u0005\u01ca\u00e6\u0002",
    "\u09dc\u09da\u0003\u0002\u0002\u0002\u09dc\u09db\u0003\u0002\u0002\u0002",
    "\u09dd\u0141\u0003\u0002\u0002\u0002\u09de\u09e0\u0007\u0004\u0002\u0002",
    "\u09df\u09e1\u0007\u00e4\u0002\u0002\u09e0\u09df\u0003\u0002\u0002\u0002",
    "\u09e0\u09e1\u0003\u0002\u0002\u0002\u09e1\u09e2\u0003\u0002\u0002\u0002",
    "\u09e2\u09e3\u0005\u0152\u00aa\u0002\u09e3\u0143\u0003\u0002\u0002\u0002",
    "\u09e4\u09ec\u0005\u0146\u00a4\u0002\u09e5\u09e7\u0007\u00e4\u0002\u0002",
    "\u09e6\u09e5\u0003\u0002\u0002\u0002\u09e6\u09e7\u0003\u0002\u0002\u0002",
    "\u09e7\u09e8\u0003\u0002\u0002\u0002\u09e8\u09e9\u0007\u0019\u0002\u0002",
    "\u09e9\u09eb\u0005\u0148\u00a5\u0002\u09ea\u09e6\u0003\u0002\u0002\u0002",
    "\u09eb\u09ee\u0003\u0002\u0002\u0002\u09ec\u09ea\u0003\u0002\u0002\u0002",
    "\u09ec\u09ed\u0003\u0002\u0002\u0002\u09ed\u0145\u0003\u0002\u0002\u0002",
    "\u09ee\u09ec\u0003\u0002\u0002\u0002\u09ef\u09f0\u0007\u0004\u0002\u0002",
    "\u09f0\u09f1\u0005\u0152\u00aa\u0002\u09f1\u0147\u0003\u0002\u0002\u0002",
    "\u09f2\u09f4\u0007\u0004\u0002\u0002\u09f3\u09f2\u0003\u0002\u0002\u0002",
    "\u09f3\u09f4\u0003\u0002\u0002\u0002\u09f4\u09f5\u0003\u0002\u0002\u0002",
    "\u09f5\u09f6\u0005\u0152\u00aa\u0002\u09f6\u0149\u0003\u0002\u0002\u0002",
    "\u09f7\u09fe\u0005\u014c\u00a7\u0002\u09f8\u09fa\u0007\u00e4\u0002\u0002",
    "\u09f9\u09f8\u0003\u0002\u0002\u0002\u09f9\u09fa\u0003\u0002\u0002\u0002",
    "\u09fa\u09fb\u0003\u0002\u0002\u0002\u09fb\u09fd\u0005\u014c\u00a7\u0002",
    "\u09fc\u09f9\u0003\u0002\u0002\u0002\u09fd\u0a00\u0003\u0002\u0002\u0002",
    "\u09fe\u09fc\u0003\u0002\u0002\u0002\u09fe\u09ff\u0003\u0002\u0002\u0002",
    "\u09ff\u014b\u0003\u0002\u0002\u0002\u0a00\u09fe\u0003\u0002\u0002\u0002",
    "\u0a01\u0a02\u0007\u0004\u0002\u0002\u0a02\u0a03\u0005\u0150\u00a9\u0002",
    "\u0a03\u014d\u0003\u0002\u0002\u0002\u0a04\u0a06\u0007\u0015\u0002\u0002",
    "\u0a05\u0a07\u0007\u00e4\u0002\u0002\u0a06\u0a05\u0003\u0002\u0002\u0002",
    "\u0a06\u0a07\u0003\u0002\u0002\u0002\u0a07\u0a0c\u0003\u0002\u0002\u0002",
    "\u0a08\u0a0a\u0005\u01da\u00ee\u0002\u0a09\u0a0b\u0007\u00e4\u0002\u0002",
    "\u0a0a\u0a09\u0003\u0002\u0002\u0002\u0a0a\u0a0b\u0003\u0002\u0002\u0002",
    "\u0a0b\u0a0d\u0003\u0002\u0002\u0002\u0a0c\u0a08\u0003\u0002\u0002\u0002",
    "\u0a0c\u0a0d\u0003\u0002\u0002\u0002\u0a0d\u0a18\u0003\u0002\u0002\u0002",
    "\u0a0e\u0a10\u0007\u001a\u0002\u0002\u0a0f\u0a11\u0007\u00e4\u0002\u0002",
    "\u0a10\u0a0f\u0003\u0002\u0002\u0002\u0a10\u0a11\u0003\u0002\u0002\u0002",
    "\u0a11\u0a16\u0003\u0002\u0002\u0002\u0a12\u0a14\u0005\u01da\u00ee\u0002",
    "\u0a13\u0a15\u0007\u00e4\u0002\u0002\u0a14\u0a13\u0003\u0002\u0002\u0002",
    "\u0a14\u0a15\u0003\u0002\u0002\u0002\u0a15\u0a17\u0003\u0002\u0002\u0002",
    "\u0a16\u0a12\u0003\u0002\u0002\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002",
    "\u0a17\u0a19\u0003\u0002\u0002\u0002\u0a18\u0a0e\u0003\u0002\u0002\u0002",
    "\u0a18\u0a19\u0003\u0002\u0002\u0002\u0a19\u014f\u0003\u0002\u0002\u0002",
    "\u0a1a\u0a1b\u0005\u01e6\u00f4\u0002\u0a1b\u0151\u0003\u0002\u0002\u0002",
    "\u0a1c\u0a1d\u0005\u01e6\u00f4\u0002\u0a1d\u0153\u0003\u0002\u0002\u0002",
    "\u0a1e\u0a1f\u0005\u0156\u00ac\u0002\u0a1f\u0155\u0003\u0002\u0002\u0002",
    "\u0a20\u0a27\u0005\u0158\u00ad\u0002\u0a21\u0a22\u0007\u00e4\u0002\u0002",
    "\u0a22\u0a23\u0007m\u0002\u0002\u0a23\u0a24\u0007\u00e4\u0002\u0002",
    "\u0a24\u0a26\u0005\u0158\u00ad\u0002\u0a25\u0a21\u0003\u0002\u0002\u0002",
    "\u0a26\u0a29\u0003\u0002\u0002\u0002\u0a27\u0a25\u0003\u0002\u0002\u0002",
    "\u0a27\u0a28\u0003\u0002\u0002\u0002\u0a28\u0157\u0003\u0002\u0002\u0002",
    "\u0a29\u0a27\u0003\u0002\u0002\u0002\u0a2a\u0a31\u0005\u015a\u00ae\u0002",
    "\u0a2b\u0a2c\u0007\u00e4\u0002\u0002\u0a2c\u0a2d\u0007n\u0002\u0002",
    "\u0a2d\u0a2e\u0007\u00e4\u0002\u0002\u0a2e\u0a30\u0005\u015a\u00ae\u0002",
    "\u0a2f\u0a2b\u0003\u0002\u0002\u0002\u0a30\u0a33\u0003\u0002\u0002\u0002",
    "\u0a31\u0a2f\u0003\u0002\u0002\u0002\u0a31\u0a32\u0003\u0002\u0002\u0002",
    "\u0a32\u0159\u0003\u0002\u0002\u0002\u0a33\u0a31\u0003\u0002\u0002\u0002",
    "\u0a34\u0a3b\u0005\u015c\u00af\u0002\u0a35\u0a36\u0007\u00e4\u0002\u0002",
    "\u0a36\u0a37\u0007o\u0002\u0002\u0a37\u0a38\u0007\u00e4\u0002\u0002",
    "\u0a38\u0a3a\u0005\u015c\u00af\u0002\u0a39\u0a35\u0003\u0002\u0002\u0002",
    "\u0a3a\u0a3d\u0003\u0002\u0002\u0002\u0a3b\u0a39\u0003\u0002\u0002\u0002",
    "\u0a3b\u0a3c\u0003\u0002\u0002\u0002\u0a3c\u015b\u0003\u0002\u0002\u0002",
    "\u0a3d\u0a3b\u0003\u0002\u0002\u0002\u0a3e\u0a40\u0007p\u0002\u0002",
    "\u0a3f\u0a41\u0007\u00e4\u0002\u0002\u0a40\u0a3f\u0003\u0002\u0002\u0002",
    "\u0a40\u0a41\u0003\u0002\u0002\u0002\u0a41\u0a43\u0003\u0002\u0002\u0002",
    "\u0a42\u0a3e\u0003\u0002\u0002\u0002\u0a43\u0a46\u0003\u0002\u0002\u0002",
    "\u0a44\u0a42\u0003\u0002\u0002\u0002\u0a44\u0a45\u0003\u0002\u0002\u0002",
    "\u0a45\u0a47\u0003\u0002\u0002\u0002\u0a46\u0a44\u0003\u0002\u0002\u0002",
    "\u0a47\u0a48\u0005\u015e\u00b0\u0002\u0a48\u015d\u0003\u0002\u0002\u0002",
    "\u0a49\u0a50\u0005\u0160\u00b1\u0002\u0a4a\u0a4c\u0007\u00e4\u0002\u0002",
    "\u0a4b\u0a4a\u0003\u0002\u0002\u0002\u0a4b\u0a4c\u0003\u0002\u0002\u0002",
    "\u0a4c\u0a4d\u0003\u0002\u0002\u0002\u0a4d\u0a4f\u0005\u019c\u00cf\u0002",
    "\u0a4e\u0a4b\u0003\u0002\u0002\u0002\u0a4f\u0a52\u0003\u0002\u0002\u0002",
    "\u0a50\u0a4e\u0003\u0002\u0002\u0002\u0a50\u0a51\u0003\u0002\u0002\u0002",
    "\u0a51\u015f\u0003\u0002\u0002\u0002\u0a52\u0a50\u0003\u0002\u0002\u0002",
    "\u0a53\u0a66\u0005\u0162\u00b2\u0002\u0a54\u0a56\u0007\u00e4\u0002\u0002",
    "\u0a55\u0a54\u0003\u0002\u0002\u0002\u0a55\u0a56\u0003\u0002\u0002\u0002",
    "\u0a56\u0a57\u0003\u0002\u0002\u0002\u0a57\u0a59\u0007\u000f\u0002\u0002",
    "\u0a58\u0a5a\u0007\u00e4\u0002\u0002\u0a59\u0a58\u0003\u0002\u0002\u0002",
    "\u0a59\u0a5a\u0003\u0002\u0002\u0002\u0a5a\u0a5b\u0003\u0002\u0002\u0002",
    "\u0a5b\u0a65\u0005\u0162\u00b2\u0002\u0a5c\u0a5e\u0007\u00e4\u0002\u0002",
    "\u0a5d\u0a5c\u0003\u0002\u0002\u0002\u0a5d\u0a5e\u0003\u0002\u0002\u0002",
    "\u0a5e\u0a5f\u0003\u0002\u0002\u0002\u0a5f\u0a61\u0007\u0005\u0002\u0002",
    "\u0a60\u0a62\u0007\u00e4\u0002\u0002\u0a61\u0a60\u0003\u0002\u0002\u0002",
    "\u0a61\u0a62\u0003\u0002\u0002\u0002\u0a62\u0a63\u0003\u0002\u0002\u0002",
    "\u0a63\u0a65\u0005\u0162\u00b2\u0002\u0a64\u0a55\u0003\u0002\u0002\u0002",
    "\u0a64\u0a5d\u0003\u0002\u0002\u0002\u0a65\u0a68\u0003\u0002\u0002\u0002",
    "\u0a66\u0a64\u0003\u0002\u0002\u0002\u0a66\u0a67\u0003\u0002\u0002\u0002",
    "\u0a67\u0161\u0003\u0002\u0002\u0002\u0a68\u0a66\u0003\u0002\u0002\u0002",
    "\u0a69\u0a84\u0005\u0164\u00b3\u0002\u0a6a\u0a6c\u0007\u00e4\u0002\u0002",
    "\u0a6b\u0a6a\u0003\u0002\u0002\u0002\u0a6b\u0a6c\u0003\u0002\u0002\u0002",
    "\u0a6c\u0a6d\u0003\u0002\u0002\u0002\u0a6d\u0a6f\u0007\u0015\u0002\u0002",
    "\u0a6e\u0a70\u0007\u00e4\u0002\u0002\u0a6f\u0a6e\u0003\u0002\u0002\u0002",
    "\u0a6f\u0a70\u0003\u0002\u0002\u0002\u0a70\u0a71\u0003\u0002\u0002\u0002",
    "\u0a71\u0a83\u0005\u0164\u00b3\u0002\u0a72\u0a74\u0007\u00e4\u0002\u0002",
    "\u0a73\u0a72\u0003\u0002\u0002\u0002\u0a73\u0a74\u0003\u0002\u0002\u0002",
    "\u0a74\u0a75\u0003\u0002\u0002\u0002\u0a75\u0a77\u0007\b\u0002\u0002",
    "\u0a76\u0a78\u0007\u00e4\u0002\u0002\u0a77\u0a76\u0003\u0002\u0002\u0002",
    "\u0a77\u0a78\u0003\u0002\u0002\u0002\u0a78\u0a79\u0003\u0002\u0002\u0002",
    "\u0a79\u0a83\u0005\u0164\u00b3\u0002\u0a7a\u0a7c\u0007\u00e4\u0002\u0002",
    "\u0a7b\u0a7a\u0003\u0002\u0002\u0002\u0a7b\u0a7c\u0003\u0002\u0002\u0002",
    "\u0a7c\u0a7d\u0003\u0002\u0002\u0002\u0a7d\u0a7f\u0007\u001b\u0002\u0002",
    "\u0a7e\u0a80\u0007\u00e4\u0002\u0002\u0a7f\u0a7e\u0003\u0002\u0002\u0002",
    "\u0a7f\u0a80\u0003\u0002\u0002\u0002\u0a80\u0a81\u0003\u0002\u0002\u0002",
    "\u0a81\u0a83\u0005\u0164\u00b3\u0002\u0a82\u0a6b\u0003\u0002\u0002\u0002",
    "\u0a82\u0a73\u0003\u0002\u0002\u0002\u0a82\u0a7b\u0003\u0002\u0002\u0002",
    "\u0a83\u0a86\u0003\u0002\u0002\u0002\u0a84\u0a82\u0003\u0002\u0002\u0002",
    "\u0a84\u0a85\u0003\u0002\u0002\u0002\u0a85\u0163\u0003\u0002\u0002\u0002",
    "\u0a86\u0a84\u0003\u0002\u0002\u0002\u0a87\u0a92\u0005\u0166\u00b4\u0002",
    "\u0a88\u0a8a\u0007\u00e4\u0002\u0002\u0a89\u0a88\u0003\u0002\u0002\u0002",
    "\u0a89\u0a8a\u0003\u0002\u0002\u0002\u0a8a\u0a8b\u0003\u0002\u0002\u0002",
    "\u0a8b\u0a8d\u0007\u001c\u0002\u0002\u0a8c\u0a8e\u0007\u00e4\u0002\u0002",
    "\u0a8d\u0a8c\u0003\u0002\u0002\u0002\u0a8d\u0a8e\u0003\u0002\u0002\u0002",
    "\u0a8e\u0a8f\u0003\u0002\u0002\u0002\u0a8f\u0a91\u0005\u0166\u00b4\u0002",
    "\u0a90\u0a89\u0003\u0002\u0002\u0002\u0a91\u0a94\u0003\u0002\u0002\u0002",
    "\u0a92\u0a90\u0003\u0002\u0002\u0002\u0a92\u0a93\u0003\u0002\u0002\u0002",
    "\u0a93\u0165\u0003\u0002\u0002\u0002\u0a94\u0a92\u0003\u0002\u0002\u0002",
    "\u0a95\u0a97\t\u0011\u0002\u0002\u0a96\u0a98\u0007\u00e4\u0002\u0002",
    "\u0a97\u0a96\u0003\u0002\u0002\u0002\u0a97\u0a98\u0003\u0002\u0002\u0002",
    "\u0a98\u0a9a\u0003\u0002\u0002\u0002\u0a99\u0a95\u0003\u0002\u0002\u0002",
    "\u0a9a\u0a9d\u0003\u0002\u0002\u0002\u0a9b\u0a99\u0003\u0002\u0002\u0002",
    "\u0a9b\u0a9c\u0003\u0002\u0002\u0002\u0a9c\u0a9e\u0003\u0002\u0002\u0002",
    "\u0a9d\u0a9b\u0003\u0002\u0002\u0002\u0a9e\u0a9f\u0005\u0168\u00b5\u0002",
    "\u0a9f\u0167\u0003\u0002\u0002\u0002\u0aa0\u0ad6\u0005\u016a\u00b6\u0002",
    "\u0aa1\u0aa3\u0007\u00e4\u0002\u0002\u0aa2\u0aa1\u0003\u0002\u0002\u0002",
    "\u0aa2\u0aa3\u0003\u0002\u0002\u0002\u0aa3\u0aa4\u0003\u0002\u0002\u0002",
    "\u0aa4\u0aa5\u0007\u0013\u0002\u0002\u0aa5\u0aa6\u0005\u0154\u00ab\u0002",
    "\u0aa6\u0aa7\u0007\u0014\u0002\u0002\u0aa7\u0ad5\u0003\u0002\u0002\u0002",
    "\u0aa8\u0aaa\u0007\u00e4\u0002\u0002\u0aa9\u0aa8\u0003\u0002\u0002\u0002",
    "\u0aa9\u0aaa\u0003\u0002\u0002\u0002\u0aaa\u0aab\u0003\u0002\u0002\u0002",
    "\u0aab\u0aad\u0007\u0013\u0002\u0002\u0aac\u0aae\u0005\u0154\u00ab\u0002",
    "\u0aad\u0aac\u0003\u0002\u0002\u0002\u0aad\u0aae\u0003\u0002\u0002\u0002",
    "\u0aae\u0aaf\u0003\u0002\u0002\u0002\u0aaf\u0ab1\u0007\u001a\u0002\u0002",
    "\u0ab0\u0ab2\u0005\u0154\u00ab\u0002\u0ab1\u0ab0\u0003\u0002\u0002\u0002",
    "\u0ab1\u0ab2\u0003\u0002\u0002\u0002\u0ab2\u0ab3\u0003\u0002\u0002\u0002",
    "\u0ab3\u0ad5\u0007\u0014\u0002\u0002\u0ab4\u0ab6\u0007\u00e4\u0002\u0002",
    "\u0ab5\u0ab4\u0003\u0002\u0002\u0002\u0ab5\u0ab6\u0003\u0002\u0002\u0002",
    "\u0ab6\u0ab7\u0003\u0002\u0002\u0002\u0ab7\u0ac5\u0007\u001d\u0002\u0002",
    "\u0ab8\u0ab9\u0007\u00e4\u0002\u0002\u0ab9\u0ac5\u0007Y\u0002\u0002",
    "\u0aba\u0abb\u0007\u00e4\u0002\u0002\u0abb\u0abc\u0007q\u0002\u0002",
    "\u0abc\u0abd\u0007\u00e4\u0002\u0002\u0abd\u0ac5\u0007K\u0002\u0002",
    "\u0abe\u0abf\u0007\u00e4\u0002\u0002\u0abf\u0ac0\u0007r\u0002\u0002",
    "\u0ac0\u0ac1\u0007\u00e4\u0002\u0002\u0ac1\u0ac5\u0007K\u0002\u0002",
    "\u0ac2\u0ac3\u0007\u00e4\u0002\u0002\u0ac3\u0ac5\u0007s\u0002\u0002",
    "\u0ac4\u0ab5\u0003\u0002\u0002\u0002\u0ac4\u0ab8\u0003\u0002\u0002\u0002",
    "\u0ac4\u0aba\u0003\u0002\u0002\u0002\u0ac4\u0abe\u0003\u0002\u0002\u0002",
    "\u0ac4\u0ac2\u0003\u0002\u0002\u0002\u0ac5\u0ac7\u0003\u0002\u0002\u0002",
    "\u0ac6\u0ac8\u0007\u00e4\u0002\u0002\u0ac7\u0ac6\u0003\u0002\u0002\u0002",
    "\u0ac7\u0ac8\u0003\u0002\u0002\u0002\u0ac8\u0ac9\u0003\u0002\u0002\u0002",
    "\u0ac9\u0ad5\u0005\u016a\u00b6\u0002\u0aca\u0acb\u0007\u00e4\u0002\u0002",
    "\u0acb\u0acc\u0007F\u0002\u0002\u0acc\u0acd\u0007\u00e4\u0002\u0002",
    "\u0acd\u0ad5\u0007t\u0002\u0002\u0ace\u0acf\u0007\u00e4\u0002\u0002",
    "\u0acf\u0ad0\u0007F\u0002\u0002\u0ad0\u0ad1\u0007\u00e4\u0002\u0002",
    "\u0ad1\u0ad2\u0007p\u0002\u0002\u0ad2\u0ad3\u0007\u00e4\u0002\u0002",
    "\u0ad3\u0ad5\u0007t\u0002\u0002\u0ad4\u0aa2\u0003\u0002\u0002\u0002",
    "\u0ad4\u0aa9\u0003\u0002\u0002\u0002\u0ad4\u0ac4\u0003\u0002\u0002\u0002",
    "\u0ad4\u0aca\u0003\u0002\u0002\u0002\u0ad4\u0ace\u0003\u0002\u0002\u0002",
    "\u0ad5\u0ad8\u0003\u0002\u0002\u0002\u0ad6\u0ad4\u0003\u0002\u0002\u0002",
    "\u0ad6\u0ad7\u0003\u0002\u0002\u0002\u0ad7\u0169\u0003\u0002\u0002\u0002",
    "\u0ad8\u0ad6\u0003\u0002\u0002\u0002\u0ad9\u0ae3\u0005\u0192\u00ca\u0002",
    "\u0ada\u0adc\u0007\u00e4\u0002\u0002\u0adb\u0ada\u0003\u0002\u0002\u0002",
    "\u0adb\u0adc\u0003\u0002\u0002\u0002\u0adc\u0adf\u0003\u0002\u0002\u0002",
    "\u0add\u0ae0\u0005\u01b2\u00da\u0002\u0ade\u0ae0\u0005\u014a\u00a6\u0002",
    "\u0adf\u0add\u0003\u0002\u0002\u0002\u0adf\u0ade\u0003\u0002\u0002\u0002",
    "\u0ae0\u0ae2\u0003\u0002\u0002\u0002\u0ae1\u0adb\u0003\u0002\u0002\u0002",
    "\u0ae2\u0ae5\u0003\u0002\u0002\u0002\u0ae3\u0ae1\u0003\u0002\u0002\u0002",
    "\u0ae3\u0ae4\u0003\u0002\u0002\u0002\u0ae4\u016b\u0003\u0002\u0002\u0002",
    "\u0ae5\u0ae3\u0003\u0002\u0002\u0002\u0ae6\u0ae8\u0005\u016e\u00b8\u0002",
    "\u0ae7\u0ae9\u0007\u00e4\u0002\u0002\u0ae8\u0ae7\u0003\u0002\u0002\u0002",
    "\u0ae8\u0ae9\u0003\u0002\u0002\u0002\u0ae9\u0aea\u0003\u0002\u0002\u0002",
    "\u0aea\u0aec\u0007\u0016\u0002\u0002\u0aeb\u0aed\u0007\u00e4\u0002\u0002",
    "\u0aec\u0aeb\u0003\u0002\u0002\u0002\u0aec\u0aed\u0003\u0002\u0002\u0002",
    "\u0aed\u0aee\u0003\u0002\u0002\u0002\u0aee\u0af0\u0005\u01a2\u00d2\u0002",
    "\u0aef\u0af1\u0007\u00e4\u0002\u0002\u0af0\u0aef\u0003\u0002\u0002\u0002",
    "\u0af0\u0af1\u0003\u0002\u0002\u0002\u0af1\u0af2\u0003\u0002\u0002\u0002",
    "\u0af2\u0af3\u0007\u0017\u0002\u0002\u0af3\u016d\u0003\u0002\u0002\u0002",
    "\u0af4\u0af5\u0007v\u0002\u0002\u0af5\u016f\u0003\u0002\u0002\u0002",
    "\u0af6\u0af8\u0005\u0172\u00ba\u0002\u0af7\u0af9\u0007\u00e4\u0002\u0002",
    "\u0af8\u0af7\u0003\u0002\u0002\u0002\u0af8\u0af9\u0003\u0002\u0002\u0002",
    "\u0af9\u0afa\u0003\u0002\u0002\u0002\u0afa\u0afc\u0007\u0016\u0002\u0002",
    "\u0afb\u0afd\u0007\u00e4\u0002\u0002\u0afc\u0afb\u0003\u0002\u0002\u0002",
    "\u0afc\u0afd\u0003\u0002\u0002\u0002\u0afd\u0afe\u0003\u0002\u0002\u0002",
    "\u0afe\u0b00\u0005\u0154\u00ab\u0002\u0aff\u0b01\u0007\u00e4\u0002\u0002",
    "\u0b00\u0aff\u0003\u0002\u0002\u0002\u0b00\u0b01\u0003\u0002\u0002\u0002",
    "\u0b01\u0b02\u0003\u0002\u0002\u0002\u0b02\u0b03\u0007\u0017\u0002\u0002",
    "\u0b03\u0171\u0003\u0002\u0002\u0002\u0b04\u0b05\u0007H\u0002\u0002",
    "\u0b05\u0173\u0003\u0002\u0002\u0002\u0b06\u0b08\u0005\u0176\u00bc\u0002",
    "\u0b07\u0b09\u0007\u00e4\u0002\u0002\u0b08\u0b07\u0003\u0002\u0002\u0002",
    "\u0b08\u0b09\u0003\u0002\u0002\u0002\u0b09\u0b0a\u0003\u0002\u0002\u0002",
    "\u0b0a\u0b0c\u0007\u0016\u0002\u0002\u0b0b\u0b0d\u0007\u00e4\u0002\u0002",
    "\u0b0c\u0b0b\u0003\u0002\u0002\u0002\u0b0c\u0b0d\u0003\u0002\u0002\u0002",
    "\u0b0d\u0b0e\u0003\u0002\u0002\u0002\u0b0e\u0b10\u0005\u01a2\u00d2\u0002",
    "\u0b0f\u0b11\u0007\u00e4\u0002\u0002\u0b10\u0b0f\u0003\u0002\u0002\u0002",
    "\u0b10\u0b11\u0003\u0002\u0002\u0002\u0b11\u0b12\u0003\u0002\u0002\u0002",
    "\u0b12\u0b13\u0007\u0017\u0002\u0002\u0b13\u0175\u0003\u0002\u0002\u0002",
    "\u0b14\u0b15\u0007?\u0002\u0002\u0b15\u0177\u0003\u0002\u0002\u0002",
    "\u0b16\u0b18\u0005\u017a\u00be\u0002\u0b17\u0b19\u0007\u00e4\u0002\u0002",
    "\u0b18\u0b17\u0003\u0002\u0002\u0002\u0b18\u0b19\u0003\u0002\u0002\u0002",
    "\u0b19\u0b1a\u0003\u0002\u0002\u0002\u0b1a\u0b1c\u0007\u0016\u0002\u0002",
    "\u0b1b\u0b1d\u0007\u00e4\u0002\u0002\u0b1c\u0b1b\u0003\u0002\u0002\u0002",
    "\u0b1c\u0b1d\u0003\u0002\u0002\u0002\u0b1d\u0b1e\u0003\u0002\u0002\u0002",
    "\u0b1e\u0b20\u0005\u01a2\u00d2\u0002\u0b1f\u0b21\u0007\u00e4\u0002\u0002",
    "\u0b20\u0b1f\u0003\u0002\u0002\u0002\u0b20\u0b21\u0003\u0002\u0002\u0002",
    "\u0b21\u0b22\u0003\u0002\u0002\u0002\u0b22\u0b23\u0007\u0017\u0002\u0002",
    "\u0b23\u0179\u0003\u0002\u0002\u0002\u0b24\u0b25\u0007x\u0002\u0002",
    "\u0b25\u017b\u0003\u0002\u0002\u0002\u0b26\u0b28\u0005\u017e\u00c0\u0002",
    "\u0b27\u0b29\u0007\u00e4\u0002\u0002\u0b28\u0b27\u0003\u0002\u0002\u0002",
    "\u0b28\u0b29\u0003\u0002\u0002\u0002\u0b29\u0b2a\u0003\u0002\u0002\u0002",
    "\u0b2a\u0b2c\u0007\u0016\u0002\u0002\u0b2b\u0b2d\u0007\u00e4\u0002\u0002",
    "\u0b2c\u0b2b\u0003\u0002\u0002\u0002\u0b2c\u0b2d\u0003\u0002\u0002\u0002",
    "\u0b2d\u0b2e\u0003\u0002\u0002\u0002\u0b2e\u0b30\u0005\u01a2\u00d2\u0002",
    "\u0b2f\u0b31\u0007\u00e4\u0002\u0002\u0b30\u0b2f\u0003\u0002\u0002\u0002",
    "\u0b30\u0b31\u0003\u0002\u0002\u0002\u0b31\u0b32\u0003\u0002\u0002\u0002",
    "\u0b32\u0b33\u0007\u0017\u0002\u0002\u0b33\u017d\u0003\u0002\u0002\u0002",
    "\u0b34\u0b35\u0007y\u0002\u0002\u0b35\u017f\u0003\u0002\u0002\u0002",
    "\u0b36\u0b38\u0005\u0182\u00c2\u0002\u0b37\u0b39\u0007\u00e4\u0002\u0002",
    "\u0b38\u0b37\u0003\u0002\u0002\u0002\u0b38\u0b39\u0003\u0002\u0002\u0002",
    "\u0b39\u0b3a\u0003\u0002\u0002\u0002\u0b3a\u0b3c\u0007\u0016\u0002\u0002",
    "\u0b3b\u0b3d\u0007\u00e4\u0002\u0002\u0b3c\u0b3b\u0003\u0002\u0002\u0002",
    "\u0b3c\u0b3d\u0003\u0002\u0002\u0002\u0b3d\u0b3e\u0003\u0002\u0002\u0002",
    "\u0b3e\u0b40\u0005\u01a2\u00d2\u0002\u0b3f\u0b41\u0007\u00e4\u0002\u0002",
    "\u0b40\u0b3f\u0003\u0002\u0002\u0002\u0b40\u0b41\u0003\u0002\u0002\u0002",
    "\u0b41\u0b42\u0003\u0002\u0002\u0002\u0b42\u0b43\u0007\u0017\u0002\u0002",
    "\u0b43\u0181\u0003\u0002\u0002\u0002\u0b44\u0b45\u0007z\u0002\u0002",
    "\u0b45\u0183\u0003\u0002\u0002\u0002\u0b46\u0b48\u0005\u0186\u00c4\u0002",
    "\u0b47\u0b49\u0007\u00e4\u0002\u0002\u0b48\u0b47\u0003\u0002\u0002\u0002",
    "\u0b48\u0b49\u0003\u0002\u0002\u0002\u0b49\u0b4a\u0003\u0002\u0002\u0002",
    "\u0b4a\u0b4c\u0007\u0016\u0002\u0002\u0b4b\u0b4d\u0007\u00e4\u0002\u0002",
    "\u0b4c\u0b4b\u0003\u0002\u0002\u0002\u0b4c\u0b4d\u0003\u0002\u0002\u0002",
    "\u0b4d\u0b4e\u0003\u0002\u0002\u0002\u0b4e\u0b57\u0005\u01a2\u00d2\u0002",
    "\u0b4f\u0b51\u0007\u00e4\u0002\u0002\u0b50\u0b4f\u0003\u0002\u0002\u0002",
    "\u0b50\u0b51\u0003\u0002\u0002\u0002\u0b51\u0b52\u0003\u0002\u0002\u0002",
    "\u0b52\u0b54\u0007\u0019\u0002\u0002\u0b53\u0b55\u0007\u00e4\u0002\u0002",
    "\u0b54\u0b53\u0003\u0002\u0002\u0002\u0b54\u0b55\u0003\u0002\u0002\u0002",
    "\u0b55\u0b56\u0003\u0002\u0002\u0002\u0b56\u0b58\u0005\u0154\u00ab\u0002",
    "\u0b57\u0b50\u0003\u0002\u0002\u0002\u0b57\u0b58\u0003\u0002\u0002\u0002",
    "\u0b58\u0b5a\u0003\u0002\u0002\u0002\u0b59\u0b5b\u0007\u00e4\u0002\u0002",
    "\u0b5a\u0b59\u0003\u0002\u0002\u0002\u0b5a\u0b5b\u0003\u0002\u0002\u0002",
    "\u0b5b\u0b5c\u0003\u0002\u0002\u0002\u0b5c\u0b5d\u0007\u0017\u0002\u0002",
    "\u0b5d\u0185\u0003\u0002\u0002\u0002\u0b5e\u0b5f\u0007w\u0002\u0002",
    "\u0b5f\u0187\u0003\u0002\u0002\u0002\u0b60\u0b62\u0005\u018a\u00c6\u0002",
    "\u0b61\u0b63\u0007\u00e4\u0002\u0002\u0b62\u0b61\u0003\u0002\u0002\u0002",
    "\u0b62\u0b63\u0003\u0002\u0002\u0002\u0b63\u0b64\u0003\u0002\u0002\u0002",
    "\u0b64\u0b66\u0007\u0016\u0002\u0002\u0b65\u0b67\u0007\u00e4\u0002\u0002",
    "\u0b66\u0b65\u0003\u0002\u0002\u0002\u0b66\u0b67\u0003\u0002\u0002\u0002",
    "\u0b67\u0b68\u0003\u0002\u0002\u0002\u0b68\u0b6a\u0005\u01b8\u00dd\u0002",
    "\u0b69\u0b6b\u0007\u00e4\u0002\u0002\u0b6a\u0b69\u0003\u0002\u0002\u0002",
    "\u0b6a\u0b6b\u0003\u0002\u0002\u0002\u0b6b\u0b6c\u0003\u0002\u0002\u0002",
    "\u0b6c\u0b6e\u0007\u000e\u0002\u0002\u0b6d\u0b6f\u0007\u00e4\u0002\u0002",
    "\u0b6e\u0b6d\u0003\u0002\u0002\u0002\u0b6e\u0b6f\u0003\u0002\u0002\u0002",
    "\u0b6f\u0b70\u0003\u0002\u0002\u0002\u0b70\u0b72\u0005\u0154\u00ab\u0002",
    "\u0b71\u0b73\u0007\u00e4\u0002\u0002\u0b72\u0b71\u0003\u0002\u0002\u0002",
    "\u0b72\u0b73\u0003\u0002\u0002\u0002\u0b73\u0b74\u0003\u0002\u0002\u0002",
    "\u0b74\u0b76\u0007\u0011\u0002\u0002\u0b75\u0b77\u0007\u00e4\u0002\u0002",
    "\u0b76\u0b75\u0003\u0002\u0002\u0002\u0b76\u0b77\u0003\u0002\u0002\u0002",
    "\u0b77\u0b78\u0003\u0002\u0002\u0002\u0b78\u0b7a\u0005\u01a4\u00d3\u0002",
    "\u0b79\u0b7b\u0007\u00e4\u0002\u0002\u0b7a\u0b79\u0003\u0002\u0002\u0002",
    "\u0b7a\u0b7b\u0003\u0002\u0002\u0002\u0b7b\u0b7c\u0003\u0002\u0002\u0002",
    "\u0b7c\u0b7e\u0007\u0019\u0002\u0002\u0b7d\u0b7f\u0007\u00e4\u0002\u0002",
    "\u0b7e\u0b7d\u0003\u0002\u0002\u0002\u0b7e\u0b7f\u0003\u0002\u0002\u0002",
    "\u0b7f\u0b80\u0003\u0002\u0002\u0002\u0b80\u0b82\u0005\u0154\u00ab\u0002",
    "\u0b81\u0b83\u0007\u00e4\u0002\u0002\u0b82\u0b81\u0003\u0002\u0002\u0002",
    "\u0b82\u0b83\u0003\u0002\u0002\u0002\u0b83\u0b84\u0003\u0002\u0002\u0002",
    "\u0b84\u0b85\u0007\u0017\u0002\u0002\u0b85\u0189\u0003\u0002\u0002\u0002",
    "\u0b86\u0b87\u0007}\u0002\u0002\u0b87\u018b\u0003\u0002\u0002\u0002",
    "\u0b88\u0b8a\u0005\u018e\u00c8\u0002\u0b89\u0b8b\u0007\u00e4\u0002\u0002",
    "\u0b8a\u0b89\u0003\u0002\u0002\u0002\u0b8a\u0b8b\u0003\u0002\u0002\u0002",
    "\u0b8b\u0b8c\u0003\u0002\u0002\u0002\u0b8c\u0b8e\u0007\u0016\u0002\u0002",
    "\u0b8d\u0b8f\u0007\u00e4\u0002\u0002\u0b8e\u0b8d\u0003\u0002\u0002\u0002",
    "\u0b8e\u0b8f\u0003\u0002\u0002\u0002\u0b8f\u0b90\u0003\u0002\u0002\u0002",
    "\u0b90\u0b92\u0005\u0132\u009a\u0002\u0b91\u0b93\u0007\u00e4\u0002\u0002",
    "\u0b92\u0b91\u0003\u0002\u0002\u0002\u0b92\u0b93\u0003\u0002\u0002\u0002",
    "\u0b93\u0b94\u0003\u0002\u0002\u0002\u0b94\u0b95\u0007\u0017\u0002\u0002",
    "\u0b95\u0ba5\u0003\u0002\u0002\u0002\u0b96\u0b98\u0005\u0190\u00c9\u0002",
    "\u0b97\u0b99\u0007\u00e4\u0002\u0002\u0b98\u0b97\u0003\u0002\u0002\u0002",
    "\u0b98\u0b99\u0003\u0002\u0002\u0002\u0b99\u0b9a\u0003\u0002\u0002\u0002",
    "\u0b9a\u0b9c\u0007\u0016\u0002\u0002\u0b9b\u0b9d\u0007\u00e4\u0002\u0002",
    "\u0b9c\u0b9b\u0003\u0002\u0002\u0002\u0b9c\u0b9d\u0003\u0002\u0002\u0002",
    "\u0b9d\u0b9e\u0003\u0002\u0002\u0002\u0b9e\u0ba0\u0005\u0132\u009a\u0002",
    "\u0b9f\u0ba1\u0007\u00e4\u0002\u0002\u0ba0\u0b9f\u0003\u0002\u0002\u0002",
    "\u0ba0\u0ba1\u0003\u0002\u0002\u0002\u0ba1\u0ba2\u0003\u0002\u0002\u0002",
    "\u0ba2\u0ba3\u0007\u0017\u0002\u0002\u0ba3\u0ba5\u0003\u0002\u0002\u0002",
    "\u0ba4\u0b88\u0003\u0002\u0002\u0002\u0ba4\u0b96\u0003\u0002\u0002\u0002",
    "\u0ba5\u018d\u0003\u0002\u0002\u0002\u0ba6\u0ba7\u0007k\u0002\u0002",
    "\u0ba7\u018f\u0003\u0002\u0002\u0002\u0ba8\u0ba9\u0007l\u0002\u0002",
    "\u0ba9\u0191\u0003\u0002\u0002\u0002\u0baa\u0bca\u0005\u0194\u00cb\u0002",
    "\u0bab\u0bca\u0005\u01ca\u00e6\u0002\u0bac\u0bca\u0005\u01b4\u00db\u0002",
    "\u0bad\u0baf\u0007u\u0002\u0002\u0bae\u0bb0\u0007\u00e4\u0002\u0002",
    "\u0baf\u0bae\u0003\u0002\u0002\u0002\u0baf\u0bb0\u0003\u0002\u0002\u0002",
    "\u0bb0\u0bb1\u0003\u0002\u0002\u0002\u0bb1\u0bb3\u0007\u0016\u0002\u0002",
    "\u0bb2\u0bb4\u0007\u00e4\u0002\u0002\u0bb3\u0bb2\u0003\u0002\u0002\u0002",
    "\u0bb3\u0bb4\u0003\u0002\u0002\u0002\u0bb4\u0bb5\u0003\u0002\u0002\u0002",
    "\u0bb5\u0bb7\u0007\u0015\u0002\u0002\u0bb6\u0bb8\u0007\u00e4\u0002\u0002",
    "\u0bb7\u0bb6\u0003\u0002\u0002\u0002\u0bb7\u0bb8\u0003\u0002\u0002\u0002",
    "\u0bb8\u0bb9\u0003\u0002\u0002\u0002\u0bb9\u0bca\u0007\u0017\u0002\u0002",
    "\u0bba\u0bca\u0005\u01ae\u00d8\u0002\u0bbb\u0bca\u0005\u01b0\u00d9\u0002",
    "\u0bbc\u0bca\u0005\u016c\u00b7\u0002\u0bbd\u0bca\u0005\u0184\u00c3\u0002",
    "\u0bbe\u0bca\u0005\u0188\u00c5\u0002\u0bbf\u0bca\u0005\u0174\u00bb\u0002",
    "\u0bc0\u0bca\u0005\u0178\u00bd\u0002\u0bc1\u0bca\u0005\u017c\u00bf\u0002",
    "\u0bc2\u0bca\u0005\u0180\u00c1\u0002\u0bc3\u0bca\u0005\u0170\u00b9\u0002",
    "\u0bc4\u0bca\u0005\u018c\u00c7\u0002\u0bc5\u0bca\u0005\u01a0\u00d1\u0002",
    "\u0bc6\u0bca\u0005\u019e\u00d0\u0002\u0bc7\u0bca\u0005\u01a6\u00d4\u0002",
    "\u0bc8\u0bca\u0005\u01b8\u00dd\u0002\u0bc9\u0baa\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bab\u0003\u0002\u0002\u0002\u0bc9\u0bac\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bad\u0003\u0002\u0002\u0002\u0bc9\u0bba\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bbb\u0003\u0002\u0002\u0002\u0bc9\u0bbc\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bbd\u0003\u0002\u0002\u0002\u0bc9\u0bbe\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bbf\u0003\u0002\u0002\u0002\u0bc9\u0bc0\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bc1\u0003\u0002\u0002\u0002\u0bc9\u0bc2\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bc3\u0003\u0002\u0002\u0002\u0bc9\u0bc4\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bc5\u0003\u0002\u0002\u0002\u0bc9\u0bc6\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bc7\u0003\u0002\u0002\u0002\u0bc9\u0bc8\u0003\u0002\u0002\u0002",
    "\u0bca\u0193\u0003\u0002\u0002\u0002\u0bcb\u0bd3\u0005\u01ba\u00de\u0002",
    "\u0bcc\u0bd3\u0005\u0196\u00cc\u0002\u0bcd\u0bd3\u0005\u0198\u00cd\u0002",
    "\u0bce\u0bd3\u0007t\u0002\u0002\u0bcf\u0bd3\u0005\u01bc\u00df\u0002",
    "\u0bd0\u0bd3\u0005\u019a\u00ce\u0002\u0bd1\u0bd3\u0005\u01be\u00e0\u0002",
    "\u0bd2\u0bcb\u0003\u0002\u0002\u0002\u0bd2\u0bcc\u0003\u0002\u0002\u0002",
    "\u0bd2\u0bcd\u0003\u0002\u0002\u0002\u0bd2\u0bce\u0003\u0002\u0002\u0002",
    "\u0bd2\u0bcf\u0003\u0002\u0002\u0002\u0bd2\u0bd0\u0003\u0002\u0002\u0002",
    "\u0bd2\u0bd1\u0003\u0002\u0002\u0002\u0bd3\u0195\u0003\u0002\u0002\u0002",
    "\u0bd4\u0bd5\u0007\u00d1\u0002\u0002\u0bd5\u0197\u0003\u0002\u0002\u0002",
    "\u0bd6\u0bd7\t\u0012\u0002\u0002\u0bd7\u0199\u0003\u0002\u0002\u0002",
    "\u0bd8\u0bda\u0007\u0013\u0002\u0002\u0bd9\u0bdb\u0007\u00e4\u0002\u0002",
    "\u0bda\u0bd9\u0003\u0002\u0002\u0002\u0bda\u0bdb\u0003\u0002\u0002\u0002",
    "\u0bdb\u0bed\u0003\u0002\u0002\u0002\u0bdc\u0bde\u0005\u0154\u00ab\u0002",
    "\u0bdd\u0bdf\u0007\u00e4\u0002\u0002\u0bde\u0bdd\u0003\u0002\u0002\u0002",
    "\u0bde\u0bdf\u0003\u0002\u0002\u0002\u0bdf\u0bea\u0003\u0002\u0002\u0002",
    "\u0be0\u0be2\u0007\u0011\u0002\u0002\u0be1\u0be3\u0007\u00e4\u0002\u0002",
    "\u0be2\u0be1\u0003\u0002\u0002\u0002\u0be2\u0be3\u0003\u0002\u0002\u0002",
    "\u0be3\u0be4\u0003\u0002\u0002\u0002\u0be4\u0be6\u0005\u0154\u00ab\u0002",
    "\u0be5\u0be7\u0007\u00e4\u0002\u0002\u0be6\u0be5\u0003\u0002\u0002\u0002",
    "\u0be6\u0be7\u0003\u0002\u0002\u0002\u0be7\u0be9\u0003\u0002\u0002\u0002",
    "\u0be8\u0be0\u0003\u0002\u0002\u0002\u0be9\u0bec\u0003\u0002\u0002\u0002",
    "\u0bea\u0be8\u0003\u0002\u0002\u0002\u0bea\u0beb\u0003\u0002\u0002\u0002",
    "\u0beb\u0bee\u0003\u0002\u0002\u0002\u0bec\u0bea\u0003\u0002\u0002\u0002",
    "\u0bed\u0bdc\u0003\u0002\u0002\u0002\u0bed\u0bee\u0003\u0002\u0002\u0002",
    "\u0bee\u0bef\u0003\u0002\u0002\u0002\u0bef\u0bf0\u0007\u0014\u0002\u0002",
    "\u0bf0\u019b\u0003\u0002\u0002\u0002\u0bf1\u0bf3\u0007\u000e\u0002\u0002",
    "\u0bf2\u0bf4\u0007\u00e4\u0002\u0002\u0bf3\u0bf2\u0003\u0002\u0002\u0002",
    "\u0bf3\u0bf4\u0003\u0002\u0002\u0002\u0bf4\u0bf5\u0003\u0002\u0002\u0002",
    "\u0bf5\u0c15\u0005\u0160\u00b1\u0002\u0bf6\u0bf8\u0007\u001e\u0002\u0002",
    "\u0bf7\u0bf9\u0007\u00e4\u0002\u0002\u0bf8\u0bf7\u0003\u0002\u0002\u0002",
    "\u0bf8\u0bf9\u0003\u0002\u0002\u0002\u0bf9\u0bfa\u0003\u0002\u0002\u0002",
    "\u0bfa\u0c15\u0005\u0160\u00b1\u0002\u0bfb\u0bfd\u0007\u001f\u0002\u0002",
    "\u0bfc\u0bfe\u0007\u00e4\u0002\u0002\u0bfd\u0bfc\u0003\u0002\u0002\u0002",
    "\u0bfd\u0bfe\u0003\u0002\u0002\u0002\u0bfe\u0bff\u0003\u0002\u0002\u0002",
    "\u0bff\u0c15\u0005\u0160\u00b1\u0002\u0c00\u0c02\u0007 \u0002\u0002",
    "\u0c01\u0c03\u0007\u00e4\u0002\u0002\u0c02\u0c01\u0003\u0002\u0002\u0002",
    "\u0c02\u0c03\u0003\u0002\u0002\u0002\u0c03\u0c04\u0003\u0002\u0002\u0002",
    "\u0c04\u0c15\u0005\u0160\u00b1\u0002\u0c05\u0c07\u0007!\u0002\u0002",
    "\u0c06\u0c08\u0007\u00e4\u0002\u0002\u0c07\u0c06\u0003\u0002\u0002\u0002",
    "\u0c07\u0c08\u0003\u0002\u0002\u0002\u0c08\u0c09\u0003\u0002\u0002\u0002",
    "\u0c09\u0c15\u0005\u0160\u00b1\u0002\u0c0a\u0c0c\u0007\"\u0002\u0002",
    "\u0c0b\u0c0d\u0007\u00e4\u0002\u0002\u0c0c\u0c0b\u0003\u0002\u0002\u0002",
    "\u0c0c\u0c0d\u0003\u0002\u0002\u0002\u0c0d\u0c0e\u0003\u0002\u0002\u0002",
    "\u0c0e\u0c15\u0005\u0160\u00b1\u0002\u0c0f\u0c11\u0007#\u0002\u0002",
    "\u0c10\u0c12\u0007\u00e4\u0002\u0002\u0c11\u0c10\u0003\u0002\u0002\u0002",
    "\u0c11\u0c12\u0003\u0002\u0002\u0002\u0c12\u0c13\u0003\u0002\u0002\u0002",
    "\u0c13\u0c15\u0005\u0160\u00b1\u0002\u0c14\u0bf1\u0003\u0002\u0002\u0002",
    "\u0c14\u0bf6\u0003\u0002\u0002\u0002\u0c14\u0bfb\u0003\u0002\u0002\u0002",
    "\u0c14\u0c00\u0003\u0002\u0002\u0002\u0c14\u0c05\u0003\u0002\u0002\u0002",
    "\u0c14\u0c0a\u0003\u0002\u0002\u0002\u0c14\u0c0f\u0003\u0002\u0002\u0002",
    "\u0c15\u019d\u0003\u0002\u0002\u0002\u0c16\u0c18\u0007\u0016\u0002\u0002",
    "\u0c17\u0c19\u0007\u00e4\u0002\u0002\u0c18\u0c17\u0003\u0002\u0002\u0002",
    "\u0c18\u0c19\u0003\u0002\u0002\u0002\u0c19\u0c1a\u0003\u0002\u0002\u0002",
    "\u0c1a\u0c1c\u0005\u0154\u00ab\u0002\u0c1b\u0c1d\u0007\u00e4\u0002\u0002",
    "\u0c1c\u0c1b\u0003\u0002\u0002\u0002\u0c1c\u0c1d\u0003\u0002\u0002\u0002",
    "\u0c1d\u0c1e\u0003\u0002\u0002\u0002\u0c1e\u0c1f\u0007\u0017\u0002\u0002",
    "\u0c1f\u019f\u0003\u0002\u0002\u0002\u0c20\u0c25\u0005\u0134\u009b\u0002",
    "\u0c21\u0c23\u0007\u00e4\u0002\u0002\u0c22\u0c21\u0003\u0002\u0002\u0002",
    "\u0c22\u0c23\u0003\u0002\u0002\u0002\u0c23\u0c24\u0003\u0002\u0002\u0002",
    "\u0c24\u0c26\u0005\u0136\u009c\u0002\u0c25\u0c22\u0003\u0002\u0002\u0002",
    "\u0c26\u0c27\u0003\u0002\u0002\u0002\u0c27\u0c25\u0003\u0002\u0002\u0002",
    "\u0c27\u0c28\u0003\u0002\u0002\u0002\u0c28\u01a1\u0003\u0002\u0002\u0002",
    "\u0c29\u0c2e\u0005\u01a4\u00d3\u0002\u0c2a\u0c2c\u0007\u00e4\u0002\u0002",
    "\u0c2b\u0c2a\u0003\u0002\u0002\u0002\u0c2b\u0c2c\u0003\u0002\u0002\u0002",
    "\u0c2c\u0c2d\u0003\u0002\u0002\u0002\u0c2d\u0c2f\u0005\u012a\u0096\u0002",
    "\u0c2e\u0c2b\u0003\u0002\u0002\u0002\u0c2e\u0c2f\u0003\u0002\u0002\u0002",
    "\u0c2f\u01a3\u0003\u0002\u0002\u0002\u0c30\u0c31\u0005\u01b8\u00dd\u0002",
    "\u0c31\u0c32\u0007\u00e4\u0002\u0002\u0c32\u0c33\u0007Y\u0002\u0002",
    "\u0c33\u0c34\u0007\u00e4\u0002\u0002\u0c34\u0c35\u0005\u0154\u00ab\u0002",
    "\u0c35\u01a5\u0003\u0002\u0002\u0002\u0c36\u0c38\u0005\u01a8\u00d5\u0002",
    "\u0c37\u0c39\u0007\u00e4\u0002\u0002\u0c38\u0c37\u0003\u0002\u0002\u0002",
    "\u0c38\u0c39\u0003\u0002\u0002\u0002\u0c39\u0c3a\u0003\u0002\u0002\u0002",
    "\u0c3a\u0c3c\u0007\u0016\u0002\u0002\u0c3b\u0c3d\u0007\u00e4\u0002\u0002",
    "\u0c3c\u0c3b\u0003\u0002\u0002\u0002\u0c3c\u0c3d\u0003\u0002\u0002\u0002",
    "\u0c3d\u0c42\u0003\u0002\u0002\u0002\u0c3e\u0c40\u0007Z\u0002\u0002",
    "\u0c3f\u0c41\u0007\u00e4\u0002\u0002\u0c40\u0c3f\u0003\u0002\u0002\u0002",
    "\u0c40\u0c41\u0003\u0002\u0002\u0002\u0c41\u0c43\u0003\u0002\u0002\u0002",
    "\u0c42\u0c3e\u0003\u0002\u0002\u0002\u0c42\u0c43\u0003\u0002\u0002\u0002",
    "\u0c43\u0c55\u0003\u0002\u0002\u0002\u0c44\u0c46\u0005\u0154\u00ab\u0002",
    "\u0c45\u0c47\u0007\u00e4\u0002\u0002\u0c46\u0c45\u0003\u0002\u0002\u0002",
    "\u0c46\u0c47\u0003\u0002\u0002\u0002\u0c47\u0c52\u0003\u0002\u0002\u0002",
    "\u0c48\u0c4a\u0007\u0011\u0002\u0002\u0c49\u0c4b\u0007\u00e4\u0002\u0002",
    "\u0c4a\u0c49\u0003\u0002\u0002\u0002\u0c4a\u0c4b\u0003\u0002\u0002\u0002",
    "\u0c4b\u0c4c\u0003\u0002\u0002\u0002\u0c4c\u0c4e\u0005\u0154\u00ab\u0002",
    "\u0c4d\u0c4f\u0007\u00e4\u0002\u0002\u0c4e\u0c4d\u0003\u0002\u0002\u0002",
    "\u0c4e\u0c4f\u0003\u0002\u0002\u0002\u0c4f\u0c51\u0003\u0002\u0002\u0002",
    "\u0c50\u0c48\u0003\u0002\u0002\u0002\u0c51\u0c54\u0003\u0002\u0002\u0002",
    "\u0c52\u0c50\u0003\u0002\u0002\u0002\u0c52\u0c53\u0003\u0002\u0002\u0002",
    "\u0c53\u0c56\u0003\u0002\u0002\u0002\u0c54\u0c52\u0003\u0002\u0002\u0002",
    "\u0c55\u0c44\u0003\u0002\u0002\u0002\u0c55\u0c56\u0003\u0002\u0002\u0002",
    "\u0c56\u0c57\u0003\u0002\u0002\u0002\u0c57\u0c58\u0007\u0017\u0002\u0002",
    "\u0c58\u01a7\u0003\u0002\u0002\u0002\u0c59\u0c5a\u0005\u01de\u00f0\u0002",
    "\u0c5a\u0c5b\u0005\u01aa\u00d6\u0002\u0c5b\u01a9\u0003\u0002\u0002\u0002",
    "\u0c5c\u0c5d\t\u0013\u0002\u0002\u0c5d\u01ab\u0003\u0002\u0002\u0002",
    "\u0c5e\u0c5f\u0005\u01e6\u00f4\u0002\u0c5f\u01ad\u0003\u0002\u0002\u0002",
    "\u0c60\u0c62\u0007\u0013\u0002\u0002\u0c61\u0c63\u0007\u00e4\u0002\u0002",
    "\u0c62\u0c61\u0003\u0002\u0002\u0002\u0c62\u0c63\u0003\u0002\u0002\u0002",
    "\u0c63\u0c64\u0003\u0002\u0002\u0002\u0c64\u0c6d\u0005\u01a2\u00d2\u0002",
    "\u0c65\u0c67\u0007\u00e4\u0002\u0002\u0c66\u0c65\u0003\u0002\u0002\u0002",
    "\u0c66\u0c67\u0003\u0002\u0002\u0002\u0c67\u0c68\u0003\u0002\u0002\u0002",
    "\u0c68\u0c6a\u0007\u0019\u0002\u0002\u0c69\u0c6b\u0007\u00e4\u0002\u0002",
    "\u0c6a\u0c69\u0003\u0002\u0002\u0002\u0c6a\u0c6b\u0003\u0002\u0002\u0002",
    "\u0c6b\u0c6c\u0003\u0002\u0002\u0002\u0c6c\u0c6e\u0005\u0154\u00ab\u0002",
    "\u0c6d\u0c66\u0003\u0002\u0002\u0002\u0c6d\u0c6e\u0003\u0002\u0002\u0002",
    "\u0c6e\u0c70\u0003\u0002\u0002\u0002\u0c6f\u0c71\u0007\u00e4\u0002\u0002",
    "\u0c70\u0c6f\u0003\u0002\u0002\u0002\u0c70\u0c71\u0003\u0002\u0002\u0002",
    "\u0c71\u0c72\u0003\u0002\u0002\u0002\u0c72\u0c73\u0007\u0014\u0002\u0002",
    "\u0c73\u01af\u0003\u0002\u0002\u0002\u0c74\u0c76\u0007\u0013\u0002\u0002",
    "\u0c75\u0c77\u0007\u00e4\u0002\u0002\u0c76\u0c75\u0003\u0002\u0002\u0002",
    "\u0c76\u0c77\u0003\u0002\u0002\u0002\u0c77\u0c80\u0003\u0002\u0002\u0002",
    "\u0c78\u0c7a\u0005\u01b8\u00dd\u0002\u0c79\u0c7b\u0007\u00e4\u0002\u0002",
    "\u0c7a\u0c79\u0003\u0002\u0002\u0002\u0c7a\u0c7b\u0003\u0002\u0002\u0002",
    "\u0c7b\u0c7c\u0003\u0002\u0002\u0002\u0c7c\u0c7e\u0007\u000e\u0002\u0002",
    "\u0c7d\u0c7f\u0007\u00e4\u0002\u0002\u0c7e\u0c7d\u0003\u0002\u0002\u0002",
    "\u0c7e\u0c7f\u0003\u0002\u0002\u0002\u0c7f\u0c81\u0003\u0002\u0002\u0002",
    "\u0c80\u0c78\u0003\u0002\u0002\u0002\u0c80\u0c81\u0003\u0002\u0002\u0002",
    "\u0c81\u0c82\u0003\u0002\u0002\u0002\u0c82\u0c84\u0005\u01a0\u00d1\u0002",
    "\u0c83\u0c85\u0007\u00e4\u0002\u0002\u0c84\u0c83\u0003\u0002\u0002\u0002",
    "\u0c84\u0c85\u0003\u0002\u0002\u0002\u0c85\u0c8e\u0003\u0002\u0002\u0002",
    "\u0c86\u0c88\u0007j\u0002\u0002\u0c87\u0c89\u0007\u00e4\u0002\u0002",
    "\u0c88\u0c87\u0003\u0002\u0002\u0002\u0c88\u0c89\u0003\u0002\u0002\u0002",
    "\u0c89\u0c8a\u0003\u0002\u0002\u0002\u0c8a\u0c8c\u0005\u0154\u00ab\u0002",
    "\u0c8b\u0c8d\u0007\u00e4\u0002\u0002\u0c8c\u0c8b\u0003\u0002\u0002\u0002",
    "\u0c8c\u0c8d\u0003\u0002\u0002\u0002\u0c8d\u0c8f\u0003\u0002\u0002\u0002",
    "\u0c8e\u0c86\u0003\u0002\u0002\u0002\u0c8e\u0c8f\u0003\u0002\u0002\u0002",
    "\u0c8f\u0c90\u0003\u0002\u0002\u0002\u0c90\u0c92\u0007\u0019\u0002\u0002",
    "\u0c91\u0c93\u0007\u00e4\u0002\u0002\u0c92\u0c91\u0003\u0002\u0002\u0002",
    "\u0c92\u0c93\u0003\u0002\u0002\u0002\u0c93\u0c94\u0003\u0002\u0002\u0002",
    "\u0c94\u0c96\u0005\u0154\u00ab\u0002\u0c95\u0c97\u0007\u00e4\u0002\u0002",
    "\u0c96\u0c95\u0003\u0002\u0002\u0002\u0c96\u0c97\u0003\u0002\u0002\u0002",
    "\u0c97\u0c98\u0003\u0002\u0002\u0002\u0c98\u0c99\u0007\u0014\u0002\u0002",
    "\u0c99\u01b1\u0003\u0002\u0002\u0002\u0c9a\u0c9c\u0007\t\u0002\u0002",
    "\u0c9b\u0c9d\u0007\u00e4\u0002\u0002\u0c9c\u0c9b\u0003\u0002\u0002\u0002",
    "\u0c9c\u0c9d\u0003\u0002\u0002\u0002\u0c9d\u0c9e\u0003\u0002\u0002\u0002",
    "\u0c9e\u0c9f\u0005\u01d8\u00ed\u0002\u0c9f\u01b3\u0003\u0002\u0002\u0002",
    "\u0ca0\u0ca5\u0007~\u0002\u0002\u0ca1\u0ca3\u0007\u00e4\u0002\u0002",
    "\u0ca2\u0ca1\u0003\u0002\u0002\u0002\u0ca2\u0ca3\u0003\u0002\u0002\u0002",
    "\u0ca3\u0ca4\u0003\u0002\u0002\u0002\u0ca4\u0ca6\u0005\u01b6\u00dc\u0002",
    "\u0ca5\u0ca2\u0003\u0002\u0002\u0002\u0ca6\u0ca7\u0003\u0002\u0002\u0002",
    "\u0ca7\u0ca5\u0003\u0002\u0002\u0002\u0ca7\u0ca8\u0003\u0002\u0002\u0002",
    "\u0ca8\u0cb7\u0003\u0002\u0002\u0002\u0ca9\u0cab\u0007~\u0002\u0002",
    "\u0caa\u0cac\u0007\u00e4\u0002\u0002\u0cab\u0caa\u0003\u0002\u0002\u0002",
    "\u0cab\u0cac\u0003\u0002\u0002\u0002\u0cac\u0cad\u0003\u0002\u0002\u0002",
    "\u0cad\u0cb2\u0005\u0154\u00ab\u0002\u0cae\u0cb0\u0007\u00e4\u0002\u0002",
    "\u0caf\u0cae\u0003\u0002\u0002\u0002\u0caf\u0cb0\u0003\u0002\u0002\u0002",
    "\u0cb0\u0cb1\u0003\u0002\u0002\u0002\u0cb1\u0cb3\u0005\u01b6\u00dc\u0002",
    "\u0cb2\u0caf\u0003\u0002\u0002\u0002\u0cb3\u0cb4\u0003\u0002\u0002\u0002",
    "\u0cb4\u0cb2\u0003\u0002\u0002\u0002\u0cb4\u0cb5\u0003\u0002\u0002\u0002",
    "\u0cb5\u0cb7\u0003\u0002\u0002\u0002\u0cb6\u0ca0\u0003\u0002\u0002\u0002",
    "\u0cb6\u0ca9\u0003\u0002\u0002\u0002\u0cb7\u0cc0\u0003\u0002\u0002\u0002",
    "\u0cb8\u0cba\u0007\u00e4\u0002\u0002\u0cb9\u0cb8\u0003\u0002\u0002\u0002",
    "\u0cb9\u0cba\u0003\u0002\u0002\u0002\u0cba\u0cbb\u0003\u0002\u0002\u0002",
    "\u0cbb\u0cbd\u0007\u007f\u0002\u0002\u0cbc\u0cbe\u0007\u00e4\u0002\u0002",
    "\u0cbd\u0cbc\u0003\u0002\u0002\u0002\u0cbd\u0cbe\u0003\u0002\u0002\u0002",
    "\u0cbe\u0cbf\u0003\u0002\u0002\u0002\u0cbf\u0cc1\u0005\u0154\u00ab\u0002",
    "\u0cc0\u0cb9\u0003\u0002\u0002\u0002\u0cc0\u0cc1\u0003\u0002\u0002\u0002",
    "\u0cc1\u0cc3\u0003\u0002\u0002\u0002\u0cc2\u0cc4\u0007\u00e4\u0002\u0002",
    "\u0cc3\u0cc2\u0003\u0002\u0002\u0002\u0cc3\u0cc4\u0003\u0002\u0002\u0002",
    "\u0cc4\u0cc5\u0003\u0002\u0002\u0002\u0cc5\u0cc6\u0007\u0080\u0002\u0002",
    "\u0cc6\u01b5\u0003\u0002\u0002\u0002\u0cc7\u0cc9\u0007\u0081\u0002\u0002",
    "\u0cc8\u0cca\u0007\u00e4\u0002\u0002\u0cc9\u0cc8\u0003\u0002\u0002\u0002",
    "\u0cc9\u0cca\u0003\u0002\u0002\u0002\u0cca\u0ccb\u0003\u0002\u0002\u0002",
    "\u0ccb\u0ccd\u0005\u0154\u00ab\u0002\u0ccc\u0cce\u0007\u00e4\u0002\u0002",
    "\u0ccd\u0ccc\u0003\u0002\u0002\u0002\u0ccd\u0cce\u0003\u0002\u0002\u0002",
    "\u0cce\u0ccf\u0003\u0002\u0002\u0002\u0ccf\u0cd1\u0007\u0082\u0002\u0002",
    "\u0cd0\u0cd2\u0007\u00e4\u0002\u0002\u0cd1\u0cd0\u0003\u0002\u0002\u0002",
    "\u0cd1\u0cd2\u0003\u0002\u0002\u0002\u0cd2\u0cd3\u0003\u0002\u0002\u0002",
    "\u0cd3\u0cd4\u0005\u0154\u00ab\u0002\u0cd4\u01b7\u0003\u0002\u0002\u0002",
    "\u0cd5\u0cd6\u0005\u01e6\u00f4\u0002\u0cd6\u01b9\u0003\u0002\u0002\u0002",
    "\u0cd7\u0cda\u0005\u01dc\u00ef\u0002\u0cd8\u0cda\u0005\u01da\u00ee\u0002",
    "\u0cd9\u0cd7\u0003\u0002\u0002\u0002\u0cd9\u0cd8\u0003\u0002\u0002\u0002",
    "\u0cda\u01bb\u0003\u0002\u0002\u0002\u0cdb\u0cdd\u0007\u0010\u0002\u0002",
    "\u0cdc\u0cde\u0007\u00e4\u0002\u0002\u0cdd\u0cdc\u0003\u0002\u0002\u0002",
    "\u0cdd\u0cde\u0003\u0002\u0002\u0002\u0cde\u0cf0\u0003\u0002\u0002\u0002",
    "\u0cdf\u0ce1\u0005\u01c2\u00e2\u0002\u0ce0\u0ce2\u0007\u00e4\u0002\u0002",
    "\u0ce1\u0ce0\u0003\u0002\u0002\u0002\u0ce1\u0ce2\u0003\u0002\u0002\u0002",
    "\u0ce2\u0ced\u0003\u0002\u0002\u0002\u0ce3\u0ce5\u0007\u0011\u0002\u0002",
    "\u0ce4\u0ce6\u0007\u00e4\u0002\u0002\u0ce5\u0ce4\u0003\u0002\u0002\u0002",
    "\u0ce5\u0ce6\u0003\u0002\u0002\u0002\u0ce6\u0ce7\u0003\u0002\u0002\u0002",
    "\u0ce7\u0ce9\u0005\u01c2\u00e2\u0002\u0ce8\u0cea\u0007\u00e4\u0002\u0002",
    "\u0ce9\u0ce8\u0003\u0002\u0002\u0002\u0ce9\u0cea\u0003\u0002\u0002\u0002",
    "\u0cea\u0cec\u0003\u0002\u0002\u0002\u0ceb\u0ce3\u0003\u0002\u0002\u0002",
    "\u0cec\u0cef\u0003\u0002\u0002\u0002\u0ced\u0ceb\u0003\u0002\u0002\u0002",
    "\u0ced\u0cee\u0003\u0002\u0002\u0002\u0cee\u0cf1\u0003\u0002\u0002\u0002",
    "\u0cef\u0ced\u0003\u0002\u0002\u0002\u0cf0\u0cdf\u0003\u0002\u0002\u0002",
    "\u0cf0\u0cf1\u0003\u0002\u0002\u0002\u0cf1\u0cf2\u0003\u0002\u0002\u0002",
    "\u0cf2\u0cf3\u0007\u0012\u0002\u0002\u0cf3\u01bd\u0003\u0002\u0002\u0002",
    "\u0cf4\u0cf6\u0005\u01b8\u00dd\u0002\u0cf5\u0cf7\u0007\u00e4\u0002\u0002",
    "\u0cf6\u0cf5\u0003\u0002\u0002\u0002\u0cf6\u0cf7\u0003\u0002\u0002\u0002",
    "\u0cf7\u0cf8\u0003\u0002\u0002\u0002\u0cf8\u0cfa\u0007\u0010\u0002\u0002",
    "\u0cf9\u0cfb\u0007\u00e4\u0002\u0002\u0cfa\u0cf9\u0003\u0002\u0002\u0002",
    "\u0cfa\u0cfb\u0003\u0002\u0002\u0002\u0cfb\u0cfd\u0003\u0002\u0002\u0002",
    "\u0cfc\u0cfe\u0005\u01c0\u00e1\u0002\u0cfd\u0cfc\u0003\u0002\u0002\u0002",
    "\u0cfd\u0cfe\u0003\u0002\u0002\u0002\u0cfe\u0d09\u0003\u0002\u0002\u0002",
    "\u0cff\u0d01\u0007\u00e4\u0002\u0002\u0d00\u0cff\u0003\u0002\u0002\u0002",
    "\u0d00\u0d01\u0003\u0002\u0002\u0002\u0d01\u0d02\u0003\u0002\u0002\u0002",
    "\u0d02\u0d04\u0007\u0011\u0002\u0002\u0d03\u0d05\u0007\u00e4\u0002\u0002",
    "\u0d04\u0d03\u0003\u0002\u0002\u0002\u0d04\u0d05\u0003\u0002\u0002\u0002",
    "\u0d05\u0d06\u0003\u0002\u0002\u0002\u0d06\u0d08\u0005\u01c0\u00e1\u0002",
    "\u0d07\u0d00\u0003\u0002\u0002\u0002\u0d08\u0d0b\u0003\u0002\u0002\u0002",
    "\u0d09\u0d07\u0003\u0002\u0002\u0002\u0d09\u0d0a\u0003\u0002\u0002\u0002",
    "\u0d0a\u0d0d\u0003\u0002\u0002\u0002\u0d0b\u0d09\u0003\u0002\u0002\u0002",
    "\u0d0c\u0d0e\u0007\u00e4\u0002\u0002\u0d0d\u0d0c\u0003\u0002\u0002\u0002",
    "\u0d0d\u0d0e\u0003\u0002\u0002\u0002\u0d0e\u0d0f\u0003\u0002\u0002\u0002",
    "\u0d0f\u0d10\u0007\u0012\u0002\u0002\u0d10\u01bf\u0003\u0002\u0002\u0002",
    "\u0d11\u0d16\u0005\u01c2\u00e2\u0002\u0d12\u0d16\u0005\u01c4\u00e3\u0002",
    "\u0d13\u0d16\u0005\u01c6\u00e4\u0002\u0d14\u0d16\u0005\u01c8\u00e5\u0002",
    "\u0d15\u0d11\u0003\u0002\u0002\u0002\u0d15\u0d12\u0003\u0002\u0002\u0002",
    "\u0d15\u0d13\u0003\u0002\u0002\u0002\u0d15\u0d14\u0003\u0002\u0002\u0002",
    "\u0d16\u01c1\u0003\u0002\u0002\u0002\u0d17\u0d19\u0005\u01d8\u00ed\u0002",
    "\u0d18\u0d1a\u0007\u00e4\u0002\u0002\u0d19\u0d18\u0003\u0002\u0002\u0002",
    "\u0d19\u0d1a\u0003\u0002\u0002\u0002\u0d1a\u0d1b\u0003\u0002\u0002\u0002",
    "\u0d1b\u0d1d\u0007\u0004\u0002\u0002\u0d1c\u0d1e\u0007\u00e4\u0002\u0002",
    "\u0d1d\u0d1c\u0003\u0002\u0002\u0002\u0d1d\u0d1e\u0003\u0002\u0002\u0002",
    "\u0d1e\u0d1f\u0003\u0002\u0002\u0002\u0d1f\u0d20\u0005\u0154\u00ab\u0002",
    "\u0d20\u01c3\u0003\u0002\u0002\u0002\u0d21\u0d22\u0007\t\u0002\u0002",
    "\u0d22\u0d23\u0005\u01b8\u00dd\u0002\u0d23\u01c5\u0003\u0002\u0002\u0002",
    "\u0d24\u0d25\u0005\u01b8\u00dd\u0002\u0d25\u01c7\u0003\u0002\u0002\u0002",
    "\u0d26\u0d27\u0007\t\u0002\u0002\u0d27\u0d28\u0007\u0015\u0002\u0002",
    "\u0d28\u01c9\u0003\u0002\u0002\u0002\u0d29\u0d2c\u0005\u01cc\u00e7\u0002",
    "\u0d2a\u0d2c\u0005\u01ce\u00e8\u0002\u0d2b\u0d29\u0003\u0002\u0002\u0002",
    "\u0d2b\u0d2a\u0003\u0002\u0002\u0002\u0d2c\u01cb\u0003\u0002\u0002\u0002",
    "\u0d2d\u0d2f\u0007\u0010\u0002\u0002\u0d2e\u0d30\u0007\u00e4\u0002\u0002",
    "\u0d2f\u0d2e\u0003\u0002\u0002\u0002\u0d2f\u0d30\u0003\u0002\u0002\u0002",
    "\u0d30\u0d31\u0003\u0002\u0002\u0002\u0d31\u0d33\u0005\u01d0\u00e9\u0002",
    "\u0d32\u0d34\u0007\u00e4\u0002\u0002\u0d33\u0d32\u0003\u0002\u0002\u0002",
    "\u0d33\u0d34\u0003\u0002\u0002\u0002\u0d34\u0d35\u0003\u0002\u0002\u0002",
    "\u0d35\u0d36\u0007\u0012\u0002\u0002\u0d36\u01cd\u0003\u0002\u0002\u0002",
    "\u0d37\u0d38\u0007$\u0002\u0002\u0d38\u0d39\u0005\u01d0\u00e9\u0002",
    "\u0d39\u01cf\u0003\u0002\u0002\u0002\u0d3a\u0d3d\u0005\u01e6\u00f4\u0002",
    "\u0d3b\u0d3d\u0007\u00d5\u0002\u0002\u0d3c\u0d3a\u0003\u0002\u0002\u0002",
    "\u0d3c\u0d3b\u0003\u0002\u0002\u0002\u0d3d\u01d1\u0003\u0002\u0002\u0002",
    "\u0d3e\u0d49\u0005\u01d4\u00eb\u0002\u0d3f\u0d41\u0007\u00e4\u0002\u0002",
    "\u0d40\u0d3f\u0003\u0002\u0002\u0002\u0d40\u0d41\u0003\u0002\u0002\u0002",
    "\u0d41\u0d42\u0003\u0002\u0002\u0002\u0d42\u0d44\u0007\u0011\u0002\u0002",
    "\u0d43\u0d45\u0007\u00e4\u0002\u0002\u0d44\u0d43\u0003\u0002\u0002\u0002",
    "\u0d44\u0d45\u0003\u0002\u0002\u0002\u0d45\u0d46\u0003\u0002\u0002\u0002",
    "\u0d46\u0d48\u0005\u01d4\u00eb\u0002\u0d47\u0d40\u0003\u0002\u0002\u0002",
    "\u0d48\u0d4b\u0003\u0002\u0002\u0002\u0d49\u0d47\u0003\u0002\u0002\u0002",
    "\u0d49\u0d4a\u0003\u0002\u0002\u0002\u0d4a\u01d3\u0003\u0002\u0002\u0002",
    "\u0d4b\u0d49\u0003\u0002\u0002\u0002\u0d4c\u0d51\u0005\u0192\u00ca\u0002",
    "\u0d4d\u0d4f\u0007\u00e4\u0002\u0002\u0d4e\u0d4d\u0003\u0002\u0002\u0002",
    "\u0d4e\u0d4f\u0003\u0002\u0002\u0002\u0d4f\u0d50\u0003\u0002\u0002\u0002",
    "\u0d50\u0d52\u0005\u01b2\u00da\u0002\u0d51\u0d4e\u0003\u0002\u0002\u0002",
    "\u0d52\u0d53\u0003\u0002\u0002\u0002\u0d53\u0d51\u0003\u0002\u0002\u0002",
    "\u0d53\u0d54\u0003\u0002\u0002\u0002\u0d54\u01d5\u0003\u0002\u0002\u0002",
    "\u0d55\u0d60\u0005\u01d8\u00ed\u0002\u0d56\u0d58\u0007\u00e4\u0002\u0002",
    "\u0d57\u0d56\u0003\u0002\u0002\u0002\u0d57\u0d58\u0003\u0002\u0002\u0002",
    "\u0d58\u0d59\u0003\u0002\u0002\u0002\u0d59\u0d5b\u0007\u0011\u0002\u0002",
    "\u0d5a\u0d5c\u0007\u00e4\u0002\u0002\u0d5b\u0d5a\u0003\u0002\u0002\u0002",
    "\u0d5b\u0d5c\u0003\u0002\u0002\u0002\u0d5c\u0d5d\u0003\u0002\u0002\u0002",
    "\u0d5d\u0d5f\u0005\u01d8\u00ed\u0002\u0d5e\u0d57\u0003\u0002\u0002\u0002",
    "\u0d5f\u0d62\u0003\u0002\u0002\u0002\u0d60\u0d5e\u0003\u0002\u0002\u0002",
    "\u0d60\u0d61\u0003\u0002\u0002\u0002\u0d61\u01d7\u0003\u0002\u0002\u0002",
    "\u0d62\u0d60\u0003\u0002\u0002\u0002\u0d63\u0d64\u0005\u01e6\u00f4\u0002",
    "\u0d64\u01d9\u0003\u0002\u0002\u0002\u0d65\u0d66\t\u0014\u0002\u0002",
    "\u0d66\u01db\u0003\u0002\u0002\u0002\u0d67\u0d68\t\u0015\u0002\u0002",
    "\u0d68\u01dd\u0003\u0002\u0002\u0002\u0d69\u0d6a\u0005\u01e6\u00f4\u0002",
    "\u0d6a\u0d6b\u0007\t\u0002\u0002\u0d6b\u0d6d\u0003\u0002\u0002\u0002",
    "\u0d6c\u0d69\u0003\u0002\u0002\u0002\u0d6d\u0d70\u0003\u0002\u0002\u0002",
    "\u0d6e\u0d6c\u0003\u0002\u0002\u0002\u0d6e\u0d6f\u0003\u0002\u0002\u0002",
    "\u0d6f\u01df\u0003\u0002\u0002\u0002\u0d70\u0d6e\u0003\u0002\u0002\u0002",
    "\u0d71\u0d72\t\u0016\u0002\u0002\u0d72\u01e1\u0003\u0002\u0002\u0002",
    "\u0d73\u0d74\t\u0017\u0002\u0002\u0d74\u01e3\u0003\u0002\u0002\u0002",
    "\u0d75\u0d76\t\u0018\u0002\u0002\u0d76\u01e5\u0003\u0002\u0002\u0002",
    "\u0d77\u0d7c\u0005\u01e8\u00f5\u0002\u0d78\u0d7c\u0007\u00e0\u0002\u0002",
    "\u0d79\u0d7c\u0007\u00e3\u0002\u0002\u0d7a\u0d7c\u0007\u00d7\u0002\u0002",
    "\u0d7b\u0d77\u0003\u0002\u0002\u0002\u0d7b\u0d78\u0003\u0002\u0002\u0002",
    "\u0d7b\u0d79\u0003\u0002\u0002\u0002\u0d7b\u0d7a\u0003\u0002\u0002\u0002",
    "\u0d7c\u01e7\u0003\u0002\u0002\u0002\u0d7d\u0d7e\t\u0019\u0002\u0002",
    "\u0d7e\u01e9\u0003\u0002\u0002\u0002\u01f6\u01ed\u01f1\u01f8\u01fc\u0201",
    "\u0205\u0208\u020d\u0215\u021d\u022a\u022e\u0232\u023b\u0240\u0244\u0247",
    "\u024a\u024f\u0253\u025a\u026c\u0283\u028b\u028d\u0291\u0296\u029c\u02a2",
    "\u02a6\u02aa\u02ae\u02b2\u02b9\u02bc\u02c0\u02c4\u02ca\u02ce\u02d2\u02d6",
    "\u02da\u02e1\u02e4\u02ec\u02f5\u02fa\u02fe\u0301\u0308\u0310\u0314\u031a",
    "\u031f\u0325\u0330\u0334\u033c\u033f\u0343\u0347\u034c\u0351\u0357\u035c",
    "\u0366\u036a\u036f\u0376\u037b\u037e\u038e\u039a\u039f\u03a6\u03af\u03b5",
    "\u03bb\u03c2\u03c8\u03cf\u03d1\u03da\u03de\u03e5\u03ec\u03ee\u0401\u040f",
    "\u0414\u041b\u0424\u0426\u042f\u043f\u0445\u0450\u045a\u0460\u046a\u0474",
    "\u0477\u04a6\u04d5\u04e4\u04ec\u0500\u0509\u050d\u0512\u0515\u051e\u0522",
    "\u0527\u052a\u052e\u0532\u0537\u053f\u0544\u054b\u0551\u056e\u0577\u0580",
    "\u0586\u058c\u058f\u0591\u05a5\u05ac\u05b3\u05ba\u05bc\u05c1\u05c5\u05ca",
    "\u05cd\u05d1\u05d5\u05dd\u05e3\u05ec\u05f3\u05f8\u0601\u0623\u0627\u062e",
    "\u0634\u066c\u0670\u0674\u0678\u0680\u0684\u0689\u068d\u069b\u069f\u06a4",
    "\u06a8\u06ae\u06b2\u06c0\u06c7\u06cd\u06d7\u06db\u06e1\u06e9\u06f4\u06fa",
    "\u0706\u070c\u0718\u071c\u0726\u0733\u0737\u073b\u0741\u0745\u0748\u074c",
    "\u0756\u075d\u076a\u076e\u0776\u077c\u0780\u0784\u0789\u078e\u0792\u0798",
    "\u079c\u07a2\u07a6\u07ac\u07b0\u07b4\u07b8\u07bc\u07c0\u07c5\u07cc\u07d0",
    "\u07d5\u07dc\u07e0\u07e4\u07ec\u07f3\u07f6\u07fc\u07ff\u0804\u0807\u080b",
    "\u080e\u0811\u0818\u081c\u0820\u0824\u0827\u082b\u082f\u0834\u0839\u083d",
    "\u0842\u0846\u084f\u0855\u0858\u085c\u085f\u0866\u0869\u086c\u0870\u0875",
    "\u0879\u0881\u0885\u088a\u088f\u0893\u08a5\u08a9\u08ae\u08bb\u08bf\u08c1",
    "\u08c4\u08cd\u08d1\u08d5\u08e1\u08e5\u08ea\u08f4\u08fa\u08fe\u0903\u0907",
    "\u090b\u090f\u0915\u0919\u091e\u0924\u092d\u0936\u093e\u0944\u0948\u094d",
    "\u0956\u095a\u095f\u0964\u0968\u096d\u0971\u0975\u097a\u0981\u0985\u0989",
    "\u098b\u098f\u0991\u0995\u0997\u099d\u09a3\u09a6\u09a9\u09af\u09b4\u09b8",
    "\u09bd\u09c1\u09c5\u09c7\u09cb\u09cd\u09d0\u09d4\u09d6\u09dc\u09e0\u09e6",
    "\u09ec\u09f3\u09f9\u09fe\u0a06\u0a0a\u0a0c\u0a10\u0a14\u0a16\u0a18\u0a27",
    "\u0a31\u0a3b\u0a40\u0a44\u0a4b\u0a50\u0a55\u0a59\u0a5d\u0a61\u0a64\u0a66",
    "\u0a6b\u0a6f\u0a73\u0a77\u0a7b\u0a7f\u0a82\u0a84\u0a89\u0a8d\u0a92\u0a97",
    "\u0a9b\u0aa2\u0aa9\u0aad\u0ab1\u0ab5\u0ac4\u0ac7\u0ad4\u0ad6\u0adb\u0adf",
    "\u0ae3\u0ae8\u0aec\u0af0\u0af8\u0afc\u0b00\u0b08\u0b0c\u0b10\u0b18\u0b1c",
    "\u0b20\u0b28\u0b2c\u0b30\u0b38\u0b3c\u0b40\u0b48\u0b4c\u0b50\u0b54\u0b57",
    "\u0b5a\u0b62\u0b66\u0b6a\u0b6e\u0b72\u0b76\u0b7a\u0b7e\u0b82\u0b8a\u0b8e",
    "\u0b92\u0b98\u0b9c\u0ba0\u0ba4\u0baf\u0bb3\u0bb7\u0bc9\u0bd2\u0bda\u0bde",
    "\u0be2\u0be6\u0bea\u0bed\u0bf3\u0bf8\u0bfd\u0c02\u0c07\u0c0c\u0c11\u0c14",
    "\u0c18\u0c1c\u0c22\u0c27\u0c2b\u0c2e\u0c38\u0c3c\u0c40\u0c42\u0c46\u0c4a",
    "\u0c4e\u0c52\u0c55\u0c62\u0c66\u0c6a\u0c6d\u0c70\u0c76\u0c7a\u0c7e\u0c80",
    "\u0c84\u0c88\u0c8c\u0c8e\u0c92\u0c96\u0c9c\u0ca2\u0ca7\u0cab\u0caf\u0cb4",
    "\u0cb6\u0cb9\u0cbd\u0cc0\u0cc3\u0cc9\u0ccd\u0cd1\u0cd9\u0cdd\u0ce1\u0ce5",
    "\u0ce9\u0ced\u0cf0\u0cf6\u0cfa\u0cfd\u0d00\u0d04\u0d09\u0d0d\u0d15\u0d19",
    "\u0d1d\u0d2b\u0d2f\u0d33\u0d3c\u0d40\u0d44\u0d49\u0d4e\u0d53\u0d57\u0d5b",
    "\u0d60\u0d6e\u0d7b"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "':'", "'-'", "'=>'", "'://'", "'/'", 
                     "'.'", "'@'", "'#'", "'?'", "'&'", "'='", "'+'", "'{'", 
                     "','", "'}'", "'['", "']'", "'*'", "'('", "')'", "'+='", 
                     "'|'", "'..'", "'%'", "'^'", "'=~'", "'<>'", "'!='", 
                     "'<'", "'>'", "'<='", "'>='", "'$'", "'\u27E8'", "'\u3008'", 
                     "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", 
                     "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", "'\u2012'", 
                     "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", 
                     "'\uFE63'", "'\uFF0D'", null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, "'0'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", 
                      "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", 
                      "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", 
                      "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", 
                      "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", 
                      "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", 
                      "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", 
                      "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", 
                      "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", 
                      "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", 
                      "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", 
                      "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "CATALOG", 
                      "SHOW", "DEFAULT", "DBMS", "DATABASE", "DATABASES", 
                      "GRAPH", "GRAPHS", "REPLACE", "IF", "STOP", "ROLE", 
                      "ROLES", "USER", "USERS", "POPULATED", "PASSWORD", 
                      "CHANGE", "REQUIRED", "STATUS", "ACTIVE", "SUSPENDED", 
                      "ALTER", "CURRENT", "TO", "PRIVILEGES", "GRANT", "DENY", 
                      "REVOKE", "RELATIONSHIPS", "NODES", "ELEMENT", "ELEMENTS", 
                      "COPY", "OF", "TRAVERSE", "READ", "WRITE", "ACCESS", 
                      "INDEXES", "MANAGEMENT", "NEW", "LABEL", "LABELS", 
                      "NAME", "NAMES", "TYPE", "TYPES", "PROPERTY", "CONSTRAINTS", 
                      "ASSIGN", "BTREE", "EXIST", "FOR", "OPTIONS", "EXECUTE", 
                      "DEFINED", "FUNCTION", "FUNCTIONS", "BOOSTED", "PROCEDURE", 
                      "PROCEDURES", "ADMIN", "ADMINISTRATOR", "BRIEF", "VERBOSE", 
                      "OUTPUT", "BUILT", "EACH", "EXECUTABLE", "EXISTENCE", 
                      "FULLTEXT", "HOME", "LOOKUP", "RENAME", "StringLiteral", 
                      "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", 
                      "OctalInteger", "HexLetter", "HexDigit", "Digit", 
                      "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", 
                      "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", 
                      "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
                      "SP", "WHITESPACE", "Comment", "ERROR_TOKEN" ];

var ruleNames =  [ "raw", "cypher", "cypherPart", "cypherConsoleCommand", 
                   "cypherConsoleCommandName", "cypherConsoleCommandParameters", 
                   "cypherConsoleCommandParameter", "arrowExpression", "url", 
                   "uri", "scheme", "host", "hostname", "hostnumber", "port", 
                   "path", "user", "login", "password", "frag", "urlQuery", 
                   "search", "searchparameter", "string", "urlDigits", "json", 
                   "obj", "pair", "array", "value", "keyValueLiteral", "commandPath", 
                   "subCommand", "cypherQuery", "queryOptions", "anyCypherOption", 
                   "cypherOption", "versionNumber", "explain", "profile", 
                   "configurationOption", "statement", "query", "regularQuery", 
                   "bulkImportQuery", "singleQuery", "periodicCommitHint", 
                   "loadCSVQuery", "union", "clause", "command", "systemCommand", 
                   "multidatabaseCommand", "userCommand", "privilegeCommand", 
                   "showRoles", "createRole", "copyRole", "dropRole", "showUsers", 
                   "createUser", "dropUser", "alterUser", "showPrivileges", 
                   "grantPrivilege", "denyPrivilege", "revokePrivilege", 
                   "revokePart", "databaseScope", "graphScope", "roles", 
                   "grantableGraphPrivileges", "revokeableGraphPrivileges", 
                   "datasbasePrivilege", "dbmsPrivilege", "elementScope", 
                   "propertiesList", "propertyScope", "showDatabase", "createDatabase", 
                   "dropDatabase", "startDatabase", "stopDatabase", "ifNotExists", 
                   "ifExists", "orReplace", "setPassword", "passwordStatus", 
                   "setStatus", "userStatus", "createUniqueConstraint", 
                   "createNodeKeyConstraint", "createNodePropertyExistenceConstraint", 
                   "createRelationshipPropertyExistenceConstraint", "createIndex", 
                   "dropUniqueConstraint", "dropNodeKeyConstraint", "dropNodePropertyExistenceConstraint", 
                   "dropRelationshipPropertyExistenceConstraint", "dropIndex", 
                   "index", "uniqueConstraint", "nodeKeyConstraint", "nodePropertyExistenceConstraint", 
                   "relationshipPropertyExistenceConstraint", "relationshipPatternSyntax", 
                   "loadCSVClause", "matchClause", "unwindClause", "mergeClause", 
                   "mergeAction", "createClause", "createUniqueClause", 
                   "setClause", "setItem", "deleteClause", "removeClause", 
                   "removeItem", "foreachClause", "withClause", "returnClause", 
                   "returnBody", "func", "returnItems", "returnItem", "call", 
                   "procedureInvocation", "procedureInvocationBody", "procedureArguments", 
                   "procedureResults", "procedureResult", "aliasedProcedureResult", 
                   "simpleProcedureResult", "procedureOutput", "order", 
                   "skip", "limit", "sortItem", "hint", "startClause", "startPoint", 
                   "lookup", "nodeLookup", "relationshipLookup", "identifiedIndexLookup", 
                   "indexQuery", "idLookup", "literalIds", "where", "pattern", 
                   "patternPart", "anonymousPatternPart", "patternElement", 
                   "nodePattern", "patternElementChain", "relationshipPattern", 
                   "relationshipPatternStart", "relationshipPatternEnd", 
                   "relationshipDetail", "properties", "relType", "relationshipTypes", 
                   "relationshipType", "relationshipTypeOptionalColon", 
                   "nodeLabels", "nodeLabel", "rangeLiteral", "labelName", 
                   "relTypeName", "expression", "orExpression", "xorExpression", 
                   "andExpression", "notExpression", "comparisonExpression", 
                   "addOrSubtractExpression", "multiplyDivideModuloExpression", 
                   "powerOfExpression", "unaryAddOrSubtractExpression", 
                   "stringListNullOperatorExpression", "propertyOrLabelsExpression", 
                   "filterFunction", "filterFunctionName", "existsFunction", 
                   "existsFunctionName", "allFunction", "allFunctionName", 
                   "anyFunction", "anyFunctionName", "noneFunction", "noneFunctionName", 
                   "singleFunction", "singleFunctionName", "extractFunction", 
                   "extractFunctionName", "reduceFunction", "reduceFunctionName", 
                   "shortestPathPatternFunction", "shortestPathFunctionName", 
                   "allShortestPathFunctionName", "atom", "literal", "stringLiteral", 
                   "booleanLiteral", "listLiteral", "partialComparisonExpression", 
                   "parenthesizedExpression", "relationshipsPattern", "filterExpression", 
                   "idInColl", "functionInvocation", "functionInvocationBody", 
                   "functionName", "procedureName", "listComprehension", 
                   "patternComprehension", "propertyLookup", "caseExpression", 
                   "caseAlternatives", "variable", "numberLiteral", "mapLiteral", 
                   "mapProjection", "mapProjectionVariants", "literalEntry", 
                   "propertySelector", "variableSelector", "allPropertiesSelector", 
                   "parameter", "legacyParameter", "newParameter", "parameterName", 
                   "propertyExpressions", "propertyExpression", "propertyKeys", 
                   "propertyKeyName", "integerLiteral", "doubleLiteral", 
                   "namespace", "leftArrowHead", "rightArrowHead", "dash", 
                   "symbolicName", "keyword" ];

function CypherParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CypherParser.prototype = Object.create(antlr4.Parser.prototype);
CypherParser.prototype.constructor = CypherParser;

Object.defineProperty(CypherParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CypherParser.EOF = antlr4.Token.EOF;
CypherParser.T__0 = 1;
CypherParser.T__1 = 2;
CypherParser.T__2 = 3;
CypherParser.T__3 = 4;
CypherParser.T__4 = 5;
CypherParser.T__5 = 6;
CypherParser.T__6 = 7;
CypherParser.T__7 = 8;
CypherParser.T__8 = 9;
CypherParser.T__9 = 10;
CypherParser.T__10 = 11;
CypherParser.T__11 = 12;
CypherParser.T__12 = 13;
CypherParser.T__13 = 14;
CypherParser.T__14 = 15;
CypherParser.T__15 = 16;
CypherParser.T__16 = 17;
CypherParser.T__17 = 18;
CypherParser.T__18 = 19;
CypherParser.T__19 = 20;
CypherParser.T__20 = 21;
CypherParser.T__21 = 22;
CypherParser.T__22 = 23;
CypherParser.T__23 = 24;
CypherParser.T__24 = 25;
CypherParser.T__25 = 26;
CypherParser.T__26 = 27;
CypherParser.T__27 = 28;
CypherParser.T__28 = 29;
CypherParser.T__29 = 30;
CypherParser.T__30 = 31;
CypherParser.T__31 = 32;
CypherParser.T__32 = 33;
CypherParser.T__33 = 34;
CypherParser.T__34 = 35;
CypherParser.T__35 = 36;
CypherParser.T__36 = 37;
CypherParser.T__37 = 38;
CypherParser.T__38 = 39;
CypherParser.T__39 = 40;
CypherParser.T__40 = 41;
CypherParser.T__41 = 42;
CypherParser.T__42 = 43;
CypherParser.T__43 = 44;
CypherParser.T__44 = 45;
CypherParser.T__45 = 46;
CypherParser.T__46 = 47;
CypherParser.T__47 = 48;
CypherParser.T__48 = 49;
CypherParser.T__49 = 50;
CypherParser.T__50 = 51;
CypherParser.T__51 = 52;
CypherParser.T__52 = 53;
CypherParser.CYPHER = 54;
CypherParser.EXPLAIN = 55;
CypherParser.PROFILE = 56;
CypherParser.USING = 57;
CypherParser.PERIODIC = 58;
CypherParser.COMMIT = 59;
CypherParser.UNION = 60;
CypherParser.ALL = 61;
CypherParser.CREATE = 62;
CypherParser.DROP = 63;
CypherParser.INDEX = 64;
CypherParser.ON = 65;
CypherParser.CONSTRAINT = 66;
CypherParser.ASSERT = 67;
CypherParser.IS = 68;
CypherParser.UNIQUE = 69;
CypherParser.EXISTS = 70;
CypherParser.LOAD = 71;
CypherParser.CSV = 72;
CypherParser.WITH = 73;
CypherParser.HEADERS = 74;
CypherParser.FROM = 75;
CypherParser.AS = 76;
CypherParser.FIELDTERMINATOR = 77;
CypherParser.OPTIONAL = 78;
CypherParser.MATCH = 79;
CypherParser.UNWIND = 80;
CypherParser.MERGE = 81;
CypherParser.SET = 82;
CypherParser.DETACH = 83;
CypherParser.DELETE = 84;
CypherParser.REMOVE = 85;
CypherParser.FOREACH = 86;
CypherParser.IN = 87;
CypherParser.DISTINCT = 88;
CypherParser.RETURN = 89;
CypherParser.ORDER = 90;
CypherParser.BY = 91;
CypherParser.L_SKIP = 92;
CypherParser.LIMIT = 93;
CypherParser.ASCENDING = 94;
CypherParser.ASC = 95;
CypherParser.DESCENDING = 96;
CypherParser.DESC = 97;
CypherParser.JOIN = 98;
CypherParser.SCAN = 99;
CypherParser.START = 100;
CypherParser.NODE = 101;
CypherParser.RELATIONSHIP = 102;
CypherParser.REL = 103;
CypherParser.WHERE = 104;
CypherParser.SHORTESTPATH = 105;
CypherParser.ALLSHORTESTPATHS = 106;
CypherParser.OR = 107;
CypherParser.XOR = 108;
CypherParser.AND = 109;
CypherParser.NOT = 110;
CypherParser.STARTS = 111;
CypherParser.ENDS = 112;
CypherParser.CONTAINS = 113;
CypherParser.NULL = 114;
CypherParser.COUNT = 115;
CypherParser.FILTER = 116;
CypherParser.EXTRACT = 117;
CypherParser.ANY = 118;
CypherParser.NONE = 119;
CypherParser.SINGLE = 120;
CypherParser.TRUE = 121;
CypherParser.FALSE = 122;
CypherParser.REDUCE = 123;
CypherParser.CASE = 124;
CypherParser.ELSE = 125;
CypherParser.END = 126;
CypherParser.WHEN = 127;
CypherParser.THEN = 128;
CypherParser.CALL = 129;
CypherParser.YIELD = 130;
CypherParser.KEY = 131;
CypherParser.CATALOG = 132;
CypherParser.SHOW = 133;
CypherParser.DEFAULT = 134;
CypherParser.DBMS = 135;
CypherParser.DATABASE = 136;
CypherParser.DATABASES = 137;
CypherParser.GRAPH = 138;
CypherParser.GRAPHS = 139;
CypherParser.REPLACE = 140;
CypherParser.IF = 141;
CypherParser.STOP = 142;
CypherParser.ROLE = 143;
CypherParser.ROLES = 144;
CypherParser.USER = 145;
CypherParser.USERS = 146;
CypherParser.POPULATED = 147;
CypherParser.PASSWORD = 148;
CypherParser.CHANGE = 149;
CypherParser.REQUIRED = 150;
CypherParser.STATUS = 151;
CypherParser.ACTIVE = 152;
CypherParser.SUSPENDED = 153;
CypherParser.ALTER = 154;
CypherParser.CURRENT = 155;
CypherParser.TO = 156;
CypherParser.PRIVILEGES = 157;
CypherParser.GRANT = 158;
CypherParser.DENY = 159;
CypherParser.REVOKE = 160;
CypherParser.RELATIONSHIPS = 161;
CypherParser.NODES = 162;
CypherParser.ELEMENT = 163;
CypherParser.ELEMENTS = 164;
CypherParser.COPY = 165;
CypherParser.OF = 166;
CypherParser.TRAVERSE = 167;
CypherParser.READ = 168;
CypherParser.WRITE = 169;
CypherParser.ACCESS = 170;
CypherParser.INDEXES = 171;
CypherParser.MANAGEMENT = 172;
CypherParser.NEW = 173;
CypherParser.LABEL = 174;
CypherParser.LABELS = 175;
CypherParser.NAME = 176;
CypherParser.NAMES = 177;
CypherParser.TYPE = 178;
CypherParser.TYPES = 179;
CypherParser.PROPERTY = 180;
CypherParser.CONSTRAINTS = 181;
CypherParser.ASSIGN = 182;
CypherParser.BTREE = 183;
CypherParser.EXIST = 184;
CypherParser.FOR = 185;
CypherParser.OPTIONS = 186;
CypherParser.EXECUTE = 187;
CypherParser.DEFINED = 188;
CypherParser.FUNCTION = 189;
CypherParser.FUNCTIONS = 190;
CypherParser.BOOSTED = 191;
CypherParser.PROCEDURE = 192;
CypherParser.PROCEDURES = 193;
CypherParser.ADMIN = 194;
CypherParser.ADMINISTRATOR = 195;
CypherParser.BRIEF = 196;
CypherParser.VERBOSE = 197;
CypherParser.OUTPUT = 198;
CypherParser.BUILT = 199;
CypherParser.EACH = 200;
CypherParser.EXECUTABLE = 201;
CypherParser.EXISTENCE = 202;
CypherParser.FULLTEXT = 203;
CypherParser.HOME = 204;
CypherParser.LOOKUP = 205;
CypherParser.RENAME = 206;
CypherParser.StringLiteral = 207;
CypherParser.UrlHex = 208;
CypherParser.EscapedChar = 209;
CypherParser.HexInteger = 210;
CypherParser.DecimalInteger = 211;
CypherParser.OctalInteger = 212;
CypherParser.HexLetter = 213;
CypherParser.HexDigit = 214;
CypherParser.Digit = 215;
CypherParser.NonZeroDigit = 216;
CypherParser.NonZeroOctDigit = 217;
CypherParser.OctDigit = 218;
CypherParser.ZeroDigit = 219;
CypherParser.ExponentDecimalReal = 220;
CypherParser.RegularDecimalReal = 221;
CypherParser.UnescapedSymbolicName = 222;
CypherParser.IdentifierStart = 223;
CypherParser.IdentifierPart = 224;
CypherParser.EscapedSymbolicName = 225;
CypherParser.SP = 226;
CypherParser.WHITESPACE = 227;
CypherParser.Comment = 228;
CypherParser.ERROR_TOKEN = 229;

CypherParser.RULE_raw = 0;
CypherParser.RULE_cypher = 1;
CypherParser.RULE_cypherPart = 2;
CypherParser.RULE_cypherConsoleCommand = 3;
CypherParser.RULE_cypherConsoleCommandName = 4;
CypherParser.RULE_cypherConsoleCommandParameters = 5;
CypherParser.RULE_cypherConsoleCommandParameter = 6;
CypherParser.RULE_arrowExpression = 7;
CypherParser.RULE_url = 8;
CypherParser.RULE_uri = 9;
CypherParser.RULE_scheme = 10;
CypherParser.RULE_host = 11;
CypherParser.RULE_hostname = 12;
CypherParser.RULE_hostnumber = 13;
CypherParser.RULE_port = 14;
CypherParser.RULE_path = 15;
CypherParser.RULE_user = 16;
CypherParser.RULE_login = 17;
CypherParser.RULE_password = 18;
CypherParser.RULE_frag = 19;
CypherParser.RULE_urlQuery = 20;
CypherParser.RULE_search = 21;
CypherParser.RULE_searchparameter = 22;
CypherParser.RULE_string = 23;
CypherParser.RULE_urlDigits = 24;
CypherParser.RULE_json = 25;
CypherParser.RULE_obj = 26;
CypherParser.RULE_pair = 27;
CypherParser.RULE_array = 28;
CypherParser.RULE_value = 29;
CypherParser.RULE_keyValueLiteral = 30;
CypherParser.RULE_commandPath = 31;
CypherParser.RULE_subCommand = 32;
CypherParser.RULE_cypherQuery = 33;
CypherParser.RULE_queryOptions = 34;
CypherParser.RULE_anyCypherOption = 35;
CypherParser.RULE_cypherOption = 36;
CypherParser.RULE_versionNumber = 37;
CypherParser.RULE_explain = 38;
CypherParser.RULE_profile = 39;
CypherParser.RULE_configurationOption = 40;
CypherParser.RULE_statement = 41;
CypherParser.RULE_query = 42;
CypherParser.RULE_regularQuery = 43;
CypherParser.RULE_bulkImportQuery = 44;
CypherParser.RULE_singleQuery = 45;
CypherParser.RULE_periodicCommitHint = 46;
CypherParser.RULE_loadCSVQuery = 47;
CypherParser.RULE_union = 48;
CypherParser.RULE_clause = 49;
CypherParser.RULE_command = 50;
CypherParser.RULE_systemCommand = 51;
CypherParser.RULE_multidatabaseCommand = 52;
CypherParser.RULE_userCommand = 53;
CypherParser.RULE_privilegeCommand = 54;
CypherParser.RULE_showRoles = 55;
CypherParser.RULE_createRole = 56;
CypherParser.RULE_copyRole = 57;
CypherParser.RULE_dropRole = 58;
CypherParser.RULE_showUsers = 59;
CypherParser.RULE_createUser = 60;
CypherParser.RULE_dropUser = 61;
CypherParser.RULE_alterUser = 62;
CypherParser.RULE_showPrivileges = 63;
CypherParser.RULE_grantPrivilege = 64;
CypherParser.RULE_denyPrivilege = 65;
CypherParser.RULE_revokePrivilege = 66;
CypherParser.RULE_revokePart = 67;
CypherParser.RULE_databaseScope = 68;
CypherParser.RULE_graphScope = 69;
CypherParser.RULE_roles = 70;
CypherParser.RULE_grantableGraphPrivileges = 71;
CypherParser.RULE_revokeableGraphPrivileges = 72;
CypherParser.RULE_datasbasePrivilege = 73;
CypherParser.RULE_dbmsPrivilege = 74;
CypherParser.RULE_elementScope = 75;
CypherParser.RULE_propertiesList = 76;
CypherParser.RULE_propertyScope = 77;
CypherParser.RULE_showDatabase = 78;
CypherParser.RULE_createDatabase = 79;
CypherParser.RULE_dropDatabase = 80;
CypherParser.RULE_startDatabase = 81;
CypherParser.RULE_stopDatabase = 82;
CypherParser.RULE_ifNotExists = 83;
CypherParser.RULE_ifExists = 84;
CypherParser.RULE_orReplace = 85;
CypherParser.RULE_setPassword = 86;
CypherParser.RULE_passwordStatus = 87;
CypherParser.RULE_setStatus = 88;
CypherParser.RULE_userStatus = 89;
CypherParser.RULE_createUniqueConstraint = 90;
CypherParser.RULE_createNodeKeyConstraint = 91;
CypherParser.RULE_createNodePropertyExistenceConstraint = 92;
CypherParser.RULE_createRelationshipPropertyExistenceConstraint = 93;
CypherParser.RULE_createIndex = 94;
CypherParser.RULE_dropUniqueConstraint = 95;
CypherParser.RULE_dropNodeKeyConstraint = 96;
CypherParser.RULE_dropNodePropertyExistenceConstraint = 97;
CypherParser.RULE_dropRelationshipPropertyExistenceConstraint = 98;
CypherParser.RULE_dropIndex = 99;
CypherParser.RULE_index = 100;
CypherParser.RULE_uniqueConstraint = 101;
CypherParser.RULE_nodeKeyConstraint = 102;
CypherParser.RULE_nodePropertyExistenceConstraint = 103;
CypherParser.RULE_relationshipPropertyExistenceConstraint = 104;
CypherParser.RULE_relationshipPatternSyntax = 105;
CypherParser.RULE_loadCSVClause = 106;
CypherParser.RULE_matchClause = 107;
CypherParser.RULE_unwindClause = 108;
CypherParser.RULE_mergeClause = 109;
CypherParser.RULE_mergeAction = 110;
CypherParser.RULE_createClause = 111;
CypherParser.RULE_createUniqueClause = 112;
CypherParser.RULE_setClause = 113;
CypherParser.RULE_setItem = 114;
CypherParser.RULE_deleteClause = 115;
CypherParser.RULE_removeClause = 116;
CypherParser.RULE_removeItem = 117;
CypherParser.RULE_foreachClause = 118;
CypherParser.RULE_withClause = 119;
CypherParser.RULE_returnClause = 120;
CypherParser.RULE_returnBody = 121;
CypherParser.RULE_func = 122;
CypherParser.RULE_returnItems = 123;
CypherParser.RULE_returnItem = 124;
CypherParser.RULE_call = 125;
CypherParser.RULE_procedureInvocation = 126;
CypherParser.RULE_procedureInvocationBody = 127;
CypherParser.RULE_procedureArguments = 128;
CypherParser.RULE_procedureResults = 129;
CypherParser.RULE_procedureResult = 130;
CypherParser.RULE_aliasedProcedureResult = 131;
CypherParser.RULE_simpleProcedureResult = 132;
CypherParser.RULE_procedureOutput = 133;
CypherParser.RULE_order = 134;
CypherParser.RULE_skip = 135;
CypherParser.RULE_limit = 136;
CypherParser.RULE_sortItem = 137;
CypherParser.RULE_hint = 138;
CypherParser.RULE_startClause = 139;
CypherParser.RULE_startPoint = 140;
CypherParser.RULE_lookup = 141;
CypherParser.RULE_nodeLookup = 142;
CypherParser.RULE_relationshipLookup = 143;
CypherParser.RULE_identifiedIndexLookup = 144;
CypherParser.RULE_indexQuery = 145;
CypherParser.RULE_idLookup = 146;
CypherParser.RULE_literalIds = 147;
CypherParser.RULE_where = 148;
CypherParser.RULE_pattern = 149;
CypherParser.RULE_patternPart = 150;
CypherParser.RULE_anonymousPatternPart = 151;
CypherParser.RULE_patternElement = 152;
CypherParser.RULE_nodePattern = 153;
CypherParser.RULE_patternElementChain = 154;
CypherParser.RULE_relationshipPattern = 155;
CypherParser.RULE_relationshipPatternStart = 156;
CypherParser.RULE_relationshipPatternEnd = 157;
CypherParser.RULE_relationshipDetail = 158;
CypherParser.RULE_properties = 159;
CypherParser.RULE_relType = 160;
CypherParser.RULE_relationshipTypes = 161;
CypherParser.RULE_relationshipType = 162;
CypherParser.RULE_relationshipTypeOptionalColon = 163;
CypherParser.RULE_nodeLabels = 164;
CypherParser.RULE_nodeLabel = 165;
CypherParser.RULE_rangeLiteral = 166;
CypherParser.RULE_labelName = 167;
CypherParser.RULE_relTypeName = 168;
CypherParser.RULE_expression = 169;
CypherParser.RULE_orExpression = 170;
CypherParser.RULE_xorExpression = 171;
CypherParser.RULE_andExpression = 172;
CypherParser.RULE_notExpression = 173;
CypherParser.RULE_comparisonExpression = 174;
CypherParser.RULE_addOrSubtractExpression = 175;
CypherParser.RULE_multiplyDivideModuloExpression = 176;
CypherParser.RULE_powerOfExpression = 177;
CypherParser.RULE_unaryAddOrSubtractExpression = 178;
CypherParser.RULE_stringListNullOperatorExpression = 179;
CypherParser.RULE_propertyOrLabelsExpression = 180;
CypherParser.RULE_filterFunction = 181;
CypherParser.RULE_filterFunctionName = 182;
CypherParser.RULE_existsFunction = 183;
CypherParser.RULE_existsFunctionName = 184;
CypherParser.RULE_allFunction = 185;
CypherParser.RULE_allFunctionName = 186;
CypherParser.RULE_anyFunction = 187;
CypherParser.RULE_anyFunctionName = 188;
CypherParser.RULE_noneFunction = 189;
CypherParser.RULE_noneFunctionName = 190;
CypherParser.RULE_singleFunction = 191;
CypherParser.RULE_singleFunctionName = 192;
CypherParser.RULE_extractFunction = 193;
CypherParser.RULE_extractFunctionName = 194;
CypherParser.RULE_reduceFunction = 195;
CypherParser.RULE_reduceFunctionName = 196;
CypherParser.RULE_shortestPathPatternFunction = 197;
CypherParser.RULE_shortestPathFunctionName = 198;
CypherParser.RULE_allShortestPathFunctionName = 199;
CypherParser.RULE_atom = 200;
CypherParser.RULE_literal = 201;
CypherParser.RULE_stringLiteral = 202;
CypherParser.RULE_booleanLiteral = 203;
CypherParser.RULE_listLiteral = 204;
CypherParser.RULE_partialComparisonExpression = 205;
CypherParser.RULE_parenthesizedExpression = 206;
CypherParser.RULE_relationshipsPattern = 207;
CypherParser.RULE_filterExpression = 208;
CypherParser.RULE_idInColl = 209;
CypherParser.RULE_functionInvocation = 210;
CypherParser.RULE_functionInvocationBody = 211;
CypherParser.RULE_functionName = 212;
CypherParser.RULE_procedureName = 213;
CypherParser.RULE_listComprehension = 214;
CypherParser.RULE_patternComprehension = 215;
CypherParser.RULE_propertyLookup = 216;
CypherParser.RULE_caseExpression = 217;
CypherParser.RULE_caseAlternatives = 218;
CypherParser.RULE_variable = 219;
CypherParser.RULE_numberLiteral = 220;
CypherParser.RULE_mapLiteral = 221;
CypherParser.RULE_mapProjection = 222;
CypherParser.RULE_mapProjectionVariants = 223;
CypherParser.RULE_literalEntry = 224;
CypherParser.RULE_propertySelector = 225;
CypherParser.RULE_variableSelector = 226;
CypherParser.RULE_allPropertiesSelector = 227;
CypherParser.RULE_parameter = 228;
CypherParser.RULE_legacyParameter = 229;
CypherParser.RULE_newParameter = 230;
CypherParser.RULE_parameterName = 231;
CypherParser.RULE_propertyExpressions = 232;
CypherParser.RULE_propertyExpression = 233;
CypherParser.RULE_propertyKeys = 234;
CypherParser.RULE_propertyKeyName = 235;
CypherParser.RULE_integerLiteral = 236;
CypherParser.RULE_doubleLiteral = 237;
CypherParser.RULE_namespace = 238;
CypherParser.RULE_leftArrowHead = 239;
CypherParser.RULE_rightArrowHead = 240;
CypherParser.RULE_dash = 241;
CypherParser.RULE_symbolicName = 242;
CypherParser.RULE_keyword = 243;

function RawContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_raw;
    return this;
}

RawContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RawContext.prototype.constructor = RawContext;

RawContext.prototype.cypherPart = function() {
    return this.getTypedRuleContext(CypherPartContext,0);
};

RawContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRaw(this);
	}
};

RawContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRaw(this);
	}
};




CypherParser.RawContext = RawContext;

CypherParser.prototype.raw = function() {

    var localctx = new RawContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CypherParser.RULE_raw);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.state = 491;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 488;
                    this.matchWildcard(); 
                }
                this.state = 493;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            break;

        case 2:
            this.state = 494;
            this.cypherPart();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypher;
    return this;
}

CypherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherContext.prototype.constructor = CypherContext;

CypherContext.prototype.raw = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RawContext);
    } else {
        return this.getTypedRuleContext(RawContext,i);
    }
};

CypherContext.prototype.EOF = function() {
    return this.getToken(CypherParser.EOF, 0);
};

CypherContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypher(this);
	}
};

CypherContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypher(this);
	}
};




CypherParser.CypherContext = CypherContext;

CypherParser.prototype.cypher = function() {

    var localctx = new CypherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CypherParser.RULE_cypher);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.raw();
        this.state = 502;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 498;
                this.match(CypherParser.T__0);
                this.state = 499;
                this.raw(); 
            }
            this.state = 504;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
        }

        this.state = 506;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__0) {
            this.state = 505;
            this.match(CypherParser.T__0);
        }

        this.state = 508;
        this.match(CypherParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherPart;
    return this;
}

CypherPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherPartContext.prototype.constructor = CypherPartContext;

CypherPartContext.prototype.cypherQuery = function() {
    return this.getTypedRuleContext(CypherQueryContext,0);
};

CypherPartContext.prototype.cypherConsoleCommand = function() {
    return this.getTypedRuleContext(CypherConsoleCommandContext,0);
};

CypherPartContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CypherPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherPart(this);
	}
};

CypherPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherPart(this);
	}
};




CypherParser.CypherPartContext = CypherPartContext;

CypherParser.prototype.cypherPart = function() {

    var localctx = new CypherPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CypherParser.RULE_cypherPart);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 510;
            this.match(CypherParser.SP);
        }

        this.state = 515;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.LOAD:
        case CypherParser.WITH:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.RETURN:
        case CypherParser.START:
        case CypherParser.CALL:
        case CypherParser.CATALOG:
        case CypherParser.SHOW:
        case CypherParser.STOP:
        case CypherParser.ALTER:
        case CypherParser.GRANT:
        case CypherParser.DENY:
        case CypherParser.REVOKE:
            this.state = 513;
            this.cypherQuery();
            break;
        case CypherParser.T__1:
            this.state = 514;
            this.cypherConsoleCommand();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 518;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 517;
            this.match(CypherParser.SP);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherConsoleCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommand;
    return this;
}

CypherConsoleCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherConsoleCommandContext.prototype.constructor = CypherConsoleCommandContext;

CypherConsoleCommandContext.prototype.cypherConsoleCommandName = function() {
    return this.getTypedRuleContext(CypherConsoleCommandNameContext,0);
};

CypherConsoleCommandContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CypherConsoleCommandContext.prototype.cypherConsoleCommandParameters = function() {
    return this.getTypedRuleContext(CypherConsoleCommandParametersContext,0);
};

CypherConsoleCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherConsoleCommand(this);
	}
};

CypherConsoleCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherConsoleCommand(this);
	}
};




CypherParser.CypherConsoleCommandContext = CypherConsoleCommandContext;

CypherParser.prototype.cypherConsoleCommand = function() {

    var localctx = new CypherConsoleCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CypherParser.RULE_cypherConsoleCommand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        this.cypherConsoleCommandName();
        this.state = 523;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        if(la_===1) {
            this.state = 521;
            this.match(CypherParser.SP);
            this.state = 522;
            this.cypherConsoleCommandParameters();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherConsoleCommandNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandName;
    return this;
}

CypherConsoleCommandNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherConsoleCommandNameContext.prototype.constructor = CypherConsoleCommandNameContext;

CypherConsoleCommandNameContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

CypherConsoleCommandNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherConsoleCommandName(this);
	}
};

CypherConsoleCommandNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherConsoleCommandName(this);
	}
};




CypherParser.CypherConsoleCommandNameContext = CypherConsoleCommandNameContext;

CypherParser.prototype.cypherConsoleCommandName = function() {

    var localctx = new CypherConsoleCommandNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CypherParser.RULE_cypherConsoleCommandName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 525;
        this.match(CypherParser.T__1);
        this.state = 526;
        this.symbolicName();
        this.state = 531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__2) {
            this.state = 527;
            this.match(CypherParser.T__2);
            this.state = 528;
            this.symbolicName();
            this.state = 533;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherConsoleCommandParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandParameters;
    return this;
}

CypherConsoleCommandParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherConsoleCommandParametersContext.prototype.constructor = CypherConsoleCommandParametersContext;

CypherConsoleCommandParametersContext.prototype.cypherConsoleCommandParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CypherConsoleCommandParameterContext);
    } else {
        return this.getTypedRuleContext(CypherConsoleCommandParameterContext,i);
    }
};

CypherConsoleCommandParametersContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CypherConsoleCommandParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherConsoleCommandParameters(this);
	}
};

CypherConsoleCommandParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherConsoleCommandParameters(this);
	}
};




CypherParser.CypherConsoleCommandParametersContext = CypherConsoleCommandParametersContext;

CypherParser.prototype.cypherConsoleCommandParameters = function() {

    var localctx = new CypherConsoleCommandParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CypherParser.RULE_cypherConsoleCommandParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this.cypherConsoleCommandParameter();
        this.state = 539;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 535;
                this.match(CypherParser.SP);
                this.state = 536;
                this.cypherConsoleCommandParameter(); 
            }
            this.state = 541;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherConsoleCommandParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherConsoleCommandParameter;
    return this;
}

CypherConsoleCommandParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherConsoleCommandParameterContext.prototype.constructor = CypherConsoleCommandParameterContext;

CypherConsoleCommandParameterContext.prototype.url = function() {
    return this.getTypedRuleContext(UrlContext,0);
};

CypherConsoleCommandParameterContext.prototype.json = function() {
    return this.getTypedRuleContext(JsonContext,0);
};

CypherConsoleCommandParameterContext.prototype.arrowExpression = function() {
    return this.getTypedRuleContext(ArrowExpressionContext,0);
};

CypherConsoleCommandParameterContext.prototype.mapLiteral = function() {
    return this.getTypedRuleContext(MapLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.keyValueLiteral = function() {
    return this.getTypedRuleContext(KeyValueLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

CypherConsoleCommandParameterContext.prototype.subCommand = function() {
    return this.getTypedRuleContext(SubCommandContext,0);
};

CypherConsoleCommandParameterContext.prototype.commandPath = function() {
    return this.getTypedRuleContext(CommandPathContext,0);
};

CypherConsoleCommandParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherConsoleCommandParameter(this);
	}
};

CypherConsoleCommandParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherConsoleCommandParameter(this);
	}
};




CypherParser.CypherConsoleCommandParameterContext = CypherConsoleCommandParameterContext;

CypherParser.prototype.cypherConsoleCommandParameter = function() {

    var localctx = new CypherConsoleCommandParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CypherParser.RULE_cypherConsoleCommandParameter);
    try {
        this.state = 552;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 542;
            this.url();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 543;
            this.json();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 544;
            this.arrowExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 545;
            this.mapLiteral();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 546;
            this.keyValueLiteral();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 547;
            this.stringLiteral();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 548;
            this.numberLiteral();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 549;
            this.booleanLiteral();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 550;
            this.subCommand();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 551;
            this.commandPath();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_arrowExpression;
    return this;
}

ArrowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowExpressionContext.prototype.constructor = ArrowExpressionContext;

ArrowExpressionContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ArrowExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArrowExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ArrowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterArrowExpression(this);
	}
};

ArrowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitArrowExpression(this);
	}
};




CypherParser.ArrowExpressionContext = ArrowExpressionContext;

CypherParser.prototype.arrowExpression = function() {

    var localctx = new ArrowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CypherParser.RULE_arrowExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        this.symbolicName();
        this.state = 556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 555;
            this.match(CypherParser.SP);
        }

        this.state = 558;
        this.match(CypherParser.T__3);
        this.state = 560;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 559;
            this.match(CypherParser.SP);
        }

        this.state = 562;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UrlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_url;
    return this;
}

UrlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UrlContext.prototype.constructor = UrlContext;

UrlContext.prototype.uri = function() {
    return this.getTypedRuleContext(UriContext,0);
};

UrlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUrl(this);
	}
};

UrlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUrl(this);
	}
};




CypherParser.UrlContext = UrlContext;

CypherParser.prototype.url = function() {

    var localctx = new UrlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CypherParser.RULE_url);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        this.uri();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UriContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_uri;
    return this;
}

UriContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UriContext.prototype.constructor = UriContext;

UriContext.prototype.scheme = function() {
    return this.getTypedRuleContext(SchemeContext,0);
};

UriContext.prototype.host = function() {
    return this.getTypedRuleContext(HostContext,0);
};

UriContext.prototype.login = function() {
    return this.getTypedRuleContext(LoginContext,0);
};

UriContext.prototype.port = function() {
    return this.getTypedRuleContext(PortContext,0);
};

UriContext.prototype.path = function() {
    return this.getTypedRuleContext(PathContext,0);
};

UriContext.prototype.urlQuery = function() {
    return this.getTypedRuleContext(UrlQueryContext,0);
};

UriContext.prototype.frag = function() {
    return this.getTypedRuleContext(FragContext,0);
};

UriContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUri(this);
	}
};

UriContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUri(this);
	}
};




CypherParser.UriContext = UriContext;

CypherParser.prototype.uri = function() {

    var localctx = new UriContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CypherParser.RULE_uri);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this.scheme();
        this.state = 567;
        this.match(CypherParser.T__4);
        this.state = 569;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 568;
            this.login();

        }
        this.state = 571;
        this.host();
        this.state = 574;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__1) {
            this.state = 572;
            this.match(CypherParser.T__1);
            this.state = 573;
            this.port();
        }

        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__5) {
            this.state = 576;
            this.match(CypherParser.T__5);
            this.state = 577;
            this.path();
        }

        this.state = 581;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__9) {
            this.state = 580;
            this.urlQuery();
        }

        this.state = 584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__8) {
            this.state = 583;
            this.frag();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SchemeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_scheme;
    return this;
}

SchemeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SchemeContext.prototype.constructor = SchemeContext;

SchemeContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

SchemeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterScheme(this);
	}
};

SchemeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitScheme(this);
	}
};




CypherParser.SchemeContext = SchemeContext;

CypherParser.prototype.scheme = function() {

    var localctx = new SchemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CypherParser.RULE_scheme);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_host;
    return this;
}

HostContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostContext.prototype.constructor = HostContext;

HostContext.prototype.hostname = function() {
    return this.getTypedRuleContext(HostnameContext,0);
};

HostContext.prototype.hostnumber = function() {
    return this.getTypedRuleContext(HostnumberContext,0);
};

HostContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterHost(this);
	}
};

HostContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitHost(this);
	}
};




CypherParser.HostContext = HostContext;

CypherParser.prototype.host = function() {

    var localctx = new HostContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CypherParser.RULE_host);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__5) {
            this.state = 588;
            this.match(CypherParser.T__5);
        }

        this.state = 593;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.PERIODIC:
        case CypherParser.COMMIT:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.INDEX:
        case CypherParser.ON:
        case CypherParser.CONSTRAINT:
        case CypherParser.ASSERT:
        case CypherParser.IS:
        case CypherParser.UNIQUE:
        case CypherParser.EXISTS:
        case CypherParser.LOAD:
        case CypherParser.CSV:
        case CypherParser.WITH:
        case CypherParser.HEADERS:
        case CypherParser.FROM:
        case CypherParser.AS:
        case CypherParser.FIELDTERMINATOR:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.IN:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.JOIN:
        case CypherParser.SCAN:
        case CypherParser.START:
        case CypherParser.NODE:
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
        case CypherParser.WHERE:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.REDUCE:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CALL:
        case CypherParser.YIELD:
        case CypherParser.KEY:
        case CypherParser.CATALOG:
        case CypherParser.SHOW:
        case CypherParser.DEFAULT:
        case CypherParser.DBMS:
        case CypherParser.DATABASE:
        case CypherParser.DATABASES:
        case CypherParser.GRAPH:
        case CypherParser.GRAPHS:
        case CypherParser.REPLACE:
        case CypherParser.IF:
        case CypherParser.STOP:
        case CypherParser.ROLE:
        case CypherParser.ROLES:
        case CypherParser.USER:
        case CypherParser.USERS:
        case CypherParser.POPULATED:
        case CypherParser.PASSWORD:
        case CypherParser.CHANGE:
        case CypherParser.REQUIRED:
        case CypherParser.STATUS:
        case CypherParser.ACTIVE:
        case CypherParser.SUSPENDED:
        case CypherParser.ALTER:
        case CypherParser.CURRENT:
        case CypherParser.TO:
        case CypherParser.PRIVILEGES:
        case CypherParser.GRANT:
        case CypherParser.DENY:
        case CypherParser.REVOKE:
        case CypherParser.RELATIONSHIPS:
        case CypherParser.NODES:
        case CypherParser.ELEMENT:
        case CypherParser.ELEMENTS:
        case CypherParser.COPY:
        case CypherParser.OF:
        case CypherParser.TRAVERSE:
        case CypherParser.READ:
        case CypherParser.WRITE:
        case CypherParser.ACCESS:
        case CypherParser.INDEXES:
        case CypherParser.MANAGEMENT:
        case CypherParser.NEW:
        case CypherParser.LABEL:
        case CypherParser.LABELS:
        case CypherParser.NAME:
        case CypherParser.NAMES:
        case CypherParser.TYPE:
        case CypherParser.TYPES:
        case CypherParser.PROPERTY:
        case CypherParser.CONSTRAINTS:
        case CypherParser.ASSIGN:
        case CypherParser.BTREE:
        case CypherParser.EXIST:
        case CypherParser.FOR:
        case CypherParser.OPTIONS:
        case CypherParser.EXECUTE:
        case CypherParser.DEFINED:
        case CypherParser.FUNCTION:
        case CypherParser.FUNCTIONS:
        case CypherParser.BOOSTED:
        case CypherParser.PROCEDURE:
        case CypherParser.PROCEDURES:
        case CypherParser.ADMIN:
        case CypherParser.ADMINISTRATOR:
        case CypherParser.BRIEF:
        case CypherParser.VERBOSE:
        case CypherParser.OUTPUT:
        case CypherParser.BUILT:
        case CypherParser.EACH:
        case CypherParser.EXECUTABLE:
        case CypherParser.EXISTENCE:
        case CypherParser.FULLTEXT:
        case CypherParser.HOME:
        case CypherParser.LOOKUP:
        case CypherParser.RENAME:
        case CypherParser.HexLetter:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.state = 591;
            this.hostname();
            break;
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
            this.state = 592;
            this.hostnumber();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hostname;
    return this;
}

HostnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostnameContext.prototype.constructor = HostnameContext;

HostnameContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

HostnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterHostname(this);
	}
};

HostnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitHostname(this);
	}
};




CypherParser.HostnameContext = HostnameContext;

CypherParser.prototype.hostname = function() {

    var localctx = new HostnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CypherParser.RULE_hostname);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 595;
        this.string();
        this.state = 600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__6) {
            this.state = 596;
            this.match(CypherParser.T__6);
            this.state = 597;
            this.string();
            this.state = 602;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostnumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hostnumber;
    return this;
}

HostnumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostnumberContext.prototype.constructor = HostnumberContext;

HostnumberContext.prototype.urlDigits = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UrlDigitsContext);
    } else {
        return this.getTypedRuleContext(UrlDigitsContext,i);
    }
};

HostnumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterHostnumber(this);
	}
};

HostnumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitHostnumber(this);
	}
};




CypherParser.HostnumberContext = HostnumberContext;

CypherParser.prototype.hostnumber = function() {

    var localctx = new HostnumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CypherParser.RULE_hostnumber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this.urlDigits();
        this.state = 604;
        this.match(CypherParser.T__6);
        this.state = 605;
        this.urlDigits();
        this.state = 606;
        this.match(CypherParser.T__6);
        this.state = 607;
        this.urlDigits();
        this.state = 608;
        this.match(CypherParser.T__6);
        this.state = 609;
        this.urlDigits();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_port;
    return this;
}

PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortContext.prototype.constructor = PortContext;

PortContext.prototype.urlDigits = function() {
    return this.getTypedRuleContext(UrlDigitsContext,0);
};

PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPort(this);
	}
};

PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPort(this);
	}
};




CypherParser.PortContext = PortContext;

CypherParser.prototype.port = function() {

    var localctx = new PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CypherParser.RULE_port);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        this.urlDigits();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_path;
    return this;
}

PathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathContext.prototype.constructor = PathContext;

PathContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

PathContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPath(this);
	}
};

PathContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPath(this);
	}
};




CypherParser.PathContext = PathContext;

CypherParser.prototype.path = function() {

    var localctx = new PathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CypherParser.RULE_path);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 613;
        this.string();
        this.state = 618;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__5) {
            this.state = 614;
            this.match(CypherParser.T__5);
            this.state = 615;
            this.string();
            this.state = 620;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_user;
    return this;
}

UserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserContext.prototype.constructor = UserContext;

UserContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

UserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUser(this);
	}
};

UserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUser(this);
	}
};




CypherParser.UserContext = UserContext;

CypherParser.prototype.user = function() {

    var localctx = new UserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CypherParser.RULE_user);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_login;
    return this;
}

LoginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoginContext.prototype.constructor = LoginContext;

LoginContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

LoginContext.prototype.password = function() {
    return this.getTypedRuleContext(PasswordContext,0);
};

LoginContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLogin(this);
	}
};

LoginContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLogin(this);
	}
};




CypherParser.LoginContext = LoginContext;

CypherParser.prototype.login = function() {

    var localctx = new LoginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CypherParser.RULE_login);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 623;
        this.user();
        this.state = 624;
        this.match(CypherParser.T__1);
        this.state = 625;
        this.password();
        this.state = 626;
        this.match(CypherParser.T__7);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_password;
    return this;
}

PasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PasswordContext.prototype.constructor = PasswordContext;

PasswordContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

PasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPassword(this);
	}
};

PasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPassword(this);
	}
};




CypherParser.PasswordContext = PasswordContext;

CypherParser.prototype.password = function() {

    var localctx = new PasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CypherParser.RULE_password);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FragContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_frag;
    return this;
}

FragContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FragContext.prototype.constructor = FragContext;

FragContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

FragContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFrag(this);
	}
};

FragContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFrag(this);
	}
};




CypherParser.FragContext = FragContext;

CypherParser.prototype.frag = function() {

    var localctx = new FragContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CypherParser.RULE_frag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.match(CypherParser.T__8);
        this.state = 631;
        this.string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UrlQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_urlQuery;
    return this;
}

UrlQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UrlQueryContext.prototype.constructor = UrlQueryContext;

UrlQueryContext.prototype.search = function() {
    return this.getTypedRuleContext(SearchContext,0);
};

UrlQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUrlQuery(this);
	}
};

UrlQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUrlQuery(this);
	}
};




CypherParser.UrlQueryContext = UrlQueryContext;

CypherParser.prototype.urlQuery = function() {

    var localctx = new UrlQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CypherParser.RULE_urlQuery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.match(CypherParser.T__9);
        this.state = 634;
        this.search();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SearchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_search;
    return this;
}

SearchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SearchContext.prototype.constructor = SearchContext;

SearchContext.prototype.searchparameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SearchparameterContext);
    } else {
        return this.getTypedRuleContext(SearchparameterContext,i);
    }
};

SearchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSearch(this);
	}
};

SearchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSearch(this);
	}
};




CypherParser.SearchContext = SearchContext;

CypherParser.prototype.search = function() {

    var localctx = new SearchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CypherParser.RULE_search);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 636;
        this.searchparameter();
        this.state = 641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__10) {
            this.state = 637;
            this.match(CypherParser.T__10);
            this.state = 638;
            this.searchparameter();
            this.state = 643;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SearchparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_searchparameter;
    return this;
}

SearchparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SearchparameterContext.prototype.constructor = SearchparameterContext;

SearchparameterContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

SearchparameterContext.prototype.urlDigits = function() {
    return this.getTypedRuleContext(UrlDigitsContext,0);
};

SearchparameterContext.prototype.UrlHex = function() {
    return this.getToken(CypherParser.UrlHex, 0);
};

SearchparameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSearchparameter(this);
	}
};

SearchparameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSearchparameter(this);
	}
};




CypherParser.SearchparameterContext = SearchparameterContext;

CypherParser.prototype.searchparameter = function() {

    var localctx = new SearchparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CypherParser.RULE_searchparameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.string();
        this.state = 651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__11) {
            this.state = 645;
            this.match(CypherParser.T__11);
            this.state = 649;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CypherParser.CYPHER:
            case CypherParser.EXPLAIN:
            case CypherParser.PROFILE:
            case CypherParser.USING:
            case CypherParser.PERIODIC:
            case CypherParser.COMMIT:
            case CypherParser.UNION:
            case CypherParser.ALL:
            case CypherParser.CREATE:
            case CypherParser.DROP:
            case CypherParser.INDEX:
            case CypherParser.ON:
            case CypherParser.CONSTRAINT:
            case CypherParser.ASSERT:
            case CypherParser.IS:
            case CypherParser.UNIQUE:
            case CypherParser.EXISTS:
            case CypherParser.LOAD:
            case CypherParser.CSV:
            case CypherParser.WITH:
            case CypherParser.HEADERS:
            case CypherParser.FROM:
            case CypherParser.AS:
            case CypherParser.FIELDTERMINATOR:
            case CypherParser.OPTIONAL:
            case CypherParser.MATCH:
            case CypherParser.UNWIND:
            case CypherParser.MERGE:
            case CypherParser.SET:
            case CypherParser.DETACH:
            case CypherParser.DELETE:
            case CypherParser.REMOVE:
            case CypherParser.FOREACH:
            case CypherParser.IN:
            case CypherParser.DISTINCT:
            case CypherParser.RETURN:
            case CypherParser.ORDER:
            case CypherParser.BY:
            case CypherParser.L_SKIP:
            case CypherParser.LIMIT:
            case CypherParser.ASCENDING:
            case CypherParser.ASC:
            case CypherParser.DESCENDING:
            case CypherParser.DESC:
            case CypherParser.JOIN:
            case CypherParser.SCAN:
            case CypherParser.START:
            case CypherParser.NODE:
            case CypherParser.RELATIONSHIP:
            case CypherParser.REL:
            case CypherParser.WHERE:
            case CypherParser.SHORTESTPATH:
            case CypherParser.ALLSHORTESTPATHS:
            case CypherParser.OR:
            case CypherParser.XOR:
            case CypherParser.AND:
            case CypherParser.NOT:
            case CypherParser.STARTS:
            case CypherParser.ENDS:
            case CypherParser.CONTAINS:
            case CypherParser.NULL:
            case CypherParser.COUNT:
            case CypherParser.FILTER:
            case CypherParser.EXTRACT:
            case CypherParser.ANY:
            case CypherParser.NONE:
            case CypherParser.SINGLE:
            case CypherParser.TRUE:
            case CypherParser.FALSE:
            case CypherParser.REDUCE:
            case CypherParser.CASE:
            case CypherParser.ELSE:
            case CypherParser.END:
            case CypherParser.WHEN:
            case CypherParser.THEN:
            case CypherParser.CALL:
            case CypherParser.YIELD:
            case CypherParser.KEY:
            case CypherParser.CATALOG:
            case CypherParser.SHOW:
            case CypherParser.DEFAULT:
            case CypherParser.DBMS:
            case CypherParser.DATABASE:
            case CypherParser.DATABASES:
            case CypherParser.GRAPH:
            case CypherParser.GRAPHS:
            case CypherParser.REPLACE:
            case CypherParser.IF:
            case CypherParser.STOP:
            case CypherParser.ROLE:
            case CypherParser.ROLES:
            case CypherParser.USER:
            case CypherParser.USERS:
            case CypherParser.POPULATED:
            case CypherParser.PASSWORD:
            case CypherParser.CHANGE:
            case CypherParser.REQUIRED:
            case CypherParser.STATUS:
            case CypherParser.ACTIVE:
            case CypherParser.SUSPENDED:
            case CypherParser.ALTER:
            case CypherParser.CURRENT:
            case CypherParser.TO:
            case CypherParser.PRIVILEGES:
            case CypherParser.GRANT:
            case CypherParser.DENY:
            case CypherParser.REVOKE:
            case CypherParser.RELATIONSHIPS:
            case CypherParser.NODES:
            case CypherParser.ELEMENT:
            case CypherParser.ELEMENTS:
            case CypherParser.COPY:
            case CypherParser.OF:
            case CypherParser.TRAVERSE:
            case CypherParser.READ:
            case CypherParser.WRITE:
            case CypherParser.ACCESS:
            case CypherParser.INDEXES:
            case CypherParser.MANAGEMENT:
            case CypherParser.NEW:
            case CypherParser.LABEL:
            case CypherParser.LABELS:
            case CypherParser.NAME:
            case CypherParser.NAMES:
            case CypherParser.TYPE:
            case CypherParser.TYPES:
            case CypherParser.PROPERTY:
            case CypherParser.CONSTRAINTS:
            case CypherParser.ASSIGN:
            case CypherParser.BTREE:
            case CypherParser.EXIST:
            case CypherParser.FOR:
            case CypherParser.OPTIONS:
            case CypherParser.EXECUTE:
            case CypherParser.DEFINED:
            case CypherParser.FUNCTION:
            case CypherParser.FUNCTIONS:
            case CypherParser.BOOSTED:
            case CypherParser.PROCEDURE:
            case CypherParser.PROCEDURES:
            case CypherParser.ADMIN:
            case CypherParser.ADMINISTRATOR:
            case CypherParser.BRIEF:
            case CypherParser.VERBOSE:
            case CypherParser.OUTPUT:
            case CypherParser.BUILT:
            case CypherParser.EACH:
            case CypherParser.EXECUTABLE:
            case CypherParser.EXISTENCE:
            case CypherParser.FULLTEXT:
            case CypherParser.HOME:
            case CypherParser.LOOKUP:
            case CypherParser.RENAME:
            case CypherParser.HexLetter:
            case CypherParser.UnescapedSymbolicName:
            case CypherParser.EscapedSymbolicName:
                this.state = 646;
                this.string();
                break;
            case CypherParser.HexInteger:
            case CypherParser.DecimalInteger:
            case CypherParser.OctalInteger:
                this.state = 647;
                this.urlDigits();
                break;
            case CypherParser.UrlHex:
                this.state = 648;
                this.match(CypherParser.UrlHex);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitString(this);
	}
};




CypherParser.StringContext = StringContext;

CypherParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CypherParser.RULE_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 653;
        this.symbolicName();
        this.state = 660;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 655;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.T__6 || _la===CypherParser.T__12) {
                    this.state = 654;
                    _la = this._input.LA(1);
                    if(!(_la===CypherParser.T__6 || _la===CypherParser.T__12)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 657;
                this.symbolicName(); 
            }
            this.state = 662;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UrlDigitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_urlDigits;
    return this;
}

UrlDigitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UrlDigitsContext.prototype.constructor = UrlDigitsContext;

UrlDigitsContext.prototype.integerLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
    } else {
        return this.getTypedRuleContext(IntegerLiteralContext,i);
    }
};

UrlDigitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUrlDigits(this);
	}
};

UrlDigitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUrlDigits(this);
	}
};




CypherParser.UrlDigitsContext = UrlDigitsContext;

CypherParser.prototype.urlDigits = function() {

    var localctx = new UrlDigitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CypherParser.RULE_urlDigits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 663;
            this.integerLiteral();
            this.state = 666; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 210)) & ~0x1f) == 0 && ((1 << (_la - 210)) & ((1 << (CypherParser.HexInteger - 210)) | (1 << (CypherParser.DecimalInteger - 210)) | (1 << (CypherParser.OctalInteger - 210)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JsonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_json;
    return this;
}

JsonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JsonContext.prototype.constructor = JsonContext;

JsonContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

JsonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterJson(this);
	}
};

JsonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitJson(this);
	}
};




CypherParser.JsonContext = JsonContext;

CypherParser.prototype.json = function() {

    var localctx = new JsonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CypherParser.RULE_json);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_obj;
    return this;
}

ObjContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjContext.prototype.constructor = ObjContext;

ObjContext.prototype.pair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PairContext);
    } else {
        return this.getTypedRuleContext(PairContext,i);
    }
};

ObjContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ObjContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterObj(this);
	}
};

ObjContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitObj(this);
	}
};




CypherParser.ObjContext = ObjContext;

CypherParser.prototype.obj = function() {

    var localctx = new ObjContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CypherParser.RULE_obj);
    var _la = 0; // Token type
    try {
        this.state = 698;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 670;
            this.match(CypherParser.T__13);
            this.state = 672;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 671;
                this.match(CypherParser.SP);
            }

            this.state = 674;
            this.pair();
            this.state = 676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 675;
                this.match(CypherParser.SP);
            }

            this.state = 688;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 678;
                this.match(CypherParser.T__14);
                this.state = 680;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 679;
                    this.match(CypherParser.SP);
                }

                this.state = 682;
                this.pair();
                this.state = 684;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 683;
                    this.match(CypherParser.SP);
                }

                this.state = 690;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 691;
            this.match(CypherParser.T__15);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 693;
            this.match(CypherParser.T__13);
            this.state = 695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 694;
                this.match(CypherParser.SP);
            }

            this.state = 697;
            this.match(CypherParser.T__15);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_pair;
    return this;
}

PairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PairContext.prototype.constructor = PairContext;

PairContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

PairContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

PairContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PairContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPair(this);
	}
};

PairContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPair(this);
	}
};




CypherParser.PairContext = PairContext;

CypherParser.prototype.pair = function() {

    var localctx = new PairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CypherParser.RULE_pair);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 700;
        this.stringLiteral();
        this.state = 702;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 701;
            this.match(CypherParser.SP);
        }

        this.state = 704;
        this.match(CypherParser.T__1);
        this.state = 706;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 705;
            this.match(CypherParser.SP);
        }

        this.state = 708;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

ArrayContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitArray(this);
	}
};




CypherParser.ArrayContext = ArrayContext;

CypherParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CypherParser.RULE_array);
    var _la = 0; // Token type
    try {
        this.state = 738;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 710;
            this.match(CypherParser.T__16);
            this.state = 712;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 711;
                this.match(CypherParser.SP);
            }

            this.state = 714;
            this.value();
            this.state = 716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 715;
                this.match(CypherParser.SP);
            }

            this.state = 728;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 718;
                this.match(CypherParser.T__14);
                this.state = 720;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 719;
                    this.match(CypherParser.SP);
                }

                this.state = 722;
                this.value();
                this.state = 724;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 723;
                    this.match(CypherParser.SP);
                }

                this.state = 730;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 731;
            this.match(CypherParser.T__17);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 733;
            this.match(CypherParser.T__16);
            this.state = 735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 734;
                this.match(CypherParser.SP);
            }

            this.state = 737;
            this.match(CypherParser.T__17);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ValueContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

ValueContext.prototype.obj = function() {
    return this.getTypedRuleContext(ObjContext,0);
};

ValueContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

ValueContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

ValueContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitValue(this);
	}
};




CypherParser.ValueContext = ValueContext;

CypherParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CypherParser.RULE_value);
    try {
        this.state = 746;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.StringLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 740;
            this.stringLiteral();
            break;
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
            this.enterOuterAlt(localctx, 2);
            this.state = 741;
            this.numberLiteral();
            break;
        case CypherParser.T__13:
            this.enterOuterAlt(localctx, 3);
            this.state = 742;
            this.obj();
            break;
        case CypherParser.T__16:
            this.enterOuterAlt(localctx, 4);
            this.state = 743;
            this.array();
            break;
        case CypherParser.TRUE:
        case CypherParser.FALSE:
            this.enterOuterAlt(localctx, 5);
            this.state = 744;
            this.booleanLiteral();
            break;
        case CypherParser.NULL:
            this.enterOuterAlt(localctx, 6);
            this.state = 745;
            this.match(CypherParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyValueLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_keyValueLiteral;
    return this;
}

KeyValueLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyValueLiteralContext.prototype.constructor = KeyValueLiteralContext;

KeyValueLiteralContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

KeyValueLiteralContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

KeyValueLiteralContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

KeyValueLiteralContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

KeyValueLiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

KeyValueLiteralContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

KeyValueLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterKeyValueLiteral(this);
	}
};

KeyValueLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitKeyValueLiteral(this);
	}
};




CypherParser.KeyValueLiteralContext = KeyValueLiteralContext;

CypherParser.prototype.keyValueLiteral = function() {

    var localctx = new KeyValueLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CypherParser.RULE_keyValueLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 748;
        this.variable();
        this.state = 749;
        this.match(CypherParser.T__1);
        this.state = 750;
        this.match(CypherParser.SP);
        this.state = 755;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.state = 751;
            this.match(CypherParser.StringLiteral);
            break;

        case 2:
            this.state = 752;
            this.numberLiteral();
            break;

        case 3:
            this.state = 753;
            this.booleanLiteral();
            break;

        case 4:
            this.state = 754;
            this.symbolicName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommandPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_commandPath;
    return this;
}

CommandPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommandPathContext.prototype.constructor = CommandPathContext;

CommandPathContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

CommandPathContext.prototype.numberLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberLiteralContext);
    } else {
        return this.getTypedRuleContext(NumberLiteralContext,i);
    }
};

CommandPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCommandPath(this);
	}
};

CommandPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCommandPath(this);
	}
};




CypherParser.CommandPathContext = CommandPathContext;

CypherParser.prototype.commandPath = function() {

    var localctx = new CommandPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CypherParser.RULE_commandPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 762; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 757;
        		this.match(CypherParser.T__5);
        		this.state = 760;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case CypherParser.CYPHER:
        		case CypherParser.EXPLAIN:
        		case CypherParser.PROFILE:
        		case CypherParser.USING:
        		case CypherParser.PERIODIC:
        		case CypherParser.COMMIT:
        		case CypherParser.UNION:
        		case CypherParser.ALL:
        		case CypherParser.CREATE:
        		case CypherParser.DROP:
        		case CypherParser.INDEX:
        		case CypherParser.ON:
        		case CypherParser.CONSTRAINT:
        		case CypherParser.ASSERT:
        		case CypherParser.IS:
        		case CypherParser.UNIQUE:
        		case CypherParser.EXISTS:
        		case CypherParser.LOAD:
        		case CypherParser.CSV:
        		case CypherParser.WITH:
        		case CypherParser.HEADERS:
        		case CypherParser.FROM:
        		case CypherParser.AS:
        		case CypherParser.FIELDTERMINATOR:
        		case CypherParser.OPTIONAL:
        		case CypherParser.MATCH:
        		case CypherParser.UNWIND:
        		case CypherParser.MERGE:
        		case CypherParser.SET:
        		case CypherParser.DETACH:
        		case CypherParser.DELETE:
        		case CypherParser.REMOVE:
        		case CypherParser.FOREACH:
        		case CypherParser.IN:
        		case CypherParser.DISTINCT:
        		case CypherParser.RETURN:
        		case CypherParser.ORDER:
        		case CypherParser.BY:
        		case CypherParser.L_SKIP:
        		case CypherParser.LIMIT:
        		case CypherParser.ASCENDING:
        		case CypherParser.ASC:
        		case CypherParser.DESCENDING:
        		case CypherParser.DESC:
        		case CypherParser.JOIN:
        		case CypherParser.SCAN:
        		case CypherParser.START:
        		case CypherParser.NODE:
        		case CypherParser.RELATIONSHIP:
        		case CypherParser.REL:
        		case CypherParser.WHERE:
        		case CypherParser.SHORTESTPATH:
        		case CypherParser.ALLSHORTESTPATHS:
        		case CypherParser.OR:
        		case CypherParser.XOR:
        		case CypherParser.AND:
        		case CypherParser.NOT:
        		case CypherParser.STARTS:
        		case CypherParser.ENDS:
        		case CypherParser.CONTAINS:
        		case CypherParser.NULL:
        		case CypherParser.COUNT:
        		case CypherParser.FILTER:
        		case CypherParser.EXTRACT:
        		case CypherParser.ANY:
        		case CypherParser.NONE:
        		case CypherParser.SINGLE:
        		case CypherParser.TRUE:
        		case CypherParser.FALSE:
        		case CypherParser.REDUCE:
        		case CypherParser.CASE:
        		case CypherParser.ELSE:
        		case CypherParser.END:
        		case CypherParser.WHEN:
        		case CypherParser.THEN:
        		case CypherParser.CALL:
        		case CypherParser.YIELD:
        		case CypherParser.KEY:
        		case CypherParser.CATALOG:
        		case CypherParser.SHOW:
        		case CypherParser.DEFAULT:
        		case CypherParser.DBMS:
        		case CypherParser.DATABASE:
        		case CypherParser.DATABASES:
        		case CypherParser.GRAPH:
        		case CypherParser.GRAPHS:
        		case CypherParser.REPLACE:
        		case CypherParser.IF:
        		case CypherParser.STOP:
        		case CypherParser.ROLE:
        		case CypherParser.ROLES:
        		case CypherParser.USER:
        		case CypherParser.USERS:
        		case CypherParser.POPULATED:
        		case CypherParser.PASSWORD:
        		case CypherParser.CHANGE:
        		case CypherParser.REQUIRED:
        		case CypherParser.STATUS:
        		case CypherParser.ACTIVE:
        		case CypherParser.SUSPENDED:
        		case CypherParser.ALTER:
        		case CypherParser.CURRENT:
        		case CypherParser.TO:
        		case CypherParser.PRIVILEGES:
        		case CypherParser.GRANT:
        		case CypherParser.DENY:
        		case CypherParser.REVOKE:
        		case CypherParser.RELATIONSHIPS:
        		case CypherParser.NODES:
        		case CypherParser.ELEMENT:
        		case CypherParser.ELEMENTS:
        		case CypherParser.COPY:
        		case CypherParser.OF:
        		case CypherParser.TRAVERSE:
        		case CypherParser.READ:
        		case CypherParser.WRITE:
        		case CypherParser.ACCESS:
        		case CypherParser.INDEXES:
        		case CypherParser.MANAGEMENT:
        		case CypherParser.NEW:
        		case CypherParser.LABEL:
        		case CypherParser.LABELS:
        		case CypherParser.NAME:
        		case CypherParser.NAMES:
        		case CypherParser.TYPE:
        		case CypherParser.TYPES:
        		case CypherParser.PROPERTY:
        		case CypherParser.CONSTRAINTS:
        		case CypherParser.ASSIGN:
        		case CypherParser.BTREE:
        		case CypherParser.EXIST:
        		case CypherParser.FOR:
        		case CypherParser.OPTIONS:
        		case CypherParser.EXECUTE:
        		case CypherParser.DEFINED:
        		case CypherParser.FUNCTION:
        		case CypherParser.FUNCTIONS:
        		case CypherParser.BOOSTED:
        		case CypherParser.PROCEDURE:
        		case CypherParser.PROCEDURES:
        		case CypherParser.ADMIN:
        		case CypherParser.ADMINISTRATOR:
        		case CypherParser.BRIEF:
        		case CypherParser.VERBOSE:
        		case CypherParser.OUTPUT:
        		case CypherParser.BUILT:
        		case CypherParser.EACH:
        		case CypherParser.EXECUTABLE:
        		case CypherParser.EXISTENCE:
        		case CypherParser.FULLTEXT:
        		case CypherParser.HOME:
        		case CypherParser.LOOKUP:
        		case CypherParser.RENAME:
        		case CypherParser.HexLetter:
        		case CypherParser.UnescapedSymbolicName:
        		case CypherParser.EscapedSymbolicName:
        		    this.state = 758;
        		    this.symbolicName();
        		    break;
        		case CypherParser.HexInteger:
        		case CypherParser.DecimalInteger:
        		case CypherParser.OctalInteger:
        		case CypherParser.ExponentDecimalReal:
        		case CypherParser.RegularDecimalReal:
        		    this.state = 759;
        		    this.numberLiteral();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 764; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,47, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__5) {
            this.state = 766;
            this.match(CypherParser.T__5);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_subCommand;
    return this;
}

SubCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubCommandContext.prototype.constructor = SubCommandContext;

SubCommandContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

SubCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSubCommand(this);
	}
};

SubCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSubCommand(this);
	}
};




CypherParser.SubCommandContext = SubCommandContext;

CypherParser.prototype.subCommand = function() {

    var localctx = new SubCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CypherParser.RULE_subCommand);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 769;
        this.symbolicName();
        this.state = 774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__2) {
            this.state = 770;
            this.match(CypherParser.T__2);
            this.state = 771;
            this.symbolicName();
            this.state = 776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherQuery;
    return this;
}

CypherQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherQueryContext.prototype.constructor = CypherQueryContext;

CypherQueryContext.prototype.queryOptions = function() {
    return this.getTypedRuleContext(QueryOptionsContext,0);
};

CypherQueryContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

CypherQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherQuery(this);
	}
};

CypherQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherQuery(this);
	}
};




CypherParser.CypherQueryContext = CypherQueryContext;

CypherParser.prototype.cypherQuery = function() {

    var localctx = new CypherQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CypherParser.RULE_cypherQuery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        this.queryOptions();
        this.state = 778;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_queryOptions;
    return this;
}

QueryOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryOptionsContext.prototype.constructor = QueryOptionsContext;

QueryOptionsContext.prototype.anyCypherOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnyCypherOptionContext);
    } else {
        return this.getTypedRuleContext(AnyCypherOptionContext,i);
    }
};

QueryOptionsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


QueryOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterQueryOptions(this);
	}
};

QueryOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitQueryOptions(this);
	}
};




CypherParser.QueryOptionsContext = QueryOptionsContext;

CypherParser.prototype.queryOptions = function() {

    var localctx = new QueryOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CypherParser.RULE_queryOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 786;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)))) !== 0)) {
            this.state = 780;
            this.anyCypherOption();
            this.state = 782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 781;
                this.match(CypherParser.SP);
            }

            this.state = 788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnyCypherOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyCypherOption;
    return this;
}

AnyCypherOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnyCypherOptionContext.prototype.constructor = AnyCypherOptionContext;

AnyCypherOptionContext.prototype.cypherOption = function() {
    return this.getTypedRuleContext(CypherOptionContext,0);
};

AnyCypherOptionContext.prototype.explain = function() {
    return this.getTypedRuleContext(ExplainContext,0);
};

AnyCypherOptionContext.prototype.profile = function() {
    return this.getTypedRuleContext(ProfileContext,0);
};

AnyCypherOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAnyCypherOption(this);
	}
};

AnyCypherOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAnyCypherOption(this);
	}
};




CypherParser.AnyCypherOptionContext = AnyCypherOptionContext;

CypherParser.prototype.anyCypherOption = function() {

    var localctx = new AnyCypherOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CypherParser.RULE_anyCypherOption);
    try {
        this.state = 792;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
            this.enterOuterAlt(localctx, 1);
            this.state = 789;
            this.cypherOption();
            break;
        case CypherParser.EXPLAIN:
            this.enterOuterAlt(localctx, 2);
            this.state = 790;
            this.explain();
            break;
        case CypherParser.PROFILE:
            this.enterOuterAlt(localctx, 3);
            this.state = 791;
            this.profile();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CypherOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_cypherOption;
    return this;
}

CypherOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CypherOptionContext.prototype.constructor = CypherOptionContext;

CypherOptionContext.prototype.CYPHER = function() {
    return this.getToken(CypherParser.CYPHER, 0);
};

CypherOptionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CypherOptionContext.prototype.versionNumber = function() {
    return this.getTypedRuleContext(VersionNumberContext,0);
};

CypherOptionContext.prototype.configurationOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConfigurationOptionContext);
    } else {
        return this.getTypedRuleContext(ConfigurationOptionContext,i);
    }
};

CypherOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCypherOption(this);
	}
};

CypherOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCypherOption(this);
	}
};




CypherParser.CypherOptionContext = CypherOptionContext;

CypherParser.prototype.cypherOption = function() {

    var localctx = new CypherOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CypherParser.RULE_cypherOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(CypherParser.CYPHER);
        this.state = 797;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 795;
            this.match(CypherParser.SP);
            this.state = 796;
            this.versionNumber();

        }
        this.state = 803;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 799;
                this.match(CypherParser.SP);
                this.state = 800;
                this.configurationOption(); 
            }
            this.state = 805;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_versionNumber;
    return this;
}

VersionNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionNumberContext.prototype.constructor = VersionNumberContext;

VersionNumberContext.prototype.RegularDecimalReal = function() {
    return this.getToken(CypherParser.RegularDecimalReal, 0);
};

VersionNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterVersionNumber(this);
	}
};

VersionNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitVersionNumber(this);
	}
};




CypherParser.VersionNumberContext = VersionNumberContext;

CypherParser.prototype.versionNumber = function() {

    var localctx = new VersionNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CypherParser.RULE_versionNumber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this.match(CypherParser.RegularDecimalReal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_explain;
    return this;
}

ExplainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(CypherParser.EXPLAIN, 0);
};

ExplainContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExplain(this);
	}
};

ExplainContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExplain(this);
	}
};




CypherParser.ExplainContext = ExplainContext;

CypherParser.prototype.explain = function() {

    var localctx = new ExplainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CypherParser.RULE_explain);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this.match(CypherParser.EXPLAIN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProfileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_profile;
    return this;
}

ProfileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProfileContext.prototype.constructor = ProfileContext;

ProfileContext.prototype.PROFILE = function() {
    return this.getToken(CypherParser.PROFILE, 0);
};

ProfileContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProfile(this);
	}
};

ProfileContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProfile(this);
	}
};




CypherParser.ProfileContext = ProfileContext;

CypherParser.prototype.profile = function() {

    var localctx = new ProfileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CypherParser.RULE_profile);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 810;
        this.match(CypherParser.PROFILE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConfigurationOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_configurationOption;
    return this;
}

ConfigurationOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConfigurationOptionContext.prototype.constructor = ConfigurationOptionContext;

ConfigurationOptionContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

ConfigurationOptionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ConfigurationOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterConfigurationOption(this);
	}
};

ConfigurationOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitConfigurationOption(this);
	}
};




CypherParser.ConfigurationOptionContext = ConfigurationOptionContext;

CypherParser.prototype.configurationOption = function() {

    var localctx = new ConfigurationOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CypherParser.RULE_configurationOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        this.symbolicName();
        this.state = 814;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 813;
            this.match(CypherParser.SP);
        }

        this.state = 816;
        this.match(CypherParser.T__11);
        this.state = 818;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 817;
            this.match(CypherParser.SP);
        }

        this.state = 820;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.command = function() {
    return this.getTypedRuleContext(CommandContext,0);
};

StatementContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

StatementContext.prototype.systemCommand = function() {
    return this.getTypedRuleContext(SystemCommandContext,0);
};

StatementContext.prototype.CATALOG = function() {
    return this.getToken(CypherParser.CATALOG, 0);
};

StatementContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStatement(this);
	}
};




CypherParser.StatementContext = StatementContext;

CypherParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CypherParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 829;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 822;
            this.command();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 823;
            this.query();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.CATALOG) {
                this.state = 824;
                this.match(CypherParser.CATALOG);
                this.state = 825;
                this.match(CypherParser.SP);
            }

            this.state = 828;
            this.systemCommand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.regularQuery = function() {
    return this.getTypedRuleContext(RegularQueryContext,0);
};

QueryContext.prototype.bulkImportQuery = function() {
    return this.getTypedRuleContext(BulkImportQueryContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitQuery(this);
	}
};




CypherParser.QueryContext = QueryContext;

CypherParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CypherParser.RULE_query);
    try {
        this.state = 833;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CREATE:
        case CypherParser.LOAD:
        case CypherParser.WITH:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.RETURN:
        case CypherParser.START:
        case CypherParser.CALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 831;
            this.regularQuery();
            break;
        case CypherParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 832;
            this.bulkImportQuery();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RegularQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_regularQuery;
    return this;
}

RegularQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RegularQueryContext.prototype.constructor = RegularQueryContext;

RegularQueryContext.prototype.singleQuery = function() {
    return this.getTypedRuleContext(SingleQueryContext,0);
};

RegularQueryContext.prototype.union = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnionContext);
    } else {
        return this.getTypedRuleContext(UnionContext,i);
    }
};

RegularQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RegularQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRegularQuery(this);
	}
};

RegularQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRegularQuery(this);
	}
};




CypherParser.RegularQueryContext = RegularQueryContext;

CypherParser.prototype.regularQuery = function() {

    var localctx = new RegularQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CypherParser.RULE_regularQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 835;
        this.singleQuery();
        this.state = 842;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 837;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 836;
                    this.match(CypherParser.SP);
                }

                this.state = 839;
                this.union(); 
            }
            this.state = 844;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BulkImportQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_bulkImportQuery;
    return this;
}

BulkImportQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BulkImportQueryContext.prototype.constructor = BulkImportQueryContext;

BulkImportQueryContext.prototype.periodicCommitHint = function() {
    return this.getTypedRuleContext(PeriodicCommitHintContext,0);
};

BulkImportQueryContext.prototype.loadCSVQuery = function() {
    return this.getTypedRuleContext(LoadCSVQueryContext,0);
};

BulkImportQueryContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

BulkImportQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterBulkImportQuery(this);
	}
};

BulkImportQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitBulkImportQuery(this);
	}
};




CypherParser.BulkImportQueryContext = BulkImportQueryContext;

CypherParser.prototype.bulkImportQuery = function() {

    var localctx = new BulkImportQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CypherParser.RULE_bulkImportQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 845;
        this.periodicCommitHint();
        this.state = 847;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 846;
            this.match(CypherParser.SP);
        }

        this.state = 849;
        this.loadCSVQuery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleQuery;
    return this;
}

SingleQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleQueryContext.prototype.constructor = SingleQueryContext;

SingleQueryContext.prototype.clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClauseContext);
    } else {
        return this.getTypedRuleContext(ClauseContext,i);
    }
};

SingleQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SingleQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSingleQuery(this);
	}
};

SingleQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSingleQuery(this);
	}
};




CypherParser.SingleQueryContext = SingleQueryContext;

CypherParser.prototype.singleQuery = function() {

    var localctx = new SingleQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CypherParser.RULE_singleQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.clause();
        this.state = 858;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 853;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 852;
                    this.match(CypherParser.SP);
                }

                this.state = 855;
                this.clause(); 
            }
            this.state = 860;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PeriodicCommitHintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_periodicCommitHint;
    return this;
}

PeriodicCommitHintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PeriodicCommitHintContext.prototype.constructor = PeriodicCommitHintContext;

PeriodicCommitHintContext.prototype.USING = function() {
    return this.getToken(CypherParser.USING, 0);
};

PeriodicCommitHintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PeriodicCommitHintContext.prototype.PERIODIC = function() {
    return this.getToken(CypherParser.PERIODIC, 0);
};

PeriodicCommitHintContext.prototype.COMMIT = function() {
    return this.getToken(CypherParser.COMMIT, 0);
};

PeriodicCommitHintContext.prototype.integerLiteral = function() {
    return this.getTypedRuleContext(IntegerLiteralContext,0);
};

PeriodicCommitHintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPeriodicCommitHint(this);
	}
};

PeriodicCommitHintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPeriodicCommitHint(this);
	}
};




CypherParser.PeriodicCommitHintContext = PeriodicCommitHintContext;

CypherParser.prototype.periodicCommitHint = function() {

    var localctx = new PeriodicCommitHintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CypherParser.RULE_periodicCommitHint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 861;
        this.match(CypherParser.USING);
        this.state = 862;
        this.match(CypherParser.SP);
        this.state = 863;
        this.match(CypherParser.PERIODIC);
        this.state = 864;
        this.match(CypherParser.SP);
        this.state = 865;
        this.match(CypherParser.COMMIT);
        this.state = 868;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 866;
            this.match(CypherParser.SP);
            this.state = 867;
            this.integerLiteral();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoadCSVQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_loadCSVQuery;
    return this;
}

LoadCSVQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadCSVQueryContext.prototype.constructor = LoadCSVQueryContext;

LoadCSVQueryContext.prototype.loadCSVClause = function() {
    return this.getTypedRuleContext(LoadCSVClauseContext,0);
};

LoadCSVQueryContext.prototype.clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClauseContext);
    } else {
        return this.getTypedRuleContext(ClauseContext,i);
    }
};

LoadCSVQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LoadCSVQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLoadCSVQuery(this);
	}
};

LoadCSVQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLoadCSVQuery(this);
	}
};




CypherParser.LoadCSVQueryContext = LoadCSVQueryContext;

CypherParser.prototype.loadCSVQuery = function() {

    var localctx = new LoadCSVQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CypherParser.RULE_loadCSVQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.loadCSVClause();
        this.state = 877;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 872;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 871;
                    this.match(CypherParser.SP);
                }

                this.state = 874;
                this.clause(); 
            }
            this.state = 879;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_union;
    return this;
}

UnionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionContext.prototype.constructor = UnionContext;

UnionContext.prototype.UNION = function() {
    return this.getToken(CypherParser.UNION, 0);
};

UnionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


UnionContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

UnionContext.prototype.singleQuery = function() {
    return this.getTypedRuleContext(SingleQueryContext,0);
};

UnionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUnion(this);
	}
};

UnionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUnion(this);
	}
};




CypherParser.UnionContext = UnionContext;

CypherParser.prototype.union = function() {

    var localctx = new UnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CypherParser.RULE_union);
    var _la = 0; // Token type
    try {
        this.state = 892;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 880;
            this.match(CypherParser.UNION);
            this.state = 881;
            this.match(CypherParser.SP);
            this.state = 882;
            this.match(CypherParser.ALL);
            this.state = 884;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 883;
                this.match(CypherParser.SP);
            }

            this.state = 886;
            this.singleQuery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 887;
            this.match(CypherParser.UNION);
            this.state = 889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 888;
                this.match(CypherParser.SP);
            }

            this.state = 891;
            this.singleQuery();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_clause;
    return this;
}

ClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClauseContext.prototype.constructor = ClauseContext;

ClauseContext.prototype.loadCSVClause = function() {
    return this.getTypedRuleContext(LoadCSVClauseContext,0);
};

ClauseContext.prototype.startClause = function() {
    return this.getTypedRuleContext(StartClauseContext,0);
};

ClauseContext.prototype.matchClause = function() {
    return this.getTypedRuleContext(MatchClauseContext,0);
};

ClauseContext.prototype.unwindClause = function() {
    return this.getTypedRuleContext(UnwindClauseContext,0);
};

ClauseContext.prototype.mergeClause = function() {
    return this.getTypedRuleContext(MergeClauseContext,0);
};

ClauseContext.prototype.createClause = function() {
    return this.getTypedRuleContext(CreateClauseContext,0);
};

ClauseContext.prototype.createUniqueClause = function() {
    return this.getTypedRuleContext(CreateUniqueClauseContext,0);
};

ClauseContext.prototype.setClause = function() {
    return this.getTypedRuleContext(SetClauseContext,0);
};

ClauseContext.prototype.deleteClause = function() {
    return this.getTypedRuleContext(DeleteClauseContext,0);
};

ClauseContext.prototype.removeClause = function() {
    return this.getTypedRuleContext(RemoveClauseContext,0);
};

ClauseContext.prototype.foreachClause = function() {
    return this.getTypedRuleContext(ForeachClauseContext,0);
};

ClauseContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

ClauseContext.prototype.returnClause = function() {
    return this.getTypedRuleContext(ReturnClauseContext,0);
};

ClauseContext.prototype.call = function() {
    return this.getTypedRuleContext(CallContext,0);
};

ClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterClause(this);
	}
};

ClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitClause(this);
	}
};




CypherParser.ClauseContext = ClauseContext;

CypherParser.prototype.clause = function() {

    var localctx = new ClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CypherParser.RULE_clause);
    try {
        this.state = 908;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 894;
            this.loadCSVClause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 895;
            this.startClause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 896;
            this.matchClause();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 897;
            this.unwindClause();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 898;
            this.mergeClause();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 899;
            this.createClause();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 900;
            this.createUniqueClause();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 901;
            this.setClause();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 902;
            this.deleteClause();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 903;
            this.removeClause();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 904;
            this.foreachClause();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 905;
            this.withClause();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 906;
            this.returnClause();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 907;
            this.call();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_command;
    return this;
}

CommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommandContext.prototype.constructor = CommandContext;

CommandContext.prototype.createIndex = function() {
    return this.getTypedRuleContext(CreateIndexContext,0);
};

CommandContext.prototype.dropIndex = function() {
    return this.getTypedRuleContext(DropIndexContext,0);
};

CommandContext.prototype.createUniqueConstraint = function() {
    return this.getTypedRuleContext(CreateUniqueConstraintContext,0);
};

CommandContext.prototype.dropUniqueConstraint = function() {
    return this.getTypedRuleContext(DropUniqueConstraintContext,0);
};

CommandContext.prototype.createNodeKeyConstraint = function() {
    return this.getTypedRuleContext(CreateNodeKeyConstraintContext,0);
};

CommandContext.prototype.dropNodeKeyConstraint = function() {
    return this.getTypedRuleContext(DropNodeKeyConstraintContext,0);
};

CommandContext.prototype.createNodePropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(CreateNodePropertyExistenceConstraintContext,0);
};

CommandContext.prototype.dropNodePropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(DropNodePropertyExistenceConstraintContext,0);
};

CommandContext.prototype.createRelationshipPropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(CreateRelationshipPropertyExistenceConstraintContext,0);
};

CommandContext.prototype.dropRelationshipPropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(DropRelationshipPropertyExistenceConstraintContext,0);
};

CommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCommand(this);
	}
};

CommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCommand(this);
	}
};




CypherParser.CommandContext = CommandContext;

CypherParser.prototype.command = function() {

    var localctx = new CommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CypherParser.RULE_command);
    try {
        this.state = 920;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 910;
            this.createIndex();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 911;
            this.dropIndex();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 912;
            this.createUniqueConstraint();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 913;
            this.dropUniqueConstraint();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 914;
            this.createNodeKeyConstraint();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 915;
            this.dropNodeKeyConstraint();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 916;
            this.createNodePropertyExistenceConstraint();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 917;
            this.dropNodePropertyExistenceConstraint();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 918;
            this.createRelationshipPropertyExistenceConstraint();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 919;
            this.dropRelationshipPropertyExistenceConstraint();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SystemCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_systemCommand;
    return this;
}

SystemCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SystemCommandContext.prototype.constructor = SystemCommandContext;

SystemCommandContext.prototype.multidatabaseCommand = function() {
    return this.getTypedRuleContext(MultidatabaseCommandContext,0);
};

SystemCommandContext.prototype.userCommand = function() {
    return this.getTypedRuleContext(UserCommandContext,0);
};

SystemCommandContext.prototype.privilegeCommand = function() {
    return this.getTypedRuleContext(PrivilegeCommandContext,0);
};

SystemCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSystemCommand(this);
	}
};

SystemCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSystemCommand(this);
	}
};




CypherParser.SystemCommandContext = SystemCommandContext;

CypherParser.prototype.systemCommand = function() {

    var localctx = new SystemCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CypherParser.RULE_systemCommand);
    try {
        this.state = 925;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 922;
            this.multidatabaseCommand();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 923;
            this.userCommand();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 924;
            this.privilegeCommand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultidatabaseCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_multidatabaseCommand;
    return this;
}

MultidatabaseCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultidatabaseCommandContext.prototype.constructor = MultidatabaseCommandContext;

MultidatabaseCommandContext.prototype.showDatabase = function() {
    return this.getTypedRuleContext(ShowDatabaseContext,0);
};

MultidatabaseCommandContext.prototype.createDatabase = function() {
    return this.getTypedRuleContext(CreateDatabaseContext,0);
};

MultidatabaseCommandContext.prototype.dropDatabase = function() {
    return this.getTypedRuleContext(DropDatabaseContext,0);
};

MultidatabaseCommandContext.prototype.startDatabase = function() {
    return this.getTypedRuleContext(StartDatabaseContext,0);
};

MultidatabaseCommandContext.prototype.stopDatabase = function() {
    return this.getTypedRuleContext(StopDatabaseContext,0);
};

MultidatabaseCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMultidatabaseCommand(this);
	}
};

MultidatabaseCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMultidatabaseCommand(this);
	}
};




CypherParser.MultidatabaseCommandContext = MultidatabaseCommandContext;

CypherParser.prototype.multidatabaseCommand = function() {

    var localctx = new MultidatabaseCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CypherParser.RULE_multidatabaseCommand);
    try {
        this.state = 932;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.SHOW:
            this.enterOuterAlt(localctx, 1);
            this.state = 927;
            this.showDatabase();
            break;
        case CypherParser.CREATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 928;
            this.createDatabase();
            break;
        case CypherParser.DROP:
            this.enterOuterAlt(localctx, 3);
            this.state = 929;
            this.dropDatabase();
            break;
        case CypherParser.START:
            this.enterOuterAlt(localctx, 4);
            this.state = 930;
            this.startDatabase();
            break;
        case CypherParser.STOP:
            this.enterOuterAlt(localctx, 5);
            this.state = 931;
            this.stopDatabase();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_userCommand;
    return this;
}

UserCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserCommandContext.prototype.constructor = UserCommandContext;

UserCommandContext.prototype.showRoles = function() {
    return this.getTypedRuleContext(ShowRolesContext,0);
};

UserCommandContext.prototype.createRole = function() {
    return this.getTypedRuleContext(CreateRoleContext,0);
};

UserCommandContext.prototype.dropRole = function() {
    return this.getTypedRuleContext(DropRoleContext,0);
};

UserCommandContext.prototype.showUsers = function() {
    return this.getTypedRuleContext(ShowUsersContext,0);
};

UserCommandContext.prototype.createUser = function() {
    return this.getTypedRuleContext(CreateUserContext,0);
};

UserCommandContext.prototype.dropUser = function() {
    return this.getTypedRuleContext(DropUserContext,0);
};

UserCommandContext.prototype.alterUser = function() {
    return this.getTypedRuleContext(AlterUserContext,0);
};

UserCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUserCommand(this);
	}
};

UserCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUserCommand(this);
	}
};




CypherParser.UserCommandContext = UserCommandContext;

CypherParser.prototype.userCommand = function() {

    var localctx = new UserCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CypherParser.RULE_userCommand);
    try {
        this.state = 941;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 934;
            this.showRoles();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 935;
            this.createRole();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 936;
            this.dropRole();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 937;
            this.showUsers();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 938;
            this.createUser();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 939;
            this.dropUser();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 940;
            this.alterUser();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrivilegeCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_privilegeCommand;
    return this;
}

PrivilegeCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeCommandContext.prototype.constructor = PrivilegeCommandContext;

PrivilegeCommandContext.prototype.showPrivileges = function() {
    return this.getTypedRuleContext(ShowPrivilegesContext,0);
};

PrivilegeCommandContext.prototype.grantPrivilege = function() {
    return this.getTypedRuleContext(GrantPrivilegeContext,0);
};

PrivilegeCommandContext.prototype.denyPrivilege = function() {
    return this.getTypedRuleContext(DenyPrivilegeContext,0);
};

PrivilegeCommandContext.prototype.revokePrivilege = function() {
    return this.getTypedRuleContext(RevokePrivilegeContext,0);
};

PrivilegeCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPrivilegeCommand(this);
	}
};

PrivilegeCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPrivilegeCommand(this);
	}
};




CypherParser.PrivilegeCommandContext = PrivilegeCommandContext;

CypherParser.prototype.privilegeCommand = function() {

    var localctx = new PrivilegeCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CypherParser.RULE_privilegeCommand);
    try {
        this.state = 947;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.SHOW:
            this.enterOuterAlt(localctx, 1);
            this.state = 943;
            this.showPrivileges();
            break;
        case CypherParser.GRANT:
            this.enterOuterAlt(localctx, 2);
            this.state = 944;
            this.grantPrivilege();
            break;
        case CypherParser.DENY:
            this.enterOuterAlt(localctx, 3);
            this.state = 945;
            this.denyPrivilege();
            break;
        case CypherParser.REVOKE:
            this.enterOuterAlt(localctx, 4);
            this.state = 946;
            this.revokePrivilege();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShowRolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_showRoles;
    return this;
}

ShowRolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowRolesContext.prototype.constructor = ShowRolesContext;

ShowRolesContext.prototype.SHOW = function() {
    return this.getToken(CypherParser.SHOW, 0);
};

ShowRolesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ShowRolesContext.prototype.ROLES = function() {
    return this.getToken(CypherParser.ROLES, 0);
};

ShowRolesContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

ShowRolesContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

ShowRolesContext.prototype.USERS = function() {
    return this.getToken(CypherParser.USERS, 0);
};

ShowRolesContext.prototype.POPULATED = function() {
    return this.getToken(CypherParser.POPULATED, 0);
};

ShowRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterShowRoles(this);
	}
};

ShowRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitShowRoles(this);
	}
};




CypherParser.ShowRolesContext = ShowRolesContext;

CypherParser.prototype.showRoles = function() {

    var localctx = new ShowRolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CypherParser.RULE_showRoles);
    var _la = 0; // Token type
    try {
        this.state = 975;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 949;
            this.match(CypherParser.SHOW);
            this.state = 950;
            this.match(CypherParser.SP);
            this.state = 953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.ALL) {
                this.state = 951;
                this.match(CypherParser.ALL);
                this.state = 952;
                this.match(CypherParser.SP);
            }

            this.state = 955;
            this.match(CypherParser.ROLES);
            this.state = 960;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
            if(la_===1) {
                this.state = 956;
                this.match(CypherParser.SP);
                this.state = 957;
                this.match(CypherParser.WITH);
                this.state = 958;
                this.match(CypherParser.SP);
                this.state = 959;
                this.match(CypherParser.USERS);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 962;
            this.match(CypherParser.SHOW);
            this.state = 963;
            this.match(CypherParser.SP);
            this.state = 966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.POPULATED) {
                this.state = 964;
                this.match(CypherParser.POPULATED);
                this.state = 965;
                this.match(CypherParser.SP);
            }

            this.state = 968;
            this.match(CypherParser.ROLES);
            this.state = 973;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
            if(la_===1) {
                this.state = 969;
                this.match(CypherParser.SP);
                this.state = 970;
                this.match(CypherParser.WITH);
                this.state = 971;
                this.match(CypherParser.SP);
                this.state = 972;
                this.match(CypherParser.USERS);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createRole;
    return this;
}

CreateRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateRoleContext.prototype.constructor = CreateRoleContext;

CreateRoleContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateRoleContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CreateRoleContext.prototype.ROLE = function() {
    return this.getToken(CypherParser.ROLE, 0);
};

CreateRoleContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

CreateRoleContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateRoleContext.prototype.copyRole = function() {
    return this.getTypedRuleContext(CopyRoleContext,0);
};

CreateRoleContext.prototype.orReplace = function() {
    return this.getTypedRuleContext(OrReplaceContext,0);
};

CreateRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateRole(this);
	}
};

CreateRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateRole(this);
	}
};




CypherParser.CreateRoleContext = CreateRoleContext;

CypherParser.prototype.createRole = function() {

    var localctx = new CreateRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CypherParser.RULE_createRole);
    var _la = 0; // Token type
    try {
        this.state = 1004;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 977;
            this.match(CypherParser.CREATE);
            this.state = 978;
            this.match(CypherParser.SP);
            this.state = 979;
            this.match(CypherParser.ROLE);
            this.state = 980;
            this.match(CypherParser.SP);
            this.state = 981;
            this.symbolicName();
            this.state = 984;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            if(la_===1) {
                this.state = 982;
                this.match(CypherParser.SP);
                this.state = 983;
                this.ifNotExists();

            }
            this.state = 988;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
            if(la_===1) {
                this.state = 986;
                this.match(CypherParser.SP);
                this.state = 987;
                this.copyRole();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 990;
            this.match(CypherParser.CREATE);
            this.state = 991;
            this.match(CypherParser.SP);
            this.state = 995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.OR) {
                this.state = 992;
                this.orReplace();
                this.state = 993;
                this.match(CypherParser.SP);
            }

            this.state = 997;
            this.match(CypherParser.ROLE);
            this.state = 998;
            this.match(CypherParser.SP);
            this.state = 999;
            this.symbolicName();
            this.state = 1002;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            if(la_===1) {
                this.state = 1000;
                this.match(CypherParser.SP);
                this.state = 1001;
                this.copyRole();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CopyRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_copyRole;
    return this;
}

CopyRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CopyRoleContext.prototype.constructor = CopyRoleContext;

CopyRoleContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

CopyRoleContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CopyRoleContext.prototype.COPY = function() {
    return this.getToken(CypherParser.COPY, 0);
};

CopyRoleContext.prototype.OF = function() {
    return this.getToken(CypherParser.OF, 0);
};

CopyRoleContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

CopyRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCopyRole(this);
	}
};

CopyRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCopyRole(this);
	}
};




CypherParser.CopyRoleContext = CopyRoleContext;

CypherParser.prototype.copyRole = function() {

    var localctx = new CopyRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CypherParser.RULE_copyRole);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1006;
        this.match(CypherParser.AS);
        this.state = 1007;
        this.match(CypherParser.SP);
        this.state = 1008;
        this.match(CypherParser.COPY);
        this.state = 1009;
        this.match(CypherParser.SP);
        this.state = 1010;
        this.match(CypherParser.OF);
        this.state = 1011;
        this.match(CypherParser.SP);
        this.state = 1012;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropRoleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropRole;
    return this;
}

DropRoleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropRoleContext.prototype.constructor = DropRoleContext;

DropRoleContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropRoleContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


DropRoleContext.prototype.ROLE = function() {
    return this.getToken(CypherParser.ROLE, 0);
};

DropRoleContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

DropRoleContext.prototype.IF = function() {
    return this.getToken(CypherParser.IF, 0);
};

DropRoleContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

DropRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropRole(this);
	}
};

DropRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropRole(this);
	}
};




CypherParser.DropRoleContext = DropRoleContext;

CypherParser.prototype.dropRole = function() {

    var localctx = new DropRoleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CypherParser.RULE_dropRole);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1014;
        this.match(CypherParser.DROP);
        this.state = 1015;
        this.match(CypherParser.SP);
        this.state = 1016;
        this.match(CypherParser.ROLE);
        this.state = 1017;
        this.match(CypherParser.SP);
        this.state = 1018;
        this.symbolicName();
        this.state = 1023;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        if(la_===1) {
            this.state = 1019;
            this.match(CypherParser.SP);
            this.state = 1020;
            this.match(CypherParser.IF);
            this.state = 1021;
            this.match(CypherParser.SP);
            this.state = 1022;
            this.match(CypherParser.EXISTS);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShowUsersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_showUsers;
    return this;
}

ShowUsersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowUsersContext.prototype.constructor = ShowUsersContext;

ShowUsersContext.prototype.SHOW = function() {
    return this.getToken(CypherParser.SHOW, 0);
};

ShowUsersContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

ShowUsersContext.prototype.USERS = function() {
    return this.getToken(CypherParser.USERS, 0);
};

ShowUsersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterShowUsers(this);
	}
};

ShowUsersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitShowUsers(this);
	}
};




CypherParser.ShowUsersContext = ShowUsersContext;

CypherParser.prototype.showUsers = function() {

    var localctx = new ShowUsersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CypherParser.RULE_showUsers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1025;
        this.match(CypherParser.SHOW);
        this.state = 1026;
        this.match(CypherParser.SP);
        this.state = 1027;
        this.match(CypherParser.USERS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createUser;
    return this;
}

CreateUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUserContext.prototype.constructor = CreateUserContext;

CreateUserContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateUserContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CreateUserContext.prototype.USER = function() {
    return this.getToken(CypherParser.USER, 0);
};

CreateUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

CreateUserContext.prototype.setPassword = function() {
    return this.getTypedRuleContext(SetPasswordContext,0);
};

CreateUserContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateUserContext.prototype.setStatus = function() {
    return this.getTypedRuleContext(SetStatusContext,0);
};

CreateUserContext.prototype.orReplace = function() {
    return this.getTypedRuleContext(OrReplaceContext,0);
};

CreateUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateUser(this);
	}
};

CreateUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateUser(this);
	}
};




CypherParser.CreateUserContext = CreateUserContext;

CypherParser.prototype.createUser = function() {

    var localctx = new CreateUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CypherParser.RULE_createUser);
    var _la = 0; // Token type
    try {
        this.state = 1060;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1029;
            this.match(CypherParser.CREATE);
            this.state = 1030;
            this.match(CypherParser.SP);
            this.state = 1031;
            this.match(CypherParser.USER);
            this.state = 1032;
            this.match(CypherParser.SP);
            this.state = 1033;
            this.user();
            this.state = 1034;
            this.match(CypherParser.SP);
            this.state = 1037;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1035;
                this.match(CypherParser.SP);
                this.state = 1036;
                this.ifNotExists();
            }

            this.state = 1039;
            this.setPassword();
            this.state = 1042;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
            if(la_===1) {
                this.state = 1040;
                this.match(CypherParser.SP);
                this.state = 1041;
                this.setStatus();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1044;
            this.match(CypherParser.CREATE);
            this.state = 1045;
            this.match(CypherParser.SP);
            this.state = 1049;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.OR) {
                this.state = 1046;
                this.orReplace();
                this.state = 1047;
                this.match(CypherParser.SP);
            }

            this.state = 1051;
            this.match(CypherParser.USER);
            this.state = 1052;
            this.match(CypherParser.SP);
            this.state = 1053;
            this.user();
            this.state = 1054;
            this.match(CypherParser.SP);
            this.state = 1055;
            this.setPassword();
            this.state = 1058;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
            if(la_===1) {
                this.state = 1056;
                this.match(CypherParser.SP);
                this.state = 1057;
                this.setStatus();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropUser;
    return this;
}

DropUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropUserContext.prototype.constructor = DropUserContext;

DropUserContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropUserContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


DropUserContext.prototype.USER = function() {
    return this.getToken(CypherParser.USER, 0);
};

DropUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

DropUserContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropUser(this);
	}
};

DropUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropUser(this);
	}
};




CypherParser.DropUserContext = DropUserContext;

CypherParser.prototype.dropUser = function() {

    var localctx = new DropUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CypherParser.RULE_dropUser);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1062;
        this.match(CypherParser.DROP);
        this.state = 1063;
        this.match(CypherParser.SP);
        this.state = 1064;
        this.match(CypherParser.USER);
        this.state = 1065;
        this.match(CypherParser.SP);
        this.state = 1066;
        this.user();
        this.state = 1069;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 1067;
            this.match(CypherParser.SP);
            this.state = 1068;
            this.ifExists();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlterUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_alterUser;
    return this;
}

AlterUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUserContext.prototype.constructor = AlterUserContext;

AlterUserContext.prototype.ALTER = function() {
    return this.getToken(CypherParser.ALTER, 0);
};

AlterUserContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AlterUserContext.prototype.CURRENT = function() {
    return this.getToken(CypherParser.CURRENT, 0);
};

AlterUserContext.prototype.USER = function() {
    return this.getToken(CypherParser.USER, 0);
};

AlterUserContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

AlterUserContext.prototype.PASSWORD = function() {
    return this.getToken(CypherParser.PASSWORD, 0);
};

AlterUserContext.prototype.FROM = function() {
    return this.getToken(CypherParser.FROM, 0);
};

AlterUserContext.prototype.TO = function() {
    return this.getToken(CypherParser.TO, 0);
};

AlterUserContext.prototype.password = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PasswordContext);
    } else {
        return this.getTypedRuleContext(PasswordContext,i);
    }
};

AlterUserContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

AlterUserContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

AlterUserContext.prototype.setPassword = function() {
    return this.getTypedRuleContext(SetPasswordContext,0);
};

AlterUserContext.prototype.setStatus = function() {
    return this.getTypedRuleContext(SetStatusContext,0);
};

AlterUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAlterUser(this);
	}
};

AlterUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAlterUser(this);
	}
};




CypherParser.AlterUserContext = AlterUserContext;

CypherParser.prototype.alterUser = function() {

    var localctx = new AlterUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CypherParser.RULE_alterUser);
    try {
        this.state = 1112;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1071;
            this.match(CypherParser.ALTER);
            this.state = 1072;
            this.match(CypherParser.SP);
            this.state = 1073;
            this.match(CypherParser.CURRENT);
            this.state = 1074;
            this.match(CypherParser.SP);
            this.state = 1075;
            this.match(CypherParser.USER);
            this.state = 1076;
            this.match(CypherParser.SP);
            this.state = 1077;
            this.match(CypherParser.SET);
            this.state = 1078;
            this.match(CypherParser.SP);
            this.state = 1079;
            this.match(CypherParser.PASSWORD);
            this.state = 1080;
            this.match(CypherParser.SP);
            this.state = 1081;
            this.match(CypherParser.FROM);
            this.state = 1082;
            this.match(CypherParser.SP);
            this.state = 1085;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CypherParser.CYPHER:
            case CypherParser.EXPLAIN:
            case CypherParser.PROFILE:
            case CypherParser.USING:
            case CypherParser.PERIODIC:
            case CypherParser.COMMIT:
            case CypherParser.UNION:
            case CypherParser.ALL:
            case CypherParser.CREATE:
            case CypherParser.DROP:
            case CypherParser.INDEX:
            case CypherParser.ON:
            case CypherParser.CONSTRAINT:
            case CypherParser.ASSERT:
            case CypherParser.IS:
            case CypherParser.UNIQUE:
            case CypherParser.EXISTS:
            case CypherParser.LOAD:
            case CypherParser.CSV:
            case CypherParser.WITH:
            case CypherParser.HEADERS:
            case CypherParser.FROM:
            case CypherParser.AS:
            case CypherParser.FIELDTERMINATOR:
            case CypherParser.OPTIONAL:
            case CypherParser.MATCH:
            case CypherParser.UNWIND:
            case CypherParser.MERGE:
            case CypherParser.SET:
            case CypherParser.DETACH:
            case CypherParser.DELETE:
            case CypherParser.REMOVE:
            case CypherParser.FOREACH:
            case CypherParser.IN:
            case CypherParser.DISTINCT:
            case CypherParser.RETURN:
            case CypherParser.ORDER:
            case CypherParser.BY:
            case CypherParser.L_SKIP:
            case CypherParser.LIMIT:
            case CypherParser.ASCENDING:
            case CypherParser.ASC:
            case CypherParser.DESCENDING:
            case CypherParser.DESC:
            case CypherParser.JOIN:
            case CypherParser.SCAN:
            case CypherParser.START:
            case CypherParser.NODE:
            case CypherParser.RELATIONSHIP:
            case CypherParser.REL:
            case CypherParser.WHERE:
            case CypherParser.SHORTESTPATH:
            case CypherParser.ALLSHORTESTPATHS:
            case CypherParser.OR:
            case CypherParser.XOR:
            case CypherParser.AND:
            case CypherParser.NOT:
            case CypherParser.STARTS:
            case CypherParser.ENDS:
            case CypherParser.CONTAINS:
            case CypherParser.NULL:
            case CypherParser.COUNT:
            case CypherParser.FILTER:
            case CypherParser.EXTRACT:
            case CypherParser.ANY:
            case CypherParser.NONE:
            case CypherParser.SINGLE:
            case CypherParser.TRUE:
            case CypherParser.FALSE:
            case CypherParser.REDUCE:
            case CypherParser.CASE:
            case CypherParser.ELSE:
            case CypherParser.END:
            case CypherParser.WHEN:
            case CypherParser.THEN:
            case CypherParser.CALL:
            case CypherParser.YIELD:
            case CypherParser.KEY:
            case CypherParser.CATALOG:
            case CypherParser.SHOW:
            case CypherParser.DEFAULT:
            case CypherParser.DBMS:
            case CypherParser.DATABASE:
            case CypherParser.DATABASES:
            case CypherParser.GRAPH:
            case CypherParser.GRAPHS:
            case CypherParser.REPLACE:
            case CypherParser.IF:
            case CypherParser.STOP:
            case CypherParser.ROLE:
            case CypherParser.ROLES:
            case CypherParser.USER:
            case CypherParser.USERS:
            case CypherParser.POPULATED:
            case CypherParser.PASSWORD:
            case CypherParser.CHANGE:
            case CypherParser.REQUIRED:
            case CypherParser.STATUS:
            case CypherParser.ACTIVE:
            case CypherParser.SUSPENDED:
            case CypherParser.ALTER:
            case CypherParser.CURRENT:
            case CypherParser.TO:
            case CypherParser.PRIVILEGES:
            case CypherParser.GRANT:
            case CypherParser.DENY:
            case CypherParser.REVOKE:
            case CypherParser.RELATIONSHIPS:
            case CypherParser.NODES:
            case CypherParser.ELEMENT:
            case CypherParser.ELEMENTS:
            case CypherParser.COPY:
            case CypherParser.OF:
            case CypherParser.TRAVERSE:
            case CypherParser.READ:
            case CypherParser.WRITE:
            case CypherParser.ACCESS:
            case CypherParser.INDEXES:
            case CypherParser.MANAGEMENT:
            case CypherParser.NEW:
            case CypherParser.LABEL:
            case CypherParser.LABELS:
            case CypherParser.NAME:
            case CypherParser.NAMES:
            case CypherParser.TYPE:
            case CypherParser.TYPES:
            case CypherParser.PROPERTY:
            case CypherParser.CONSTRAINTS:
            case CypherParser.ASSIGN:
            case CypherParser.BTREE:
            case CypherParser.EXIST:
            case CypherParser.FOR:
            case CypherParser.OPTIONS:
            case CypherParser.EXECUTE:
            case CypherParser.DEFINED:
            case CypherParser.FUNCTION:
            case CypherParser.FUNCTIONS:
            case CypherParser.BOOSTED:
            case CypherParser.PROCEDURE:
            case CypherParser.PROCEDURES:
            case CypherParser.ADMIN:
            case CypherParser.ADMINISTRATOR:
            case CypherParser.BRIEF:
            case CypherParser.VERBOSE:
            case CypherParser.OUTPUT:
            case CypherParser.BUILT:
            case CypherParser.EACH:
            case CypherParser.EXECUTABLE:
            case CypherParser.EXISTENCE:
            case CypherParser.FULLTEXT:
            case CypherParser.HOME:
            case CypherParser.LOOKUP:
            case CypherParser.RENAME:
            case CypherParser.HexLetter:
            case CypherParser.UnescapedSymbolicName:
            case CypherParser.EscapedSymbolicName:
                this.state = 1083;
                this.password();
                break;
            case CypherParser.T__13:
            case CypherParser.T__33:
                this.state = 1084;
                this.parameter();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1087;
            this.match(CypherParser.TO);
            this.state = 1088;
            this.match(CypherParser.SP);
            this.state = 1091;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CypherParser.CYPHER:
            case CypherParser.EXPLAIN:
            case CypherParser.PROFILE:
            case CypherParser.USING:
            case CypherParser.PERIODIC:
            case CypherParser.COMMIT:
            case CypherParser.UNION:
            case CypherParser.ALL:
            case CypherParser.CREATE:
            case CypherParser.DROP:
            case CypherParser.INDEX:
            case CypherParser.ON:
            case CypherParser.CONSTRAINT:
            case CypherParser.ASSERT:
            case CypherParser.IS:
            case CypherParser.UNIQUE:
            case CypherParser.EXISTS:
            case CypherParser.LOAD:
            case CypherParser.CSV:
            case CypherParser.WITH:
            case CypherParser.HEADERS:
            case CypherParser.FROM:
            case CypherParser.AS:
            case CypherParser.FIELDTERMINATOR:
            case CypherParser.OPTIONAL:
            case CypherParser.MATCH:
            case CypherParser.UNWIND:
            case CypherParser.MERGE:
            case CypherParser.SET:
            case CypherParser.DETACH:
            case CypherParser.DELETE:
            case CypherParser.REMOVE:
            case CypherParser.FOREACH:
            case CypherParser.IN:
            case CypherParser.DISTINCT:
            case CypherParser.RETURN:
            case CypherParser.ORDER:
            case CypherParser.BY:
            case CypherParser.L_SKIP:
            case CypherParser.LIMIT:
            case CypherParser.ASCENDING:
            case CypherParser.ASC:
            case CypherParser.DESCENDING:
            case CypherParser.DESC:
            case CypherParser.JOIN:
            case CypherParser.SCAN:
            case CypherParser.START:
            case CypherParser.NODE:
            case CypherParser.RELATIONSHIP:
            case CypherParser.REL:
            case CypherParser.WHERE:
            case CypherParser.SHORTESTPATH:
            case CypherParser.ALLSHORTESTPATHS:
            case CypherParser.OR:
            case CypherParser.XOR:
            case CypherParser.AND:
            case CypherParser.NOT:
            case CypherParser.STARTS:
            case CypherParser.ENDS:
            case CypherParser.CONTAINS:
            case CypherParser.NULL:
            case CypherParser.COUNT:
            case CypherParser.FILTER:
            case CypherParser.EXTRACT:
            case CypherParser.ANY:
            case CypherParser.NONE:
            case CypherParser.SINGLE:
            case CypherParser.TRUE:
            case CypherParser.FALSE:
            case CypherParser.REDUCE:
            case CypherParser.CASE:
            case CypherParser.ELSE:
            case CypherParser.END:
            case CypherParser.WHEN:
            case CypherParser.THEN:
            case CypherParser.CALL:
            case CypherParser.YIELD:
            case CypherParser.KEY:
            case CypherParser.CATALOG:
            case CypherParser.SHOW:
            case CypherParser.DEFAULT:
            case CypherParser.DBMS:
            case CypherParser.DATABASE:
            case CypherParser.DATABASES:
            case CypherParser.GRAPH:
            case CypherParser.GRAPHS:
            case CypherParser.REPLACE:
            case CypherParser.IF:
            case CypherParser.STOP:
            case CypherParser.ROLE:
            case CypherParser.ROLES:
            case CypherParser.USER:
            case CypherParser.USERS:
            case CypherParser.POPULATED:
            case CypherParser.PASSWORD:
            case CypherParser.CHANGE:
            case CypherParser.REQUIRED:
            case CypherParser.STATUS:
            case CypherParser.ACTIVE:
            case CypherParser.SUSPENDED:
            case CypherParser.ALTER:
            case CypherParser.CURRENT:
            case CypherParser.TO:
            case CypherParser.PRIVILEGES:
            case CypherParser.GRANT:
            case CypherParser.DENY:
            case CypherParser.REVOKE:
            case CypherParser.RELATIONSHIPS:
            case CypherParser.NODES:
            case CypherParser.ELEMENT:
            case CypherParser.ELEMENTS:
            case CypherParser.COPY:
            case CypherParser.OF:
            case CypherParser.TRAVERSE:
            case CypherParser.READ:
            case CypherParser.WRITE:
            case CypherParser.ACCESS:
            case CypherParser.INDEXES:
            case CypherParser.MANAGEMENT:
            case CypherParser.NEW:
            case CypherParser.LABEL:
            case CypherParser.LABELS:
            case CypherParser.NAME:
            case CypherParser.NAMES:
            case CypherParser.TYPE:
            case CypherParser.TYPES:
            case CypherParser.PROPERTY:
            case CypherParser.CONSTRAINTS:
            case CypherParser.ASSIGN:
            case CypherParser.BTREE:
            case CypherParser.EXIST:
            case CypherParser.FOR:
            case CypherParser.OPTIONS:
            case CypherParser.EXECUTE:
            case CypherParser.DEFINED:
            case CypherParser.FUNCTION:
            case CypherParser.FUNCTIONS:
            case CypherParser.BOOSTED:
            case CypherParser.PROCEDURE:
            case CypherParser.PROCEDURES:
            case CypherParser.ADMIN:
            case CypherParser.ADMINISTRATOR:
            case CypherParser.BRIEF:
            case CypherParser.VERBOSE:
            case CypherParser.OUTPUT:
            case CypherParser.BUILT:
            case CypherParser.EACH:
            case CypherParser.EXECUTABLE:
            case CypherParser.EXISTENCE:
            case CypherParser.FULLTEXT:
            case CypherParser.HOME:
            case CypherParser.LOOKUP:
            case CypherParser.RENAME:
            case CypherParser.HexLetter:
            case CypherParser.UnescapedSymbolicName:
            case CypherParser.EscapedSymbolicName:
                this.state = 1089;
                this.password();
                break;
            case CypherParser.T__13:
            case CypherParser.T__33:
                this.state = 1090;
                this.parameter();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1093;
            this.match(CypherParser.ALTER);
            this.state = 1094;
            this.match(CypherParser.SP);
            this.state = 1095;
            this.match(CypherParser.USER);
            this.state = 1096;
            this.match(CypherParser.SP);
            this.state = 1097;
            this.user();
            this.state = 1098;
            this.match(CypherParser.SP);
            this.state = 1099;
            this.setPassword();
            this.state = 1102;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 1100;
                this.match(CypherParser.SP);
                this.state = 1101;
                this.setStatus();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1104;
            this.match(CypherParser.ALTER);
            this.state = 1105;
            this.match(CypherParser.SP);
            this.state = 1106;
            this.match(CypherParser.USER);
            this.state = 1107;
            this.match(CypherParser.SP);
            this.state = 1108;
            this.user();
            this.state = 1109;
            this.match(CypherParser.SP);
            this.state = 1110;
            this.setStatus();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShowPrivilegesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_showPrivileges;
    return this;
}

ShowPrivilegesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowPrivilegesContext.prototype.constructor = ShowPrivilegesContext;

ShowPrivilegesContext.prototype.SHOW = function() {
    return this.getToken(CypherParser.SHOW, 0);
};

ShowPrivilegesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ShowPrivilegesContext.prototype.PRIVILEGES = function() {
    return this.getToken(CypherParser.PRIVILEGES, 0);
};

ShowPrivilegesContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

ShowPrivilegesContext.prototype.ROLE = function() {
    return this.getToken(CypherParser.ROLE, 0);
};

ShowPrivilegesContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ShowPrivilegesContext.prototype.USER = function() {
    return this.getToken(CypherParser.USER, 0);
};

ShowPrivilegesContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

ShowPrivilegesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterShowPrivileges(this);
	}
};

ShowPrivilegesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitShowPrivileges(this);
	}
};




CypherParser.ShowPrivilegesContext = ShowPrivilegesContext;

CypherParser.prototype.showPrivileges = function() {

    var localctx = new ShowPrivilegesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CypherParser.RULE_showPrivileges);
    var _la = 0; // Token type
    try {
        this.state = 1141;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1114;
            this.match(CypherParser.SHOW);
            this.state = 1115;
            this.match(CypherParser.SP);
            this.state = 1118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.ALL) {
                this.state = 1116;
                this.match(CypherParser.ALL);
                this.state = 1117;
                this.match(CypherParser.SP);
            }

            this.state = 1120;
            this.match(CypherParser.PRIVILEGES);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1121;
            this.match(CypherParser.SHOW);
            this.state = 1122;
            this.match(CypherParser.SP);
            this.state = 1128;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.ROLE) {
                this.state = 1123;
                this.match(CypherParser.ROLE);
                this.state = 1124;
                this.match(CypherParser.SP);
                this.state = 1125;
                this.symbolicName();
                this.state = 1126;
                this.match(CypherParser.SP);
            }

            this.state = 1130;
            this.match(CypherParser.PRIVILEGES);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1131;
            this.match(CypherParser.SHOW);
            this.state = 1132;
            this.match(CypherParser.SP);
            this.state = 1138;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.USER) {
                this.state = 1133;
                this.match(CypherParser.USER);
                this.state = 1134;
                this.match(CypherParser.SP);
                this.state = 1135;
                this.user();
                this.state = 1136;
                this.match(CypherParser.SP);
            }

            this.state = 1140;
            this.match(CypherParser.PRIVILEGES);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GrantPrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_grantPrivilege;
    return this;
}

GrantPrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantPrivilegeContext.prototype.constructor = GrantPrivilegeContext;

GrantPrivilegeContext.prototype.GRANT = function() {
    return this.getToken(CypherParser.GRANT, 0);
};

GrantPrivilegeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


GrantPrivilegeContext.prototype.ROLE = function() {
    return this.getToken(CypherParser.ROLE, 0);
};

GrantPrivilegeContext.prototype.roles = function() {
    return this.getTypedRuleContext(RolesContext,0);
};

GrantPrivilegeContext.prototype.TO = function() {
    return this.getToken(CypherParser.TO, 0);
};

GrantPrivilegeContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

GrantPrivilegeContext.prototype.datasbasePrivilege = function() {
    return this.getTypedRuleContext(DatasbasePrivilegeContext,0);
};

GrantPrivilegeContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

GrantPrivilegeContext.prototype.databaseScope = function() {
    return this.getTypedRuleContext(DatabaseScopeContext,0);
};

GrantPrivilegeContext.prototype.grantableGraphPrivileges = function() {
    return this.getTypedRuleContext(GrantableGraphPrivilegesContext,0);
};

GrantPrivilegeContext.prototype.graphScope = function() {
    return this.getTypedRuleContext(GraphScopeContext,0);
};

GrantPrivilegeContext.prototype.elementScope = function() {
    return this.getTypedRuleContext(ElementScopeContext,0);
};

GrantPrivilegeContext.prototype.dbmsPrivilege = function() {
    return this.getTypedRuleContext(DbmsPrivilegeContext,0);
};

GrantPrivilegeContext.prototype.DBMS = function() {
    return this.getToken(CypherParser.DBMS, 0);
};

GrantPrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterGrantPrivilege(this);
	}
};

GrantPrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitGrantPrivilege(this);
	}
};




CypherParser.GrantPrivilegeContext = GrantPrivilegeContext;

CypherParser.prototype.grantPrivilege = function() {

    var localctx = new GrantPrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CypherParser.RULE_grantPrivilege);
    try {
        this.state = 1188;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1143;
            this.match(CypherParser.GRANT);
            this.state = 1144;
            this.match(CypherParser.SP);
            this.state = 1145;
            this.match(CypherParser.ROLE);
            this.state = 1146;
            this.match(CypherParser.SP);
            this.state = 1147;
            this.roles();
            this.state = 1148;
            this.match(CypherParser.SP);
            this.state = 1149;
            this.match(CypherParser.TO);
            this.state = 1150;
            this.match(CypherParser.SP);
            this.state = 1151;
            this.user();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1153;
            this.match(CypherParser.GRANT);
            this.state = 1154;
            this.match(CypherParser.SP);
            this.state = 1155;
            this.datasbasePrivilege();
            this.state = 1156;
            this.match(CypherParser.SP);
            this.state = 1157;
            this.match(CypherParser.ON);
            this.state = 1158;
            this.match(CypherParser.SP);
            this.state = 1159;
            this.databaseScope();
            this.state = 1160;
            this.match(CypherParser.SP);
            this.state = 1161;
            this.match(CypherParser.TO);
            this.state = 1162;
            this.roles();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1164;
            this.match(CypherParser.GRANT);
            this.state = 1165;
            this.match(CypherParser.SP);
            this.state = 1166;
            this.grantableGraphPrivileges();
            this.state = 1167;
            this.match(CypherParser.SP);
            this.state = 1168;
            this.match(CypherParser.ON);
            this.state = 1169;
            this.match(CypherParser.SP);
            this.state = 1170;
            this.graphScope();
            this.state = 1171;
            this.match(CypherParser.SP);
            this.state = 1172;
            this.elementScope();
            this.state = 1173;
            this.match(CypherParser.SP);
            this.state = 1174;
            this.match(CypherParser.TO);
            this.state = 1175;
            this.roles();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1177;
            this.match(CypherParser.GRANT);
            this.state = 1178;
            this.match(CypherParser.SP);
            this.state = 1179;
            this.dbmsPrivilege();
            this.state = 1180;
            this.match(CypherParser.SP);
            this.state = 1181;
            this.match(CypherParser.ON);
            this.state = 1182;
            this.match(CypherParser.SP);
            this.state = 1183;
            this.match(CypherParser.DBMS);
            this.state = 1184;
            this.match(CypherParser.SP);
            this.state = 1185;
            this.match(CypherParser.TO);
            this.state = 1186;
            this.roles();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DenyPrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_denyPrivilege;
    return this;
}

DenyPrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DenyPrivilegeContext.prototype.constructor = DenyPrivilegeContext;

DenyPrivilegeContext.prototype.DENY = function() {
    return this.getToken(CypherParser.DENY, 0);
};

DenyPrivilegeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


DenyPrivilegeContext.prototype.ROLE = function() {
    return this.getToken(CypherParser.ROLE, 0);
};

DenyPrivilegeContext.prototype.roles = function() {
    return this.getTypedRuleContext(RolesContext,0);
};

DenyPrivilegeContext.prototype.TO = function() {
    return this.getToken(CypherParser.TO, 0);
};

DenyPrivilegeContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

DenyPrivilegeContext.prototype.datasbasePrivilege = function() {
    return this.getTypedRuleContext(DatasbasePrivilegeContext,0);
};

DenyPrivilegeContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

DenyPrivilegeContext.prototype.databaseScope = function() {
    return this.getTypedRuleContext(DatabaseScopeContext,0);
};

DenyPrivilegeContext.prototype.grantableGraphPrivileges = function() {
    return this.getTypedRuleContext(GrantableGraphPrivilegesContext,0);
};

DenyPrivilegeContext.prototype.graphScope = function() {
    return this.getTypedRuleContext(GraphScopeContext,0);
};

DenyPrivilegeContext.prototype.elementScope = function() {
    return this.getTypedRuleContext(ElementScopeContext,0);
};

DenyPrivilegeContext.prototype.dbmsPrivilege = function() {
    return this.getTypedRuleContext(DbmsPrivilegeContext,0);
};

DenyPrivilegeContext.prototype.DBMS = function() {
    return this.getToken(CypherParser.DBMS, 0);
};

DenyPrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDenyPrivilege(this);
	}
};

DenyPrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDenyPrivilege(this);
	}
};




CypherParser.DenyPrivilegeContext = DenyPrivilegeContext;

CypherParser.prototype.denyPrivilege = function() {

    var localctx = new DenyPrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CypherParser.RULE_denyPrivilege);
    try {
        this.state = 1235;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1190;
            this.match(CypherParser.DENY);
            this.state = 1191;
            this.match(CypherParser.SP);
            this.state = 1192;
            this.match(CypherParser.ROLE);
            this.state = 1193;
            this.match(CypherParser.SP);
            this.state = 1194;
            this.roles();
            this.state = 1195;
            this.match(CypherParser.SP);
            this.state = 1196;
            this.match(CypherParser.TO);
            this.state = 1197;
            this.match(CypherParser.SP);
            this.state = 1198;
            this.user();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1200;
            this.match(CypherParser.DENY);
            this.state = 1201;
            this.match(CypherParser.SP);
            this.state = 1202;
            this.datasbasePrivilege();
            this.state = 1203;
            this.match(CypherParser.SP);
            this.state = 1204;
            this.match(CypherParser.ON);
            this.state = 1205;
            this.match(CypherParser.SP);
            this.state = 1206;
            this.databaseScope();
            this.state = 1207;
            this.match(CypherParser.SP);
            this.state = 1208;
            this.match(CypherParser.TO);
            this.state = 1209;
            this.roles();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1211;
            this.match(CypherParser.DENY);
            this.state = 1212;
            this.match(CypherParser.SP);
            this.state = 1213;
            this.grantableGraphPrivileges();
            this.state = 1214;
            this.match(CypherParser.SP);
            this.state = 1215;
            this.match(CypherParser.ON);
            this.state = 1216;
            this.match(CypherParser.SP);
            this.state = 1217;
            this.graphScope();
            this.state = 1218;
            this.match(CypherParser.SP);
            this.state = 1219;
            this.elementScope();
            this.state = 1220;
            this.match(CypherParser.SP);
            this.state = 1221;
            this.match(CypherParser.TO);
            this.state = 1222;
            this.roles();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1224;
            this.match(CypherParser.DENY);
            this.state = 1225;
            this.match(CypherParser.SP);
            this.state = 1226;
            this.dbmsPrivilege();
            this.state = 1227;
            this.match(CypherParser.SP);
            this.state = 1228;
            this.match(CypherParser.ON);
            this.state = 1229;
            this.match(CypherParser.SP);
            this.state = 1230;
            this.match(CypherParser.DBMS);
            this.state = 1231;
            this.match(CypherParser.SP);
            this.state = 1232;
            this.match(CypherParser.TO);
            this.state = 1233;
            this.roles();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RevokePrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_revokePrivilege;
    return this;
}

RevokePrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokePrivilegeContext.prototype.constructor = RevokePrivilegeContext;

RevokePrivilegeContext.prototype.REVOKE = function() {
    return this.getToken(CypherParser.REVOKE, 0);
};

RevokePrivilegeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RevokePrivilegeContext.prototype.ROLE = function() {
    return this.getToken(CypherParser.ROLE, 0);
};

RevokePrivilegeContext.prototype.roles = function() {
    return this.getTypedRuleContext(RolesContext,0);
};

RevokePrivilegeContext.prototype.FROM = function() {
    return this.getToken(CypherParser.FROM, 0);
};

RevokePrivilegeContext.prototype.user = function() {
    return this.getTypedRuleContext(UserContext,0);
};

RevokePrivilegeContext.prototype.revokePart = function() {
    return this.getTypedRuleContext(RevokePartContext,0);
};

RevokePrivilegeContext.prototype.GRANT = function() {
    return this.getToken(CypherParser.GRANT, 0);
};

RevokePrivilegeContext.prototype.DENY = function() {
    return this.getToken(CypherParser.DENY, 0);
};

RevokePrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRevokePrivilege(this);
	}
};

RevokePrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRevokePrivilege(this);
	}
};




CypherParser.RevokePrivilegeContext = RevokePrivilegeContext;

CypherParser.prototype.revokePrivilege = function() {

    var localctx = new RevokePrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CypherParser.RULE_revokePrivilege);
    var _la = 0; // Token type
    try {
        this.state = 1258;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1237;
            this.match(CypherParser.REVOKE);
            this.state = 1238;
            this.match(CypherParser.SP);
            this.state = 1239;
            this.match(CypherParser.ROLE);
            this.state = 1240;
            this.match(CypherParser.SP);
            this.state = 1241;
            this.roles();
            this.state = 1242;
            this.match(CypherParser.SP);
            this.state = 1243;
            this.match(CypherParser.FROM);
            this.state = 1244;
            this.match(CypherParser.SP);
            this.state = 1245;
            this.user();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1247;
            this.match(CypherParser.REVOKE);
            this.state = 1250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1248;
                this.match(CypherParser.SP);
                this.state = 1249;
                _la = this._input.LA(1);
                if(!(_la===CypherParser.GRANT || _la===CypherParser.DENY)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1252;
            this.revokePart();
            this.state = 1253;
            this.match(CypherParser.SP);
            this.state = 1254;
            this.match(CypherParser.FROM);
            this.state = 1255;
            this.match(CypherParser.SP);
            this.state = 1256;
            this.roles();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RevokePartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_revokePart;
    return this;
}

RevokePartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokePartContext.prototype.constructor = RevokePartContext;

RevokePartContext.prototype.datasbasePrivilege = function() {
    return this.getTypedRuleContext(DatasbasePrivilegeContext,0);
};

RevokePartContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RevokePartContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

RevokePartContext.prototype.databaseScope = function() {
    return this.getTypedRuleContext(DatabaseScopeContext,0);
};

RevokePartContext.prototype.revokeableGraphPrivileges = function() {
    return this.getTypedRuleContext(RevokeableGraphPrivilegesContext,0);
};

RevokePartContext.prototype.graphScope = function() {
    return this.getTypedRuleContext(GraphScopeContext,0);
};

RevokePartContext.prototype.dbmsPrivilege = function() {
    return this.getTypedRuleContext(DbmsPrivilegeContext,0);
};

RevokePartContext.prototype.DBMS = function() {
    return this.getToken(CypherParser.DBMS, 0);
};

RevokePartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRevokePart(this);
	}
};

RevokePartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRevokePart(this);
	}
};




CypherParser.RevokePartContext = RevokePartContext;

CypherParser.prototype.revokePart = function() {

    var localctx = new RevokePartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CypherParser.RULE_revokePart);
    try {
        this.state = 1278;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1260;
            this.datasbasePrivilege();
            this.state = 1261;
            this.match(CypherParser.SP);
            this.state = 1262;
            this.match(CypherParser.ON);
            this.state = 1263;
            this.match(CypherParser.SP);
            this.state = 1264;
            this.databaseScope();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1266;
            this.revokeableGraphPrivileges();
            this.state = 1267;
            this.match(CypherParser.SP);
            this.state = 1268;
            this.match(CypherParser.ON);
            this.state = 1269;
            this.match(CypherParser.SP);
            this.state = 1270;
            this.graphScope();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1272;
            this.dbmsPrivilege();
            this.state = 1273;
            this.match(CypherParser.SP);
            this.state = 1274;
            this.match(CypherParser.ON);
            this.state = 1275;
            this.match(CypherParser.SP);
            this.state = 1276;
            this.match(CypherParser.DBMS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatabaseScopeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_databaseScope;
    return this;
}

DatabaseScopeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatabaseScopeContext.prototype.constructor = DatabaseScopeContext;

DatabaseScopeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


DatabaseScopeContext.prototype.DATABASE = function() {
    return this.getToken(CypherParser.DATABASE, 0);
};

DatabaseScopeContext.prototype.DATABASES = function() {
    return this.getToken(CypherParser.DATABASES, 0);
};

DatabaseScopeContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

DatabaseScopeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDatabaseScope(this);
	}
};

DatabaseScopeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDatabaseScope(this);
	}
};




CypherParser.DatabaseScopeContext = DatabaseScopeContext;

CypherParser.prototype.databaseScope = function() {

    var localctx = new DatabaseScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CypherParser.RULE_databaseScope);
    var _la = 0; // Token type
    try {
        this.state = 1299;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1280;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.DATABASE || _la===CypherParser.DATABASES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1281;
            this.match(CypherParser.SP);
            this.state = 1282;
            this.match(CypherParser.T__18);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1283;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.DATABASE || _la===CypherParser.DATABASES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1284;
            this.match(CypherParser.SP);
            this.state = 1285;
            this.symbolicName();
            this.state = 1296;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,109,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1287;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1286;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1289;
                    this.match(CypherParser.T__14);
                    this.state = 1291;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1290;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1293;
                    this.symbolicName(); 
                }
                this.state = 1298;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,109,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphScopeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_graphScope;
    return this;
}

GraphScopeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphScopeContext.prototype.constructor = GraphScopeContext;

GraphScopeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


GraphScopeContext.prototype.GRAPH = function() {
    return this.getToken(CypherParser.GRAPH, 0);
};

GraphScopeContext.prototype.GRAPHS = function() {
    return this.getToken(CypherParser.GRAPHS, 0);
};

GraphScopeContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

GraphScopeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterGraphScope(this);
	}
};

GraphScopeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitGraphScope(this);
	}
};




CypherParser.GraphScopeContext = GraphScopeContext;

CypherParser.prototype.graphScope = function() {

    var localctx = new GraphScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CypherParser.RULE_graphScope);
    var _la = 0; // Token type
    try {
        this.state = 1320;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1301;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.GRAPH || _la===CypherParser.GRAPHS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1302;
            this.match(CypherParser.SP);
            this.state = 1303;
            this.match(CypherParser.T__18);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1304;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.GRAPH || _la===CypherParser.GRAPHS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1305;
            this.match(CypherParser.SP);
            this.state = 1306;
            this.symbolicName();
            this.state = 1317;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1307;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1310;
                    this.match(CypherParser.T__14);
                    this.state = 1312;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1311;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1314;
                    this.symbolicName(); 
                }
                this.state = 1319;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_roles;
    return this;
}

RolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RolesContext.prototype.constructor = RolesContext;

RolesContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

RolesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRoles(this);
	}
};

RolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRoles(this);
	}
};




CypherParser.RolesContext = RolesContext;

CypherParser.prototype.roles = function() {

    var localctx = new RolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CypherParser.RULE_roles);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1322;
        this.symbolicName();
        this.state = 1333;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1324;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1323;
                    this.match(CypherParser.SP);
                }

                this.state = 1326;
                this.match(CypherParser.T__14);
                this.state = 1328;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1327;
                    this.match(CypherParser.SP);
                }

                this.state = 1330;
                this.symbolicName(); 
            }
            this.state = 1335;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GrantableGraphPrivilegesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_grantableGraphPrivileges;
    return this;
}

GrantableGraphPrivilegesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantableGraphPrivilegesContext.prototype.constructor = GrantableGraphPrivilegesContext;

GrantableGraphPrivilegesContext.prototype.revokeableGraphPrivileges = function() {
    return this.getTypedRuleContext(RevokeableGraphPrivilegesContext,0);
};

GrantableGraphPrivilegesContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

GrantableGraphPrivilegesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


GrantableGraphPrivilegesContext.prototype.propertiesList = function() {
    return this.getTypedRuleContext(PropertiesListContext,0);
};

GrantableGraphPrivilegesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterGrantableGraphPrivileges(this);
	}
};

GrantableGraphPrivilegesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitGrantableGraphPrivileges(this);
	}
};




CypherParser.GrantableGraphPrivilegesContext = GrantableGraphPrivilegesContext;

CypherParser.prototype.grantableGraphPrivileges = function() {

    var localctx = new GrantableGraphPrivilegesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CypherParser.RULE_grantableGraphPrivileges);
    var _la = 0; // Token type
    try {
        this.state = 1346;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.TRAVERSE:
        case CypherParser.READ:
        case CypherParser.WRITE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1336;
            this.revokeableGraphPrivileges();
            break;
        case CypherParser.MATCH:
            this.enterOuterAlt(localctx, 2);
            this.state = 1337;
            this.match(CypherParser.MATCH);
            this.state = 1338;
            this.match(CypherParser.SP);
            this.state = 1339;
            this.match(CypherParser.T__13);
            this.state = 1341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1340;
                this.match(CypherParser.SP);
            }

            this.state = 1343;
            this.propertiesList();
            this.state = 1344;
            this.match(CypherParser.T__15);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RevokeableGraphPrivilegesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_revokeableGraphPrivileges;
    return this;
}

RevokeableGraphPrivilegesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokeableGraphPrivilegesContext.prototype.constructor = RevokeableGraphPrivilegesContext;

RevokeableGraphPrivilegesContext.prototype.TRAVERSE = function() {
    return this.getToken(CypherParser.TRAVERSE, 0);
};

RevokeableGraphPrivilegesContext.prototype.READ = function() {
    return this.getToken(CypherParser.READ, 0);
};

RevokeableGraphPrivilegesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RevokeableGraphPrivilegesContext.prototype.propertiesList = function() {
    return this.getTypedRuleContext(PropertiesListContext,0);
};

RevokeableGraphPrivilegesContext.prototype.WRITE = function() {
    return this.getToken(CypherParser.WRITE, 0);
};

RevokeableGraphPrivilegesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRevokeableGraphPrivileges(this);
	}
};

RevokeableGraphPrivilegesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRevokeableGraphPrivileges(this);
	}
};




CypherParser.RevokeableGraphPrivilegesContext = RevokeableGraphPrivilegesContext;

CypherParser.prototype.revokeableGraphPrivileges = function() {

    var localctx = new RevokeableGraphPrivilegesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CypherParser.RULE_revokeableGraphPrivileges);
    var _la = 0; // Token type
    try {
        this.state = 1359;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.TRAVERSE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1348;
            this.match(CypherParser.TRAVERSE);
            break;
        case CypherParser.READ:
            this.enterOuterAlt(localctx, 2);
            this.state = 1349;
            this.match(CypherParser.READ);
            this.state = 1350;
            this.match(CypherParser.SP);
            this.state = 1351;
            this.match(CypherParser.T__13);
            this.state = 1353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1352;
                this.match(CypherParser.SP);
            }

            this.state = 1355;
            this.propertiesList();
            this.state = 1356;
            this.match(CypherParser.T__15);
            break;
        case CypherParser.WRITE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1358;
            this.match(CypherParser.WRITE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatasbasePrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_datasbasePrivilege;
    return this;
}

DatasbasePrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasbasePrivilegeContext.prototype.constructor = DatasbasePrivilegeContext;

DatasbasePrivilegeContext.prototype.ACCESS = function() {
    return this.getToken(CypherParser.ACCESS, 0);
};

DatasbasePrivilegeContext.prototype.START = function() {
    return this.getToken(CypherParser.START, 0);
};

DatasbasePrivilegeContext.prototype.STOP = function() {
    return this.getToken(CypherParser.STOP, 0);
};

DatasbasePrivilegeContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

DatasbasePrivilegeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


DatasbasePrivilegeContext.prototype.INDEX = function() {
    return this.getToken(CypherParser.INDEX, 0);
};

DatasbasePrivilegeContext.prototype.INDEXES = function() {
    return this.getToken(CypherParser.INDEXES, 0);
};

DatasbasePrivilegeContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DatasbasePrivilegeContext.prototype.MANAGEMENT = function() {
    return this.getToken(CypherParser.MANAGEMENT, 0);
};

DatasbasePrivilegeContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

DatasbasePrivilegeContext.prototype.CONSTRAINTS = function() {
    return this.getToken(CypherParser.CONSTRAINTS, 0);
};

DatasbasePrivilegeContext.prototype.NEW = function() {
    return this.getToken(CypherParser.NEW, 0);
};

DatasbasePrivilegeContext.prototype.LABEL = function() {
    return this.getToken(CypherParser.LABEL, 0);
};

DatasbasePrivilegeContext.prototype.LABELS = function() {
    return this.getToken(CypherParser.LABELS, 0);
};

DatasbasePrivilegeContext.prototype.NODE = function() {
    return this.getToken(CypherParser.NODE, 0);
};

DatasbasePrivilegeContext.prototype.TYPE = function() {
    return this.getToken(CypherParser.TYPE, 0);
};

DatasbasePrivilegeContext.prototype.TYPES = function() {
    return this.getToken(CypherParser.TYPES, 0);
};

DatasbasePrivilegeContext.prototype.RELATIONSHIP = function() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
};

DatasbasePrivilegeContext.prototype.NAME = function() {
    return this.getToken(CypherParser.NAME, 0);
};

DatasbasePrivilegeContext.prototype.NAMES = function() {
    return this.getToken(CypherParser.NAMES, 0);
};

DatasbasePrivilegeContext.prototype.PROPERTY = function() {
    return this.getToken(CypherParser.PROPERTY, 0);
};

DatasbasePrivilegeContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

DatasbasePrivilegeContext.prototype.PRIVILEGES = function() {
    return this.getToken(CypherParser.PRIVILEGES, 0);
};

DatasbasePrivilegeContext.prototype.DATABASE = function() {
    return this.getToken(CypherParser.DATABASE, 0);
};

DatasbasePrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDatasbasePrivilege(this);
	}
};

DatasbasePrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDatasbasePrivilege(this);
	}
};




CypherParser.DatasbasePrivilegeContext = DatasbasePrivilegeContext;

CypherParser.prototype.datasbasePrivilege = function() {

    var localctx = new DatasbasePrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CypherParser.RULE_datasbasePrivilege);
    var _la = 0; // Token type
    try {
        this.state = 1423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1361;
            this.match(CypherParser.ACCESS);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1362;
            this.match(CypherParser.START);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1363;
            this.match(CypherParser.STOP);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1364;
            this.match(CypherParser.CREATE);
            this.state = 1365;
            this.match(CypherParser.SP);
            this.state = 1366;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.INDEX || _la===CypherParser.INDEXES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1367;
            this.match(CypherParser.DROP);
            this.state = 1368;
            this.match(CypherParser.SP);
            this.state = 1369;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.INDEX || _la===CypherParser.INDEXES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1370;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.INDEX || _la===CypherParser.INDEXES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1371;
            this.match(CypherParser.SP);
            this.state = 1372;
            this.match(CypherParser.MANAGEMENT);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1373;
            this.match(CypherParser.CREATE);
            this.state = 1374;
            this.match(CypherParser.SP);
            this.state = 1375;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.CONSTRAINT || _la===CypherParser.CONSTRAINTS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1376;
            this.match(CypherParser.DROP);
            this.state = 1377;
            this.match(CypherParser.SP);
            this.state = 1378;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.CONSTRAINT || _la===CypherParser.CONSTRAINTS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1379;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.CONSTRAINT || _la===CypherParser.CONSTRAINTS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1380;
            this.match(CypherParser.SP);
            this.state = 1381;
            this.match(CypherParser.MANAGEMENT);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1382;
            this.match(CypherParser.CREATE);
            this.state = 1383;
            this.match(CypherParser.SP);
            this.state = 1384;
            this.match(CypherParser.NEW);
            this.state = 1385;
            this.match(CypherParser.SP);
            this.state = 1388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.NODE) {
                this.state = 1386;
                this.match(CypherParser.NODE);
                this.state = 1387;
                this.match(CypherParser.SP);
            }

            this.state = 1390;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.LABEL || _la===CypherParser.LABELS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1391;
            this.match(CypherParser.CREATE);
            this.state = 1392;
            this.match(CypherParser.SP);
            this.state = 1393;
            this.match(CypherParser.NEW);
            this.state = 1394;
            this.match(CypherParser.SP);
            this.state = 1397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.RELATIONSHIP) {
                this.state = 1395;
                this.match(CypherParser.RELATIONSHIP);
                this.state = 1396;
                this.match(CypherParser.SP);
            }

            this.state = 1399;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.TYPE || _la===CypherParser.TYPES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1400;
            this.match(CypherParser.CREATE);
            this.state = 1401;
            this.match(CypherParser.SP);
            this.state = 1402;
            this.match(CypherParser.NEW);
            this.state = 1403;
            this.match(CypherParser.SP);
            this.state = 1406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.PROPERTY) {
                this.state = 1404;
                this.match(CypherParser.PROPERTY);
                this.state = 1405;
                this.match(CypherParser.SP);
            }

            this.state = 1408;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.NAME || _la===CypherParser.NAMES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1409;
            this.match(CypherParser.NAME);
            this.state = 1412;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
            if(la_===1) {
                this.state = 1410;
                this.match(CypherParser.SP);
                this.state = 1411;
                this.match(CypherParser.MANAGEMENT);

            }
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1414;
            this.match(CypherParser.ALL);
            this.state = 1421;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
            if(la_===1) {
                this.state = 1415;
                this.match(CypherParser.SP);
                this.state = 1418;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.DATABASE) {
                    this.state = 1416;
                    this.match(CypherParser.DATABASE);
                    this.state = 1417;
                    this.match(CypherParser.SP);
                }

                this.state = 1420;
                this.match(CypherParser.PRIVILEGES);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DbmsPrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dbmsPrivilege;
    return this;
}

DbmsPrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DbmsPrivilegeContext.prototype.constructor = DbmsPrivilegeContext;

DbmsPrivilegeContext.prototype.ROLE = function() {
    return this.getToken(CypherParser.ROLE, 0);
};

DbmsPrivilegeContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DbmsPrivilegeContext.prototype.MANAGEMENT = function() {
    return this.getToken(CypherParser.MANAGEMENT, 0);
};

DbmsPrivilegeContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

DbmsPrivilegeContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DbmsPrivilegeContext.prototype.ASSIGN = function() {
    return this.getToken(CypherParser.ASSIGN, 0);
};

DbmsPrivilegeContext.prototype.REMOVE = function() {
    return this.getToken(CypherParser.REMOVE, 0);
};

DbmsPrivilegeContext.prototype.SHOW = function() {
    return this.getToken(CypherParser.SHOW, 0);
};

DbmsPrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDbmsPrivilege(this);
	}
};

DbmsPrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDbmsPrivilege(this);
	}
};




CypherParser.DbmsPrivilegeContext = DbmsPrivilegeContext;

CypherParser.prototype.dbmsPrivilege = function() {

    var localctx = new DbmsPrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CypherParser.RULE_dbmsPrivilege);
    try {
        this.state = 1443;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.ROLE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1425;
            this.match(CypherParser.ROLE);
            this.state = 1426;
            this.match(CypherParser.SP);
            this.state = 1427;
            this.match(CypherParser.MANAGEMENT);
            break;
        case CypherParser.CREATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1428;
            this.match(CypherParser.CREATE);
            this.state = 1429;
            this.match(CypherParser.SP);
            this.state = 1430;
            this.match(CypherParser.ROLE);
            break;
        case CypherParser.DROP:
            this.enterOuterAlt(localctx, 3);
            this.state = 1431;
            this.match(CypherParser.DROP);
            this.state = 1432;
            this.match(CypherParser.SP);
            this.state = 1433;
            this.match(CypherParser.ROLE);
            break;
        case CypherParser.ASSIGN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1434;
            this.match(CypherParser.ASSIGN);
            this.state = 1435;
            this.match(CypherParser.SP);
            this.state = 1436;
            this.match(CypherParser.ROLE);
            break;
        case CypherParser.REMOVE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1437;
            this.match(CypherParser.REMOVE);
            this.state = 1438;
            this.match(CypherParser.SP);
            this.state = 1439;
            this.match(CypherParser.ROLE);
            break;
        case CypherParser.SHOW:
            this.enterOuterAlt(localctx, 6);
            this.state = 1440;
            this.match(CypherParser.SHOW);
            this.state = 1441;
            this.match(CypherParser.SP);
            this.state = 1442;
            this.match(CypherParser.ROLE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementScopeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_elementScope;
    return this;
}

ElementScopeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementScopeContext.prototype.constructor = ElementScopeContext;

ElementScopeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ElementScopeContext.prototype.propertiesList = function() {
    return this.getTypedRuleContext(PropertiesListContext,0);
};

ElementScopeContext.prototype.RELATIONSHIP = function() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
};

ElementScopeContext.prototype.RELATIONSHIPS = function() {
    return this.getToken(CypherParser.RELATIONSHIPS, 0);
};

ElementScopeContext.prototype.propertyScope = function() {
    return this.getTypedRuleContext(PropertyScopeContext,0);
};

ElementScopeContext.prototype.NODE = function() {
    return this.getToken(CypherParser.NODE, 0);
};

ElementScopeContext.prototype.NODES = function() {
    return this.getToken(CypherParser.NODES, 0);
};

ElementScopeContext.prototype.ELEMENT = function() {
    return this.getToken(CypherParser.ELEMENT, 0);
};

ElementScopeContext.prototype.ELEMENTS = function() {
    return this.getToken(CypherParser.ELEMENTS, 0);
};

ElementScopeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterElementScope(this);
	}
};

ElementScopeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitElementScope(this);
	}
};




CypherParser.ElementScopeContext = ElementScopeContext;

CypherParser.prototype.elementScope = function() {

    var localctx = new ElementScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CypherParser.RULE_elementScope);
    var _la = 0; // Token type
    try {
        this.state = 1466;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.RELATIONSHIP:
        case CypherParser.RELATIONSHIPS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1445;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.RELATIONSHIP || _la===CypherParser.RELATIONSHIPS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1446;
            this.match(CypherParser.SP);
            this.state = 1447;
            this.propertiesList();
            this.state = 1450;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
            if(la_===1) {
                this.state = 1448;
                this.match(CypherParser.SP);
                this.state = 1449;
                this.propertyScope();

            }
            break;
        case CypherParser.NODE:
        case CypherParser.NODES:
            this.enterOuterAlt(localctx, 2);
            this.state = 1452;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.NODE || _la===CypherParser.NODES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1453;
            this.match(CypherParser.SP);
            this.state = 1454;
            this.propertiesList();
            this.state = 1457;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
            if(la_===1) {
                this.state = 1455;
                this.match(CypherParser.SP);
                this.state = 1456;
                this.propertyScope();

            }
            break;
        case CypherParser.ELEMENT:
        case CypherParser.ELEMENTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 1459;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.ELEMENT || _la===CypherParser.ELEMENTS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1460;
            this.match(CypherParser.SP);
            this.state = 1461;
            this.propertiesList();
            this.state = 1464;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
            if(la_===1) {
                this.state = 1462;
                this.match(CypherParser.SP);
                this.state = 1463;
                this.propertyScope();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertiesListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertiesList;
    return this;
}

PropertiesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertiesListContext.prototype.constructor = PropertiesListContext;

PropertiesListContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

PropertiesListContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertiesListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertiesList(this);
	}
};

PropertiesListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertiesList(this);
	}
};




CypherParser.PropertiesListContext = PropertiesListContext;

CypherParser.prototype.propertiesList = function() {

    var localctx = new PropertiesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CypherParser.RULE_propertiesList);
    var _la = 0; // Token type
    try {
        this.state = 1483;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__18:
            this.enterOuterAlt(localctx, 1);
            this.state = 1468;
            this.match(CypherParser.T__18);
            break;
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.PERIODIC:
        case CypherParser.COMMIT:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.INDEX:
        case CypherParser.ON:
        case CypherParser.CONSTRAINT:
        case CypherParser.ASSERT:
        case CypherParser.IS:
        case CypherParser.UNIQUE:
        case CypherParser.EXISTS:
        case CypherParser.LOAD:
        case CypherParser.CSV:
        case CypherParser.WITH:
        case CypherParser.HEADERS:
        case CypherParser.FROM:
        case CypherParser.AS:
        case CypherParser.FIELDTERMINATOR:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.IN:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.JOIN:
        case CypherParser.SCAN:
        case CypherParser.START:
        case CypherParser.NODE:
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
        case CypherParser.WHERE:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.REDUCE:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CALL:
        case CypherParser.YIELD:
        case CypherParser.KEY:
        case CypherParser.CATALOG:
        case CypherParser.SHOW:
        case CypherParser.DEFAULT:
        case CypherParser.DBMS:
        case CypherParser.DATABASE:
        case CypherParser.DATABASES:
        case CypherParser.GRAPH:
        case CypherParser.GRAPHS:
        case CypherParser.REPLACE:
        case CypherParser.IF:
        case CypherParser.STOP:
        case CypherParser.ROLE:
        case CypherParser.ROLES:
        case CypherParser.USER:
        case CypherParser.USERS:
        case CypherParser.POPULATED:
        case CypherParser.PASSWORD:
        case CypherParser.CHANGE:
        case CypherParser.REQUIRED:
        case CypherParser.STATUS:
        case CypherParser.ACTIVE:
        case CypherParser.SUSPENDED:
        case CypherParser.ALTER:
        case CypherParser.CURRENT:
        case CypherParser.TO:
        case CypherParser.PRIVILEGES:
        case CypherParser.GRANT:
        case CypherParser.DENY:
        case CypherParser.REVOKE:
        case CypherParser.RELATIONSHIPS:
        case CypherParser.NODES:
        case CypherParser.ELEMENT:
        case CypherParser.ELEMENTS:
        case CypherParser.COPY:
        case CypherParser.OF:
        case CypherParser.TRAVERSE:
        case CypherParser.READ:
        case CypherParser.WRITE:
        case CypherParser.ACCESS:
        case CypherParser.INDEXES:
        case CypherParser.MANAGEMENT:
        case CypherParser.NEW:
        case CypherParser.LABEL:
        case CypherParser.LABELS:
        case CypherParser.NAME:
        case CypherParser.NAMES:
        case CypherParser.TYPE:
        case CypherParser.TYPES:
        case CypherParser.PROPERTY:
        case CypherParser.CONSTRAINTS:
        case CypherParser.ASSIGN:
        case CypherParser.BTREE:
        case CypherParser.EXIST:
        case CypherParser.FOR:
        case CypherParser.OPTIONS:
        case CypherParser.EXECUTE:
        case CypherParser.DEFINED:
        case CypherParser.FUNCTION:
        case CypherParser.FUNCTIONS:
        case CypherParser.BOOSTED:
        case CypherParser.PROCEDURE:
        case CypherParser.PROCEDURES:
        case CypherParser.ADMIN:
        case CypherParser.ADMINISTRATOR:
        case CypherParser.BRIEF:
        case CypherParser.VERBOSE:
        case CypherParser.OUTPUT:
        case CypherParser.BUILT:
        case CypherParser.EACH:
        case CypherParser.EXECUTABLE:
        case CypherParser.EXISTENCE:
        case CypherParser.FULLTEXT:
        case CypherParser.HOME:
        case CypherParser.LOOKUP:
        case CypherParser.RENAME:
        case CypherParser.HexLetter:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 2);
            this.state = 1469;
            this.symbolicName();
            this.state = 1480;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1471;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1470;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1473;
                    this.match(CypherParser.T__14);
                    this.state = 1475;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 1474;
                        this.match(CypherParser.SP);
                    }

                    this.state = 1477;
                    this.symbolicName(); 
                }
                this.state = 1482;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyScopeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyScope;
    return this;
}

PropertyScopeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyScopeContext.prototype.constructor = PropertyScopeContext;

PropertyScopeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyScopeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyScope(this);
	}
};

PropertyScopeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyScope(this);
	}
};




CypherParser.PropertyScopeContext = PropertyScopeContext;

CypherParser.prototype.propertyScope = function() {

    var localctx = new PropertyScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CypherParser.RULE_propertyScope);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1485;
        this.match(CypherParser.T__19);
        this.state = 1487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1486;
            this.match(CypherParser.SP);
        }

        this.state = 1489;
        this.match(CypherParser.T__18);
        this.state = 1491;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1490;
            this.match(CypherParser.SP);
        }

        this.state = 1493;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShowDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_showDatabase;
    return this;
}

ShowDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowDatabaseContext.prototype.constructor = ShowDatabaseContext;

ShowDatabaseContext.prototype.SHOW = function() {
    return this.getToken(CypherParser.SHOW, 0);
};

ShowDatabaseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ShowDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(CypherParser.DATABASE, 0);
};

ShowDatabaseContext.prototype.DEFAULT = function() {
    return this.getToken(CypherParser.DEFAULT, 0);
};

ShowDatabaseContext.prototype.DATABASES = function() {
    return this.getToken(CypherParser.DATABASES, 0);
};

ShowDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterShowDatabase(this);
	}
};

ShowDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitShowDatabase(this);
	}
};




CypherParser.ShowDatabaseContext = ShowDatabaseContext;

CypherParser.prototype.showDatabase = function() {

    var localctx = new ShowDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CypherParser.RULE_showDatabase);
    var _la = 0; // Token type
    try {
        this.state = 1505;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1495;
            this.match(CypherParser.SHOW);
            this.state = 1496;
            this.match(CypherParser.SP);
            this.state = 1499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.DEFAULT) {
                this.state = 1497;
                this.match(CypherParser.DEFAULT);
                this.state = 1498;
                this.match(CypherParser.SP);
            }

            this.state = 1501;
            this.match(CypherParser.DATABASE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1502;
            this.match(CypherParser.SHOW);
            this.state = 1503;
            this.match(CypherParser.SP);
            this.state = 1504;
            this.match(CypherParser.DATABASES);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createDatabase;
    return this;
}

CreateDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;

CreateDatabaseContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateDatabaseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CreateDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(CypherParser.DATABASE, 0);
};

CreateDatabaseContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

CreateDatabaseContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateDatabaseContext.prototype.orReplace = function() {
    return this.getTypedRuleContext(OrReplaceContext,0);
};

CreateDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateDatabase(this);
	}
};




CypherParser.CreateDatabaseContext = CreateDatabaseContext;

CypherParser.prototype.createDatabase = function() {

    var localctx = new CreateDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CypherParser.RULE_createDatabase);
    var _la = 0; // Token type
    try {
        this.state = 1526;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1507;
            this.match(CypherParser.CREATE);
            this.state = 1508;
            this.match(CypherParser.SP);
            this.state = 1509;
            this.match(CypherParser.DATABASE);
            this.state = 1510;
            this.match(CypherParser.SP);
            this.state = 1511;
            this.symbolicName();
            this.state = 1514;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
            if(la_===1) {
                this.state = 1512;
                this.match(CypherParser.SP);
                this.state = 1513;
                this.ifNotExists();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1516;
            this.match(CypherParser.CREATE);
            this.state = 1517;
            this.match(CypherParser.SP);
            this.state = 1521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.OR) {
                this.state = 1518;
                this.orReplace();
                this.state = 1519;
                this.match(CypherParser.SP);
            }

            this.state = 1523;
            this.match(CypherParser.DATABASE);
            this.state = 1524;
            this.match(CypherParser.SP);
            this.state = 1525;
            this.symbolicName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropDatabase;
    return this;
}

DropDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;

DropDatabaseContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropDatabaseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


DropDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(CypherParser.DATABASE, 0);
};

DropDatabaseContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

DropDatabaseContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropDatabase(this);
	}
};

DropDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropDatabase(this);
	}
};




CypherParser.DropDatabaseContext = DropDatabaseContext;

CypherParser.prototype.dropDatabase = function() {

    var localctx = new DropDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CypherParser.RULE_dropDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1528;
        this.match(CypherParser.DROP);
        this.state = 1529;
        this.match(CypherParser.SP);
        this.state = 1530;
        this.match(CypherParser.DATABASE);
        this.state = 1531;
        this.match(CypherParser.SP);
        this.state = 1532;
        this.symbolicName();
        this.state = 1535;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        if(la_===1) {
            this.state = 1533;
            this.match(CypherParser.SP);
            this.state = 1534;
            this.ifExists();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StartDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_startDatabase;
    return this;
}

StartDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartDatabaseContext.prototype.constructor = StartDatabaseContext;

StartDatabaseContext.prototype.START = function() {
    return this.getToken(CypherParser.START, 0);
};

StartDatabaseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


StartDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(CypherParser.DATABASE, 0);
};

StartDatabaseContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

StartDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStartDatabase(this);
	}
};

StartDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStartDatabase(this);
	}
};




CypherParser.StartDatabaseContext = StartDatabaseContext;

CypherParser.prototype.startDatabase = function() {

    var localctx = new StartDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CypherParser.RULE_startDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1537;
        this.match(CypherParser.START);
        this.state = 1538;
        this.match(CypherParser.SP);
        this.state = 1539;
        this.match(CypherParser.DATABASE);
        this.state = 1540;
        this.match(CypherParser.SP);
        this.state = 1541;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StopDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_stopDatabase;
    return this;
}

StopDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StopDatabaseContext.prototype.constructor = StopDatabaseContext;

StopDatabaseContext.prototype.STOP = function() {
    return this.getToken(CypherParser.STOP, 0);
};

StopDatabaseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


StopDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(CypherParser.DATABASE, 0);
};

StopDatabaseContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

StopDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStopDatabase(this);
	}
};

StopDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStopDatabase(this);
	}
};




CypherParser.StopDatabaseContext = StopDatabaseContext;

CypherParser.prototype.stopDatabase = function() {

    var localctx = new StopDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CypherParser.RULE_stopDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1543;
        this.match(CypherParser.STOP);
        this.state = 1544;
        this.match(CypherParser.SP);
        this.state = 1545;
        this.match(CypherParser.DATABASE);
        this.state = 1546;
        this.match(CypherParser.SP);
        this.state = 1547;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfNotExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_ifNotExists;
    return this;
}

IfNotExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistsContext.prototype.constructor = IfNotExistsContext;

IfNotExistsContext.prototype.IF = function() {
    return this.getToken(CypherParser.IF, 0);
};

IfNotExistsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


IfNotExistsContext.prototype.NOT = function() {
    return this.getToken(CypherParser.NOT, 0);
};

IfNotExistsContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

IfNotExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIfNotExists(this);
	}
};

IfNotExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIfNotExists(this);
	}
};




CypherParser.IfNotExistsContext = IfNotExistsContext;

CypherParser.prototype.ifNotExists = function() {

    var localctx = new IfNotExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CypherParser.RULE_ifNotExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1549;
        this.match(CypherParser.IF);
        this.state = 1550;
        this.match(CypherParser.SP);
        this.state = 1551;
        this.match(CypherParser.NOT);
        this.state = 1552;
        this.match(CypherParser.SP);
        this.state = 1553;
        this.match(CypherParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_ifExists;
    return this;
}

IfExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistsContext.prototype.constructor = IfExistsContext;

IfExistsContext.prototype.IF = function() {
    return this.getToken(CypherParser.IF, 0);
};

IfExistsContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

IfExistsContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

IfExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIfExists(this);
	}
};

IfExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIfExists(this);
	}
};




CypherParser.IfExistsContext = IfExistsContext;

CypherParser.prototype.ifExists = function() {

    var localctx = new IfExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CypherParser.RULE_ifExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1555;
        this.match(CypherParser.IF);
        this.state = 1556;
        this.match(CypherParser.SP);
        this.state = 1557;
        this.match(CypherParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrReplaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_orReplace;
    return this;
}

OrReplaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrReplaceContext.prototype.constructor = OrReplaceContext;

OrReplaceContext.prototype.OR = function() {
    return this.getToken(CypherParser.OR, 0);
};

OrReplaceContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OrReplaceContext.prototype.REPLACE = function() {
    return this.getToken(CypherParser.REPLACE, 0);
};

OrReplaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOrReplace(this);
	}
};

OrReplaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOrReplace(this);
	}
};




CypherParser.OrReplaceContext = OrReplaceContext;

CypherParser.prototype.orReplace = function() {

    var localctx = new OrReplaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CypherParser.RULE_orReplace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1559;
        this.match(CypherParser.OR);
        this.state = 1560;
        this.match(CypherParser.SP);
        this.state = 1561;
        this.match(CypherParser.REPLACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetPasswordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setPassword;
    return this;
}

SetPasswordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetPasswordContext.prototype.constructor = SetPasswordContext;

SetPasswordContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

SetPasswordContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SetPasswordContext.prototype.PASSWORD = function() {
    return this.getToken(CypherParser.PASSWORD, 0);
};

SetPasswordContext.prototype.password = function() {
    return this.getTypedRuleContext(PasswordContext,0);
};

SetPasswordContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

SetPasswordContext.prototype.passwordStatus = function() {
    return this.getTypedRuleContext(PasswordStatusContext,0);
};

SetPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSetPassword(this);
	}
};

SetPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSetPassword(this);
	}
};




CypherParser.SetPasswordContext = SetPasswordContext;

CypherParser.prototype.setPassword = function() {

    var localctx = new SetPasswordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CypherParser.RULE_setPassword);
    try {
        this.state = 1580;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1563;
            this.match(CypherParser.SET);
            this.state = 1564;
            this.match(CypherParser.SP);
            this.state = 1565;
            this.match(CypherParser.PASSWORD);
            this.state = 1566;
            this.match(CypherParser.SP);
            this.state = 1569;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CypherParser.CYPHER:
            case CypherParser.EXPLAIN:
            case CypherParser.PROFILE:
            case CypherParser.USING:
            case CypherParser.PERIODIC:
            case CypherParser.COMMIT:
            case CypherParser.UNION:
            case CypherParser.ALL:
            case CypherParser.CREATE:
            case CypherParser.DROP:
            case CypherParser.INDEX:
            case CypherParser.ON:
            case CypherParser.CONSTRAINT:
            case CypherParser.ASSERT:
            case CypherParser.IS:
            case CypherParser.UNIQUE:
            case CypherParser.EXISTS:
            case CypherParser.LOAD:
            case CypherParser.CSV:
            case CypherParser.WITH:
            case CypherParser.HEADERS:
            case CypherParser.FROM:
            case CypherParser.AS:
            case CypherParser.FIELDTERMINATOR:
            case CypherParser.OPTIONAL:
            case CypherParser.MATCH:
            case CypherParser.UNWIND:
            case CypherParser.MERGE:
            case CypherParser.SET:
            case CypherParser.DETACH:
            case CypherParser.DELETE:
            case CypherParser.REMOVE:
            case CypherParser.FOREACH:
            case CypherParser.IN:
            case CypherParser.DISTINCT:
            case CypherParser.RETURN:
            case CypherParser.ORDER:
            case CypherParser.BY:
            case CypherParser.L_SKIP:
            case CypherParser.LIMIT:
            case CypherParser.ASCENDING:
            case CypherParser.ASC:
            case CypherParser.DESCENDING:
            case CypherParser.DESC:
            case CypherParser.JOIN:
            case CypherParser.SCAN:
            case CypherParser.START:
            case CypherParser.NODE:
            case CypherParser.RELATIONSHIP:
            case CypherParser.REL:
            case CypherParser.WHERE:
            case CypherParser.SHORTESTPATH:
            case CypherParser.ALLSHORTESTPATHS:
            case CypherParser.OR:
            case CypherParser.XOR:
            case CypherParser.AND:
            case CypherParser.NOT:
            case CypherParser.STARTS:
            case CypherParser.ENDS:
            case CypherParser.CONTAINS:
            case CypherParser.NULL:
            case CypherParser.COUNT:
            case CypherParser.FILTER:
            case CypherParser.EXTRACT:
            case CypherParser.ANY:
            case CypherParser.NONE:
            case CypherParser.SINGLE:
            case CypherParser.TRUE:
            case CypherParser.FALSE:
            case CypherParser.REDUCE:
            case CypherParser.CASE:
            case CypherParser.ELSE:
            case CypherParser.END:
            case CypherParser.WHEN:
            case CypherParser.THEN:
            case CypherParser.CALL:
            case CypherParser.YIELD:
            case CypherParser.KEY:
            case CypherParser.CATALOG:
            case CypherParser.SHOW:
            case CypherParser.DEFAULT:
            case CypherParser.DBMS:
            case CypherParser.DATABASE:
            case CypherParser.DATABASES:
            case CypherParser.GRAPH:
            case CypherParser.GRAPHS:
            case CypherParser.REPLACE:
            case CypherParser.IF:
            case CypherParser.STOP:
            case CypherParser.ROLE:
            case CypherParser.ROLES:
            case CypherParser.USER:
            case CypherParser.USERS:
            case CypherParser.POPULATED:
            case CypherParser.PASSWORD:
            case CypherParser.CHANGE:
            case CypherParser.REQUIRED:
            case CypherParser.STATUS:
            case CypherParser.ACTIVE:
            case CypherParser.SUSPENDED:
            case CypherParser.ALTER:
            case CypherParser.CURRENT:
            case CypherParser.TO:
            case CypherParser.PRIVILEGES:
            case CypherParser.GRANT:
            case CypherParser.DENY:
            case CypherParser.REVOKE:
            case CypherParser.RELATIONSHIPS:
            case CypherParser.NODES:
            case CypherParser.ELEMENT:
            case CypherParser.ELEMENTS:
            case CypherParser.COPY:
            case CypherParser.OF:
            case CypherParser.TRAVERSE:
            case CypherParser.READ:
            case CypherParser.WRITE:
            case CypherParser.ACCESS:
            case CypherParser.INDEXES:
            case CypherParser.MANAGEMENT:
            case CypherParser.NEW:
            case CypherParser.LABEL:
            case CypherParser.LABELS:
            case CypherParser.NAME:
            case CypherParser.NAMES:
            case CypherParser.TYPE:
            case CypherParser.TYPES:
            case CypherParser.PROPERTY:
            case CypherParser.CONSTRAINTS:
            case CypherParser.ASSIGN:
            case CypherParser.BTREE:
            case CypherParser.EXIST:
            case CypherParser.FOR:
            case CypherParser.OPTIONS:
            case CypherParser.EXECUTE:
            case CypherParser.DEFINED:
            case CypherParser.FUNCTION:
            case CypherParser.FUNCTIONS:
            case CypherParser.BOOSTED:
            case CypherParser.PROCEDURE:
            case CypherParser.PROCEDURES:
            case CypherParser.ADMIN:
            case CypherParser.ADMINISTRATOR:
            case CypherParser.BRIEF:
            case CypherParser.VERBOSE:
            case CypherParser.OUTPUT:
            case CypherParser.BUILT:
            case CypherParser.EACH:
            case CypherParser.EXECUTABLE:
            case CypherParser.EXISTENCE:
            case CypherParser.FULLTEXT:
            case CypherParser.HOME:
            case CypherParser.LOOKUP:
            case CypherParser.RENAME:
            case CypherParser.HexLetter:
            case CypherParser.UnescapedSymbolicName:
            case CypherParser.EscapedSymbolicName:
                this.state = 1567;
                this.password();
                break;
            case CypherParser.T__13:
            case CypherParser.T__33:
                this.state = 1568;
                this.parameter();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1573;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
            if(la_===1) {
                this.state = 1571;
                this.match(CypherParser.SP);
                this.state = 1572;
                this.passwordStatus();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1575;
            this.match(CypherParser.SET);
            this.state = 1576;
            this.match(CypherParser.SP);
            this.state = 1577;
            this.match(CypherParser.PASSWORD);
            this.state = 1578;
            this.match(CypherParser.SP);
            this.state = 1579;
            this.passwordStatus();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PasswordStatusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_passwordStatus;
    return this;
}

PasswordStatusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PasswordStatusContext.prototype.constructor = PasswordStatusContext;

PasswordStatusContext.prototype.CHANGE = function() {
    return this.getToken(CypherParser.CHANGE, 0);
};

PasswordStatusContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PasswordStatusContext.prototype.REQUIRED = function() {
    return this.getToken(CypherParser.REQUIRED, 0);
};

PasswordStatusContext.prototype.NOT = function() {
    return this.getToken(CypherParser.NOT, 0);
};

PasswordStatusContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPasswordStatus(this);
	}
};

PasswordStatusContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPasswordStatus(this);
	}
};




CypherParser.PasswordStatusContext = PasswordStatusContext;

CypherParser.prototype.passwordStatus = function() {

    var localctx = new PasswordStatusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CypherParser.RULE_passwordStatus);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1582;
        this.match(CypherParser.CHANGE);
        this.state = 1583;
        this.match(CypherParser.SP);
        this.state = 1586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.NOT) {
            this.state = 1584;
            this.match(CypherParser.NOT);
            this.state = 1585;
            this.match(CypherParser.SP);
        }

        this.state = 1588;
        this.match(CypherParser.REQUIRED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetStatusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setStatus;
    return this;
}

SetStatusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetStatusContext.prototype.constructor = SetStatusContext;

SetStatusContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

SetStatusContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SetStatusContext.prototype.STATUS = function() {
    return this.getToken(CypherParser.STATUS, 0);
};

SetStatusContext.prototype.userStatus = function() {
    return this.getTypedRuleContext(UserStatusContext,0);
};

SetStatusContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSetStatus(this);
	}
};

SetStatusContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSetStatus(this);
	}
};




CypherParser.SetStatusContext = SetStatusContext;

CypherParser.prototype.setStatus = function() {

    var localctx = new SetStatusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CypherParser.RULE_setStatus);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1590;
        this.match(CypherParser.SET);
        this.state = 1591;
        this.match(CypherParser.SP);
        this.state = 1592;
        this.match(CypherParser.STATUS);
        this.state = 1593;
        this.match(CypherParser.SP);
        this.state = 1594;
        this.userStatus();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserStatusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_userStatus;
    return this;
}

UserStatusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserStatusContext.prototype.constructor = UserStatusContext;

UserStatusContext.prototype.ACTIVE = function() {
    return this.getToken(CypherParser.ACTIVE, 0);
};

UserStatusContext.prototype.SUSPENDED = function() {
    return this.getToken(CypherParser.SUSPENDED, 0);
};

UserStatusContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUserStatus(this);
	}
};

UserStatusContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUserStatus(this);
	}
};




CypherParser.UserStatusContext = UserStatusContext;

CypherParser.prototype.userStatus = function() {

    var localctx = new UserStatusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CypherParser.RULE_userStatus);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1596;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.ACTIVE || _la===CypherParser.SUSPENDED)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateUniqueConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createUniqueConstraint;
    return this;
}

CreateUniqueConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUniqueConstraintContext.prototype.constructor = CreateUniqueConstraintContext;

CreateUniqueConstraintContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateUniqueConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateUniqueConstraintContext.prototype.uniqueConstraint = function() {
    return this.getTypedRuleContext(UniqueConstraintContext,0);
};

CreateUniqueConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateUniqueConstraint(this);
	}
};

CreateUniqueConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateUniqueConstraint(this);
	}
};




CypherParser.CreateUniqueConstraintContext = CreateUniqueConstraintContext;

CypherParser.prototype.createUniqueConstraint = function() {

    var localctx = new CreateUniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CypherParser.RULE_createUniqueConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1598;
        this.match(CypherParser.CREATE);
        this.state = 1599;
        this.match(CypherParser.SP);
        this.state = 1600;
        this.uniqueConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateNodeKeyConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createNodeKeyConstraint;
    return this;
}

CreateNodeKeyConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateNodeKeyConstraintContext.prototype.constructor = CreateNodeKeyConstraintContext;

CreateNodeKeyConstraintContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateNodeKeyConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateNodeKeyConstraintContext.prototype.nodeKeyConstraint = function() {
    return this.getTypedRuleContext(NodeKeyConstraintContext,0);
};

CreateNodeKeyConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateNodeKeyConstraint(this);
	}
};

CreateNodeKeyConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateNodeKeyConstraint(this);
	}
};




CypherParser.CreateNodeKeyConstraintContext = CreateNodeKeyConstraintContext;

CypherParser.prototype.createNodeKeyConstraint = function() {

    var localctx = new CreateNodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CypherParser.RULE_createNodeKeyConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1602;
        this.match(CypherParser.CREATE);
        this.state = 1603;
        this.match(CypherParser.SP);
        this.state = 1604;
        this.nodeKeyConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateNodePropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createNodePropertyExistenceConstraint;
    return this;
}

CreateNodePropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateNodePropertyExistenceConstraintContext.prototype.constructor = CreateNodePropertyExistenceConstraintContext;

CreateNodePropertyExistenceConstraintContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateNodePropertyExistenceConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateNodePropertyExistenceConstraintContext.prototype.nodePropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);
};

CreateNodePropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateNodePropertyExistenceConstraint(this);
	}
};

CreateNodePropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateNodePropertyExistenceConstraint(this);
	}
};




CypherParser.CreateNodePropertyExistenceConstraintContext = CreateNodePropertyExistenceConstraintContext;

CypherParser.prototype.createNodePropertyExistenceConstraint = function() {

    var localctx = new CreateNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CypherParser.RULE_createNodePropertyExistenceConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1606;
        this.match(CypherParser.CREATE);
        this.state = 1607;
        this.match(CypherParser.SP);
        this.state = 1608;
        this.nodePropertyExistenceConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateRelationshipPropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createRelationshipPropertyExistenceConstraint;
    return this;
}

CreateRelationshipPropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateRelationshipPropertyExistenceConstraintContext.prototype.constructor = CreateRelationshipPropertyExistenceConstraintContext;

CreateRelationshipPropertyExistenceConstraintContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateRelationshipPropertyExistenceConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateRelationshipPropertyExistenceConstraintContext.prototype.relationshipPropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);
};

CreateRelationshipPropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateRelationshipPropertyExistenceConstraint(this);
	}
};

CreateRelationshipPropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateRelationshipPropertyExistenceConstraint(this);
	}
};




CypherParser.CreateRelationshipPropertyExistenceConstraintContext = CreateRelationshipPropertyExistenceConstraintContext;

CypherParser.prototype.createRelationshipPropertyExistenceConstraint = function() {

    var localctx = new CreateRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CypherParser.RULE_createRelationshipPropertyExistenceConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1610;
        this.match(CypherParser.CREATE);
        this.state = 1611;
        this.match(CypherParser.SP);
        this.state = 1612;
        this.relationshipPropertyExistenceConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createIndex;
    return this;
}

CreateIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexContext.prototype.constructor = CreateIndexContext;

CreateIndexContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateIndexContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateIndexContext.prototype.index = function() {
    return this.getTypedRuleContext(IndexContext,0);
};

CreateIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateIndex(this);
	}
};

CreateIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateIndex(this);
	}
};




CypherParser.CreateIndexContext = CreateIndexContext;

CypherParser.prototype.createIndex = function() {

    var localctx = new CreateIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CypherParser.RULE_createIndex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1614;
        this.match(CypherParser.CREATE);
        this.state = 1615;
        this.match(CypherParser.SP);
        this.state = 1616;
        this.index();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropUniqueConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropUniqueConstraint;
    return this;
}

DropUniqueConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropUniqueConstraintContext.prototype.constructor = DropUniqueConstraintContext;

DropUniqueConstraintContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropUniqueConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropUniqueConstraintContext.prototype.uniqueConstraint = function() {
    return this.getTypedRuleContext(UniqueConstraintContext,0);
};

DropUniqueConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropUniqueConstraint(this);
	}
};

DropUniqueConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropUniqueConstraint(this);
	}
};




CypherParser.DropUniqueConstraintContext = DropUniqueConstraintContext;

CypherParser.prototype.dropUniqueConstraint = function() {

    var localctx = new DropUniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CypherParser.RULE_dropUniqueConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1618;
        this.match(CypherParser.DROP);
        this.state = 1619;
        this.match(CypherParser.SP);
        this.state = 1620;
        this.uniqueConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropNodeKeyConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropNodeKeyConstraint;
    return this;
}

DropNodeKeyConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropNodeKeyConstraintContext.prototype.constructor = DropNodeKeyConstraintContext;

DropNodeKeyConstraintContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropNodeKeyConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropNodeKeyConstraintContext.prototype.nodeKeyConstraint = function() {
    return this.getTypedRuleContext(NodeKeyConstraintContext,0);
};

DropNodeKeyConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropNodeKeyConstraint(this);
	}
};

DropNodeKeyConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropNodeKeyConstraint(this);
	}
};




CypherParser.DropNodeKeyConstraintContext = DropNodeKeyConstraintContext;

CypherParser.prototype.dropNodeKeyConstraint = function() {

    var localctx = new DropNodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CypherParser.RULE_dropNodeKeyConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1622;
        this.match(CypherParser.DROP);
        this.state = 1623;
        this.match(CypherParser.SP);
        this.state = 1624;
        this.nodeKeyConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropNodePropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropNodePropertyExistenceConstraint;
    return this;
}

DropNodePropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropNodePropertyExistenceConstraintContext.prototype.constructor = DropNodePropertyExistenceConstraintContext;

DropNodePropertyExistenceConstraintContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropNodePropertyExistenceConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropNodePropertyExistenceConstraintContext.prototype.nodePropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);
};

DropNodePropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropNodePropertyExistenceConstraint(this);
	}
};

DropNodePropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropNodePropertyExistenceConstraint(this);
	}
};




CypherParser.DropNodePropertyExistenceConstraintContext = DropNodePropertyExistenceConstraintContext;

CypherParser.prototype.dropNodePropertyExistenceConstraint = function() {

    var localctx = new DropNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CypherParser.RULE_dropNodePropertyExistenceConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1626;
        this.match(CypherParser.DROP);
        this.state = 1627;
        this.match(CypherParser.SP);
        this.state = 1628;
        this.nodePropertyExistenceConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropRelationshipPropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropRelationshipPropertyExistenceConstraint;
    return this;
}

DropRelationshipPropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropRelationshipPropertyExistenceConstraintContext.prototype.constructor = DropRelationshipPropertyExistenceConstraintContext;

DropRelationshipPropertyExistenceConstraintContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropRelationshipPropertyExistenceConstraintContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropRelationshipPropertyExistenceConstraintContext.prototype.relationshipPropertyExistenceConstraint = function() {
    return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);
};

DropRelationshipPropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropRelationshipPropertyExistenceConstraint(this);
	}
};

DropRelationshipPropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropRelationshipPropertyExistenceConstraint(this);
	}
};




CypherParser.DropRelationshipPropertyExistenceConstraintContext = DropRelationshipPropertyExistenceConstraintContext;

CypherParser.prototype.dropRelationshipPropertyExistenceConstraint = function() {

    var localctx = new DropRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CypherParser.RULE_dropRelationshipPropertyExistenceConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1630;
        this.match(CypherParser.DROP);
        this.state = 1631;
        this.match(CypherParser.SP);
        this.state = 1632;
        this.relationshipPropertyExistenceConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dropIndex;
    return this;
}

DropIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropIndexContext.prototype.constructor = DropIndexContext;

DropIndexContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

DropIndexContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

DropIndexContext.prototype.index = function() {
    return this.getTypedRuleContext(IndexContext,0);
};

DropIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDropIndex(this);
	}
};

DropIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDropIndex(this);
	}
};




CypherParser.DropIndexContext = DropIndexContext;

CypherParser.prototype.dropIndex = function() {

    var localctx = new DropIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CypherParser.RULE_dropIndex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1634;
        this.match(CypherParser.DROP);
        this.state = 1635;
        this.match(CypherParser.SP);
        this.state = 1636;
        this.index();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_index;
    return this;
}

IndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexContext.prototype.constructor = IndexContext;

IndexContext.prototype.INDEX = function() {
    return this.getToken(CypherParser.INDEX, 0);
};

IndexContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


IndexContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

IndexContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

IndexContext.prototype.propertyKeys = function() {
    return this.getTypedRuleContext(PropertyKeysContext,0);
};

IndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIndex(this);
	}
};

IndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIndex(this);
	}
};




CypherParser.IndexContext = IndexContext;

CypherParser.prototype.index = function() {

    var localctx = new IndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CypherParser.RULE_index);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1638;
        this.match(CypherParser.INDEX);
        this.state = 1639;
        this.match(CypherParser.SP);
        this.state = 1640;
        this.match(CypherParser.ON);
        this.state = 1642;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1641;
            this.match(CypherParser.SP);
        }

        this.state = 1644;
        this.nodeLabel();
        this.state = 1646;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1645;
            this.match(CypherParser.SP);
        }

        this.state = 1648;
        this.match(CypherParser.T__19);
        this.state = 1650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1649;
            this.match(CypherParser.SP);
        }

        this.state = 1652;
        this.propertyKeys();
        this.state = 1654;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1653;
            this.match(CypherParser.SP);
        }

        this.state = 1656;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UniqueConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_uniqueConstraint;
    return this;
}

UniqueConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueConstraintContext.prototype.constructor = UniqueConstraintContext;

UniqueConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

UniqueConstraintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


UniqueConstraintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

UniqueConstraintContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

UniqueConstraintContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

UniqueConstraintContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

UniqueConstraintContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

UniqueConstraintContext.prototype.IS = function() {
    return this.getToken(CypherParser.IS, 0);
};

UniqueConstraintContext.prototype.UNIQUE = function() {
    return this.getToken(CypherParser.UNIQUE, 0);
};

UniqueConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUniqueConstraint(this);
	}
};

UniqueConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUniqueConstraint(this);
	}
};




CypherParser.UniqueConstraintContext = UniqueConstraintContext;

CypherParser.prototype.uniqueConstraint = function() {

    var localctx = new UniqueConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CypherParser.RULE_uniqueConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1658;
        this.match(CypherParser.CONSTRAINT);
        this.state = 1659;
        this.match(CypherParser.SP);
        this.state = 1660;
        this.match(CypherParser.ON);
        this.state = 1662;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1661;
            this.match(CypherParser.SP);
        }

        this.state = 1664;
        this.match(CypherParser.T__19);
        this.state = 1666;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1665;
            this.match(CypherParser.SP);
        }

        this.state = 1668;
        this.variable();
        this.state = 1669;
        this.nodeLabel();
        this.state = 1671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1670;
            this.match(CypherParser.SP);
        }

        this.state = 1673;
        this.match(CypherParser.T__20);
        this.state = 1675;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1674;
            this.match(CypherParser.SP);
        }

        this.state = 1677;
        this.match(CypherParser.ASSERT);
        this.state = 1678;
        this.match(CypherParser.SP);
        this.state = 1679;
        this.propertyExpression();
        this.state = 1680;
        this.match(CypherParser.SP);
        this.state = 1681;
        this.match(CypherParser.IS);
        this.state = 1682;
        this.match(CypherParser.SP);
        this.state = 1683;
        this.match(CypherParser.UNIQUE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeKeyConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeKeyConstraint;
    return this;
}

NodeKeyConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeKeyConstraintContext.prototype.constructor = NodeKeyConstraintContext;

NodeKeyConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

NodeKeyConstraintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NodeKeyConstraintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

NodeKeyConstraintContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

NodeKeyConstraintContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

NodeKeyConstraintContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

NodeKeyConstraintContext.prototype.propertyExpressions = function() {
    return this.getTypedRuleContext(PropertyExpressionsContext,0);
};

NodeKeyConstraintContext.prototype.IS = function() {
    return this.getToken(CypherParser.IS, 0);
};

NodeKeyConstraintContext.prototype.NODE = function() {
    return this.getToken(CypherParser.NODE, 0);
};

NodeKeyConstraintContext.prototype.KEY = function() {
    return this.getToken(CypherParser.KEY, 0);
};

NodeKeyConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodeKeyConstraint(this);
	}
};

NodeKeyConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodeKeyConstraint(this);
	}
};




CypherParser.NodeKeyConstraintContext = NodeKeyConstraintContext;

CypherParser.prototype.nodeKeyConstraint = function() {

    var localctx = new NodeKeyConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CypherParser.RULE_nodeKeyConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1685;
        this.match(CypherParser.CONSTRAINT);
        this.state = 1686;
        this.match(CypherParser.SP);
        this.state = 1687;
        this.match(CypherParser.ON);
        this.state = 1689;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1688;
            this.match(CypherParser.SP);
        }

        this.state = 1691;
        this.match(CypherParser.T__19);
        this.state = 1693;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1692;
            this.match(CypherParser.SP);
        }

        this.state = 1695;
        this.variable();
        this.state = 1696;
        this.nodeLabel();
        this.state = 1698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1697;
            this.match(CypherParser.SP);
        }

        this.state = 1700;
        this.match(CypherParser.T__20);
        this.state = 1702;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1701;
            this.match(CypherParser.SP);
        }

        this.state = 1704;
        this.match(CypherParser.ASSERT);
        this.state = 1705;
        this.match(CypherParser.SP);
        this.state = 1706;
        this.match(CypherParser.T__19);
        this.state = 1708;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1707;
            this.match(CypherParser.SP);
        }

        this.state = 1710;
        this.propertyExpressions();
        this.state = 1712;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1711;
            this.match(CypherParser.SP);
        }

        this.state = 1714;
        this.match(CypherParser.T__20);
        this.state = 1715;
        this.match(CypherParser.SP);
        this.state = 1716;
        this.match(CypherParser.IS);
        this.state = 1717;
        this.match(CypherParser.SP);
        this.state = 1718;
        this.match(CypherParser.NODE);
        this.state = 1719;
        this.match(CypherParser.SP);
        this.state = 1720;
        this.match(CypherParser.KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodePropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodePropertyExistenceConstraint;
    return this;
}

NodePropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodePropertyExistenceConstraintContext.prototype.constructor = NodePropertyExistenceConstraintContext;

NodePropertyExistenceConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

NodePropertyExistenceConstraintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NodePropertyExistenceConstraintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

NodePropertyExistenceConstraintContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

NodePropertyExistenceConstraintContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

NodePropertyExistenceConstraintContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

NodePropertyExistenceConstraintContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

NodePropertyExistenceConstraintContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

NodePropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodePropertyExistenceConstraint(this);
	}
};

NodePropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodePropertyExistenceConstraint(this);
	}
};




CypherParser.NodePropertyExistenceConstraintContext = NodePropertyExistenceConstraintContext;

CypherParser.prototype.nodePropertyExistenceConstraint = function() {

    var localctx = new NodePropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CypherParser.RULE_nodePropertyExistenceConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1722;
        this.match(CypherParser.CONSTRAINT);
        this.state = 1723;
        this.match(CypherParser.SP);
        this.state = 1724;
        this.match(CypherParser.ON);
        this.state = 1726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1725;
            this.match(CypherParser.SP);
        }

        this.state = 1728;
        this.match(CypherParser.T__19);
        this.state = 1729;
        this.variable();
        this.state = 1730;
        this.nodeLabel();
        this.state = 1731;
        this.match(CypherParser.T__20);
        this.state = 1733;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1732;
            this.match(CypherParser.SP);
        }

        this.state = 1735;
        this.match(CypherParser.ASSERT);
        this.state = 1736;
        this.match(CypherParser.SP);
        this.state = 1737;
        this.match(CypherParser.EXISTS);
        this.state = 1739;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1738;
            this.match(CypherParser.SP);
        }

        this.state = 1741;
        this.match(CypherParser.T__19);
        this.state = 1742;
        this.propertyExpression();
        this.state = 1743;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPropertyExistenceConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPropertyExistenceConstraint;
    return this;
}

RelationshipPropertyExistenceConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPropertyExistenceConstraintContext.prototype.constructor = RelationshipPropertyExistenceConstraintContext;

RelationshipPropertyExistenceConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

RelationshipPropertyExistenceConstraintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipPropertyExistenceConstraintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

RelationshipPropertyExistenceConstraintContext.prototype.relationshipPatternSyntax = function() {
    return this.getTypedRuleContext(RelationshipPatternSyntaxContext,0);
};

RelationshipPropertyExistenceConstraintContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

RelationshipPropertyExistenceConstraintContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

RelationshipPropertyExistenceConstraintContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

RelationshipPropertyExistenceConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPropertyExistenceConstraint(this);
	}
};

RelationshipPropertyExistenceConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPropertyExistenceConstraint(this);
	}
};




CypherParser.RelationshipPropertyExistenceConstraintContext = RelationshipPropertyExistenceConstraintContext;

CypherParser.prototype.relationshipPropertyExistenceConstraint = function() {

    var localctx = new RelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CypherParser.RULE_relationshipPropertyExistenceConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1745;
        this.match(CypherParser.CONSTRAINT);
        this.state = 1746;
        this.match(CypherParser.SP);
        this.state = 1747;
        this.match(CypherParser.ON);
        this.state = 1749;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1748;
            this.match(CypherParser.SP);
        }

        this.state = 1751;
        this.relationshipPatternSyntax();
        this.state = 1753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1752;
            this.match(CypherParser.SP);
        }

        this.state = 1755;
        this.match(CypherParser.ASSERT);
        this.state = 1756;
        this.match(CypherParser.SP);
        this.state = 1757;
        this.match(CypherParser.EXISTS);
        this.state = 1759;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1758;
            this.match(CypherParser.SP);
        }

        this.state = 1761;
        this.match(CypherParser.T__19);
        this.state = 1762;
        this.propertyExpression();
        this.state = 1763;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPatternSyntaxContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternSyntax;
    return this;
}

RelationshipPatternSyntaxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPatternSyntaxContext.prototype.constructor = RelationshipPatternSyntaxContext;

RelationshipPatternSyntaxContext.prototype.dash = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DashContext);
    } else {
        return this.getTypedRuleContext(DashContext,i);
    }
};

RelationshipPatternSyntaxContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

RelationshipPatternSyntaxContext.prototype.relType = function() {
    return this.getTypedRuleContext(RelTypeContext,0);
};

RelationshipPatternSyntaxContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipPatternSyntaxContext.prototype.rightArrowHead = function() {
    return this.getTypedRuleContext(RightArrowHeadContext,0);
};

RelationshipPatternSyntaxContext.prototype.leftArrowHead = function() {
    return this.getTypedRuleContext(LeftArrowHeadContext,0);
};

RelationshipPatternSyntaxContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPatternSyntax(this);
	}
};

RelationshipPatternSyntaxContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPatternSyntax(this);
	}
};




CypherParser.RelationshipPatternSyntaxContext = RelationshipPatternSyntaxContext;

CypherParser.prototype.relationshipPatternSyntax = function() {

    var localctx = new RelationshipPatternSyntaxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CypherParser.RULE_relationshipPatternSyntax);
    var _la = 0; // Token type
    try {
        this.state = 1818;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1765;
            this.match(CypherParser.T__19);
            this.state = 1767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1766;
                this.match(CypherParser.SP);
            }

            this.state = 1769;
            this.match(CypherParser.T__20);
            this.state = 1770;
            this.dash();
            this.state = 1771;
            this.match(CypherParser.T__16);
            this.state = 1772;
            this.variable();
            this.state = 1773;
            this.relType();
            this.state = 1774;
            this.match(CypherParser.T__17);
            this.state = 1775;
            this.dash();
            this.state = 1776;
            this.match(CypherParser.T__19);
            this.state = 1778;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1777;
                this.match(CypherParser.SP);
            }

            this.state = 1780;
            this.match(CypherParser.T__20);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1782;
            this.match(CypherParser.T__19);
            this.state = 1784;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1783;
                this.match(CypherParser.SP);
            }

            this.state = 1786;
            this.match(CypherParser.T__20);
            this.state = 1787;
            this.dash();
            this.state = 1788;
            this.match(CypherParser.T__16);
            this.state = 1789;
            this.variable();
            this.state = 1790;
            this.relType();
            this.state = 1791;
            this.match(CypherParser.T__17);
            this.state = 1792;
            this.dash();
            this.state = 1793;
            this.rightArrowHead();
            this.state = 1794;
            this.match(CypherParser.T__19);
            this.state = 1796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1795;
                this.match(CypherParser.SP);
            }

            this.state = 1798;
            this.match(CypherParser.T__20);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1800;
            this.match(CypherParser.T__19);
            this.state = 1802;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1801;
                this.match(CypherParser.SP);
            }

            this.state = 1804;
            this.match(CypherParser.T__20);
            this.state = 1805;
            this.leftArrowHead();
            this.state = 1806;
            this.dash();
            this.state = 1807;
            this.match(CypherParser.T__16);
            this.state = 1808;
            this.variable();
            this.state = 1809;
            this.relType();
            this.state = 1810;
            this.match(CypherParser.T__17);
            this.state = 1811;
            this.dash();
            this.state = 1812;
            this.match(CypherParser.T__19);
            this.state = 1814;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1813;
                this.match(CypherParser.SP);
            }

            this.state = 1816;
            this.match(CypherParser.T__20);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoadCSVClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_loadCSVClause;
    return this;
}

LoadCSVClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadCSVClauseContext.prototype.constructor = LoadCSVClauseContext;

LoadCSVClauseContext.prototype.LOAD = function() {
    return this.getToken(CypherParser.LOAD, 0);
};

LoadCSVClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LoadCSVClauseContext.prototype.CSV = function() {
    return this.getToken(CypherParser.CSV, 0);
};

LoadCSVClauseContext.prototype.FROM = function() {
    return this.getToken(CypherParser.FROM, 0);
};

LoadCSVClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LoadCSVClauseContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

LoadCSVClauseContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

LoadCSVClauseContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

LoadCSVClauseContext.prototype.HEADERS = function() {
    return this.getToken(CypherParser.HEADERS, 0);
};

LoadCSVClauseContext.prototype.FIELDTERMINATOR = function() {
    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
};

LoadCSVClauseContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

LoadCSVClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLoadCSVClause(this);
	}
};

LoadCSVClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLoadCSVClause(this);
	}
};




CypherParser.LoadCSVClauseContext = LoadCSVClauseContext;

CypherParser.prototype.loadCSVClause = function() {

    var localctx = new LoadCSVClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CypherParser.RULE_loadCSVClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1820;
        this.match(CypherParser.LOAD);
        this.state = 1821;
        this.match(CypherParser.SP);
        this.state = 1822;
        this.match(CypherParser.CSV);
        this.state = 1823;
        this.match(CypherParser.SP);
        this.state = 1828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.WITH) {
            this.state = 1824;
            this.match(CypherParser.WITH);
            this.state = 1825;
            this.match(CypherParser.SP);
            this.state = 1826;
            this.match(CypherParser.HEADERS);
            this.state = 1827;
            this.match(CypherParser.SP);
        }

        this.state = 1830;
        this.match(CypherParser.FROM);
        this.state = 1831;
        this.match(CypherParser.SP);
        this.state = 1832;
        this.expression();
        this.state = 1833;
        this.match(CypherParser.SP);
        this.state = 1834;
        this.match(CypherParser.AS);
        this.state = 1835;
        this.match(CypherParser.SP);
        this.state = 1836;
        this.variable();
        this.state = 1837;
        this.match(CypherParser.SP);
        this.state = 1841;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.FIELDTERMINATOR) {
            this.state = 1838;
            this.match(CypherParser.FIELDTERMINATOR);
            this.state = 1839;
            this.match(CypherParser.SP);
            this.state = 1840;
            this.match(CypherParser.StringLiteral);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_matchClause;
    return this;
}

MatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MatchClauseContext.prototype.constructor = MatchClauseContext;

MatchClauseContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

MatchClauseContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

MatchClauseContext.prototype.OPTIONAL = function() {
    return this.getToken(CypherParser.OPTIONAL, 0);
};

MatchClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MatchClauseContext.prototype.hint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HintContext);
    } else {
        return this.getTypedRuleContext(HintContext,i);
    }
};

MatchClauseContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

MatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMatchClause(this);
	}
};

MatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMatchClause(this);
	}
};




CypherParser.MatchClauseContext = MatchClauseContext;

CypherParser.prototype.matchClause = function() {

    var localctx = new MatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CypherParser.RULE_matchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1845;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.OPTIONAL) {
            this.state = 1843;
            this.match(CypherParser.OPTIONAL);
            this.state = 1844;
            this.match(CypherParser.SP);
        }

        this.state = 1847;
        this.match(CypherParser.MATCH);
        this.state = 1849;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1848;
            this.match(CypherParser.SP);
        }

        this.state = 1851;
        this.pattern();
        this.state = 1855;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,181,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1852;
                this.hint(); 
            }
            this.state = 1857;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,181,this._ctx);
        }

        this.state = 1862;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
        if(la_===1) {
            this.state = 1859;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1858;
                this.match(CypherParser.SP);
            }

            this.state = 1861;
            this.where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnwindClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unwindClause;
    return this;
}

UnwindClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnwindClauseContext.prototype.constructor = UnwindClauseContext;

UnwindClauseContext.prototype.UNWIND = function() {
    return this.getToken(CypherParser.UNWIND, 0);
};

UnwindClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UnwindClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


UnwindClauseContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

UnwindClauseContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

UnwindClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUnwindClause(this);
	}
};

UnwindClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUnwindClause(this);
	}
};




CypherParser.UnwindClauseContext = UnwindClauseContext;

CypherParser.prototype.unwindClause = function() {

    var localctx = new UnwindClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CypherParser.RULE_unwindClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1864;
        this.match(CypherParser.UNWIND);
        this.state = 1866;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1865;
            this.match(CypherParser.SP);
        }

        this.state = 1868;
        this.expression();
        this.state = 1869;
        this.match(CypherParser.SP);
        this.state = 1870;
        this.match(CypherParser.AS);
        this.state = 1871;
        this.match(CypherParser.SP);
        this.state = 1872;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MergeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mergeClause;
    return this;
}

MergeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MergeClauseContext.prototype.constructor = MergeClauseContext;

MergeClauseContext.prototype.MERGE = function() {
    return this.getToken(CypherParser.MERGE, 0);
};

MergeClauseContext.prototype.patternPart = function() {
    return this.getTypedRuleContext(PatternPartContext,0);
};

MergeClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MergeClauseContext.prototype.mergeAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeActionContext);
    } else {
        return this.getTypedRuleContext(MergeActionContext,i);
    }
};

MergeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMergeClause(this);
	}
};

MergeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMergeClause(this);
	}
};




CypherParser.MergeClauseContext = MergeClauseContext;

CypherParser.prototype.mergeClause = function() {

    var localctx = new MergeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CypherParser.RULE_mergeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1874;
        this.match(CypherParser.MERGE);
        this.state = 1876;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1875;
            this.match(CypherParser.SP);
        }

        this.state = 1878;
        this.patternPart();
        this.state = 1883;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,186,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1879;
                this.match(CypherParser.SP);
                this.state = 1880;
                this.mergeAction(); 
            }
            this.state = 1885;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,186,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MergeActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mergeAction;
    return this;
}

MergeActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MergeActionContext.prototype.constructor = MergeActionContext;

MergeActionContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

MergeActionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MergeActionContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

MergeActionContext.prototype.setClause = function() {
    return this.getTypedRuleContext(SetClauseContext,0);
};

MergeActionContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

MergeActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMergeAction(this);
	}
};

MergeActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMergeAction(this);
	}
};




CypherParser.MergeActionContext = MergeActionContext;

CypherParser.prototype.mergeAction = function() {

    var localctx = new MergeActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CypherParser.RULE_mergeAction);
    try {
        this.state = 1896;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1886;
            this.match(CypherParser.ON);
            this.state = 1887;
            this.match(CypherParser.SP);
            this.state = 1888;
            this.match(CypherParser.MATCH);
            this.state = 1889;
            this.match(CypherParser.SP);
            this.state = 1890;
            this.setClause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1891;
            this.match(CypherParser.ON);
            this.state = 1892;
            this.match(CypherParser.SP);
            this.state = 1893;
            this.match(CypherParser.CREATE);
            this.state = 1894;
            this.match(CypherParser.SP);
            this.state = 1895;
            this.setClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createClause;
    return this;
}

CreateClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateClauseContext.prototype.constructor = CreateClauseContext;

CreateClauseContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateClauseContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

CreateClauseContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

CreateClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateClause(this);
	}
};

CreateClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateClause(this);
	}
};




CypherParser.CreateClauseContext = CreateClauseContext;

CypherParser.prototype.createClause = function() {

    var localctx = new CreateClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CypherParser.RULE_createClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1898;
        this.match(CypherParser.CREATE);
        this.state = 1900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1899;
            this.match(CypherParser.SP);
        }

        this.state = 1902;
        this.pattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateUniqueClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_createUniqueClause;
    return this;
}

CreateUniqueClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUniqueClauseContext.prototype.constructor = CreateUniqueClauseContext;

CreateUniqueClauseContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

CreateUniqueClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CreateUniqueClauseContext.prototype.UNIQUE = function() {
    return this.getToken(CypherParser.UNIQUE, 0);
};

CreateUniqueClauseContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

CreateUniqueClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCreateUniqueClause(this);
	}
};

CreateUniqueClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCreateUniqueClause(this);
	}
};




CypherParser.CreateUniqueClauseContext = CreateUniqueClauseContext;

CypherParser.prototype.createUniqueClause = function() {

    var localctx = new CreateUniqueClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CypherParser.RULE_createUniqueClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1904;
        this.match(CypherParser.CREATE);
        this.state = 1905;
        this.match(CypherParser.SP);
        this.state = 1906;
        this.match(CypherParser.UNIQUE);
        this.state = 1908;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1907;
            this.match(CypherParser.SP);
        }

        this.state = 1910;
        this.pattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setClause;
    return this;
}

SetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetClauseContext.prototype.constructor = SetClauseContext;

SetClauseContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

SetClauseContext.prototype.setItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SetItemContext);
    } else {
        return this.getTypedRuleContext(SetItemContext,i);
    }
};

SetClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSetClause(this);
	}
};

SetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSetClause(this);
	}
};




CypherParser.SetClauseContext = SetClauseContext;

CypherParser.prototype.setClause = function() {

    var localctx = new SetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CypherParser.RULE_setClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1912;
        this.match(CypherParser.SET);
        this.state = 1914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1913;
            this.match(CypherParser.SP);
        }

        this.state = 1916;
        this.setItem();
        this.state = 1927;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1918;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1917;
                    this.match(CypherParser.SP);
                }

                this.state = 1920;
                this.match(CypherParser.T__14);
                this.state = 1922;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1921;
                    this.match(CypherParser.SP);
                }

                this.state = 1924;
                this.setItem(); 
            }
            this.state = 1929;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_setItem;
    return this;
}

SetItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetItemContext.prototype.constructor = SetItemContext;

SetItemContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

SetItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SetItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SetItemContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

SetItemContext.prototype.nodeLabels = function() {
    return this.getTypedRuleContext(NodeLabelsContext,0);
};

SetItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSetItem(this);
	}
};

SetItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSetItem(this);
	}
};




CypherParser.SetItemContext = SetItemContext;

CypherParser.prototype.setItem = function() {

    var localctx = new SetItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CypherParser.RULE_setItem);
    var _la = 0; // Token type
    try {
        this.state = 1966;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1930;
            this.propertyExpression();
            this.state = 1932;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1931;
                this.match(CypherParser.SP);
            }

            this.state = 1934;
            this.match(CypherParser.T__11);
            this.state = 1936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1935;
                this.match(CypherParser.SP);
            }

            this.state = 1938;
            this.expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1940;
            this.variable();
            this.state = 1942;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1941;
                this.match(CypherParser.SP);
            }

            this.state = 1944;
            this.match(CypherParser.T__11);
            this.state = 1946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1945;
                this.match(CypherParser.SP);
            }

            this.state = 1948;
            this.expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1950;
            this.variable();
            this.state = 1952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1951;
                this.match(CypherParser.SP);
            }

            this.state = 1954;
            this.match(CypherParser.T__21);
            this.state = 1956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1955;
                this.match(CypherParser.SP);
            }

            this.state = 1958;
            this.expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1960;
            this.variable();
            this.state = 1962;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1961;
                this.match(CypherParser.SP);
            }

            this.state = 1964;
            this.nodeLabels();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_deleteClause;
    return this;
}

DeleteClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteClauseContext.prototype.constructor = DeleteClauseContext;

DeleteClauseContext.prototype.DELETE = function() {
    return this.getToken(CypherParser.DELETE, 0);
};

DeleteClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

DeleteClauseContext.prototype.DETACH = function() {
    return this.getToken(CypherParser.DETACH, 0);
};

DeleteClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


DeleteClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDeleteClause(this);
	}
};

DeleteClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDeleteClause(this);
	}
};




CypherParser.DeleteClauseContext = DeleteClauseContext;

CypherParser.prototype.deleteClause = function() {

    var localctx = new DeleteClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CypherParser.RULE_deleteClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1970;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.DETACH) {
            this.state = 1968;
            this.match(CypherParser.DETACH);
            this.state = 1969;
            this.match(CypherParser.SP);
        }

        this.state = 1972;
        this.match(CypherParser.DELETE);
        this.state = 1974;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1973;
            this.match(CypherParser.SP);
        }

        this.state = 1976;
        this.expression();
        this.state = 1987;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,206,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1978;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1977;
                    this.match(CypherParser.SP);
                }

                this.state = 1980;
                this.match(CypherParser.T__14);
                this.state = 1982;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1981;
                    this.match(CypherParser.SP);
                }

                this.state = 1984;
                this.expression(); 
            }
            this.state = 1989;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,206,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RemoveClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_removeClause;
    return this;
}

RemoveClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RemoveClauseContext.prototype.constructor = RemoveClauseContext;

RemoveClauseContext.prototype.REMOVE = function() {
    return this.getToken(CypherParser.REMOVE, 0);
};

RemoveClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RemoveClauseContext.prototype.removeItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RemoveItemContext);
    } else {
        return this.getTypedRuleContext(RemoveItemContext,i);
    }
};

RemoveClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRemoveClause(this);
	}
};

RemoveClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRemoveClause(this);
	}
};




CypherParser.RemoveClauseContext = RemoveClauseContext;

CypherParser.prototype.removeClause = function() {

    var localctx = new RemoveClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CypherParser.RULE_removeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1990;
        this.match(CypherParser.REMOVE);
        this.state = 1991;
        this.match(CypherParser.SP);
        this.state = 1992;
        this.removeItem();
        this.state = 2003;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,209,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1994;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1993;
                    this.match(CypherParser.SP);
                }

                this.state = 1996;
                this.match(CypherParser.T__14);
                this.state = 1998;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1997;
                    this.match(CypherParser.SP);
                }

                this.state = 2000;
                this.removeItem(); 
            }
            this.state = 2005;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,209,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RemoveItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_removeItem;
    return this;
}

RemoveItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RemoveItemContext.prototype.constructor = RemoveItemContext;

RemoveItemContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

RemoveItemContext.prototype.nodeLabels = function() {
    return this.getTypedRuleContext(NodeLabelsContext,0);
};

RemoveItemContext.prototype.propertyExpression = function() {
    return this.getTypedRuleContext(PropertyExpressionContext,0);
};

RemoveItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRemoveItem(this);
	}
};

RemoveItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRemoveItem(this);
	}
};




CypherParser.RemoveItemContext = RemoveItemContext;

CypherParser.prototype.removeItem = function() {

    var localctx = new RemoveItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CypherParser.RULE_removeItem);
    try {
        this.state = 2010;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2006;
            this.variable();
            this.state = 2007;
            this.nodeLabels();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2009;
            this.propertyExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForeachClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_foreachClause;
    return this;
}

ForeachClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeachClauseContext.prototype.constructor = ForeachClauseContext;

ForeachClauseContext.prototype.FOREACH = function() {
    return this.getToken(CypherParser.FOREACH, 0);
};

ForeachClauseContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

ForeachClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ForeachClauseContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

ForeachClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForeachClauseContext.prototype.clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClauseContext);
    } else {
        return this.getTypedRuleContext(ClauseContext,i);
    }
};

ForeachClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterForeachClause(this);
	}
};

ForeachClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitForeachClause(this);
	}
};




CypherParser.ForeachClauseContext = ForeachClauseContext;

CypherParser.prototype.foreachClause = function() {

    var localctx = new ForeachClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CypherParser.RULE_foreachClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2012;
        this.match(CypherParser.FOREACH);
        this.state = 2014;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2013;
            this.match(CypherParser.SP);
        }

        this.state = 2016;
        this.match(CypherParser.T__19);
        this.state = 2018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2017;
            this.match(CypherParser.SP);
        }

        this.state = 2020;
        this.variable();
        this.state = 2021;
        this.match(CypherParser.SP);
        this.state = 2022;
        this.match(CypherParser.IN);
        this.state = 2023;
        this.match(CypherParser.SP);
        this.state = 2024;
        this.expression();
        this.state = 2026;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2025;
            this.match(CypherParser.SP);
        }

        this.state = 2028;
        this.match(CypherParser.T__22);
        this.state = 2031; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2029;
        		this.match(CypherParser.SP);
        		this.state = 2030;
        		this.clause();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2033; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,214, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 2036;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2035;
            this.match(CypherParser.SP);
        }

        this.state = 2038;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_withClause;
    return this;
}

WithClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithClauseContext.prototype.constructor = WithClauseContext;

WithClauseContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

WithClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


WithClauseContext.prototype.returnBody = function() {
    return this.getTypedRuleContext(ReturnBodyContext,0);
};

WithClauseContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

WithClauseContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

WithClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterWithClause(this);
	}
};

WithClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitWithClause(this);
	}
};




CypherParser.WithClauseContext = WithClauseContext;

CypherParser.prototype.withClause = function() {

    var localctx = new WithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CypherParser.RULE_withClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2040;
        this.match(CypherParser.WITH);
        this.state = 2045;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
        if(la_===1) {
            this.state = 2042;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2041;
                this.match(CypherParser.SP);
            }

            this.state = 2044;
            this.match(CypherParser.DISTINCT);

        }
        this.state = 2047;
        this.match(CypherParser.SP);
        this.state = 2048;
        this.returnBody();
        this.state = 2053;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        if(la_===1) {
            this.state = 2050;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2049;
                this.match(CypherParser.SP);
            }

            this.state = 2052;
            this.where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnClause;
    return this;
}

ReturnClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnClauseContext.prototype.constructor = ReturnClauseContext;

ReturnClauseContext.prototype.RETURN = function() {
    return this.getToken(CypherParser.RETURN, 0);
};

ReturnClauseContext.prototype.returnBody = function() {
    return this.getTypedRuleContext(ReturnBodyContext,0);
};

ReturnClauseContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

ReturnClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReturnClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReturnClause(this);
	}
};

ReturnClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReturnClause(this);
	}
};




CypherParser.ReturnClauseContext = ReturnClauseContext;

CypherParser.prototype.returnClause = function() {

    var localctx = new ReturnClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CypherParser.RULE_returnClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2055;
        this.match(CypherParser.RETURN);
        this.state = 2060;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
        if(la_===1) {
            this.state = 2057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2056;
                this.match(CypherParser.SP);
            }

            this.state = 2059;
            this.match(CypherParser.DISTINCT);

        }
        this.state = 2063;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2062;
            this.match(CypherParser.SP);
        }

        this.state = 2065;
        this.returnBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnBody;
    return this;
}

ReturnBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnBodyContext.prototype.constructor = ReturnBodyContext;

ReturnBodyContext.prototype.returnItems = function() {
    return this.getTypedRuleContext(ReturnItemsContext,0);
};

ReturnBodyContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReturnBodyContext.prototype.order = function() {
    return this.getTypedRuleContext(OrderContext,0);
};

ReturnBodyContext.prototype.skip = function() {
    return this.getTypedRuleContext(SkipContext,0);
};

ReturnBodyContext.prototype.limit = function() {
    return this.getTypedRuleContext(LimitContext,0);
};

ReturnBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReturnBody(this);
	}
};

ReturnBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReturnBody(this);
	}
};




CypherParser.ReturnBodyContext = ReturnBodyContext;

CypherParser.prototype.returnBody = function() {

    var localctx = new ReturnBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CypherParser.RULE_returnBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2067;
        this.returnItems();
        this.state = 2070;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
        if(la_===1) {
            this.state = 2068;
            this.match(CypherParser.SP);
            this.state = 2069;
            this.order();

        }
        this.state = 2074;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        if(la_===1) {
            this.state = 2072;
            this.match(CypherParser.SP);
            this.state = 2073;
            this.skip();

        }
        this.state = 2078;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
        if(la_===1) {
            this.state = 2076;
            this.match(CypherParser.SP);
            this.state = 2077;
            this.limit();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_func;
    return this;
}

FuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncContext.prototype.constructor = FuncContext;

FuncContext.prototype.procedureInvocation = function() {
    return this.getTypedRuleContext(ProcedureInvocationContext,0);
};

FuncContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

FuncContext.prototype.procedureResults = function() {
    return this.getTypedRuleContext(ProcedureResultsContext,0);
};

FuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFunc(this);
	}
};

FuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFunc(this);
	}
};




CypherParser.FuncContext = FuncContext;

CypherParser.prototype.func = function() {

    var localctx = new FuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CypherParser.RULE_func);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2080;
        this.procedureInvocation();
        this.state = 2082;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
        if(la_===1) {
            this.state = 2081;
            this.match(CypherParser.SP);

        }
        this.state = 2085;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.YIELD) {
            this.state = 2084;
            this.procedureResults();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnItems;
    return this;
}

ReturnItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnItemsContext.prototype.constructor = ReturnItemsContext;

ReturnItemsContext.prototype.returnItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReturnItemContext);
    } else {
        return this.getTypedRuleContext(ReturnItemContext,i);
    }
};

ReturnItemsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReturnItemsContext.prototype.func = function() {
    return this.getTypedRuleContext(FuncContext,0);
};

ReturnItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReturnItems(this);
	}
};

ReturnItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReturnItems(this);
	}
};




CypherParser.ReturnItemsContext = ReturnItemsContext;

CypherParser.prototype.returnItems = function() {

    var localctx = new ReturnItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CypherParser.RULE_returnItems);
    var _la = 0; // Token type
    try {
        this.state = 2116;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2087;
            this.match(CypherParser.T__18);
            this.state = 2098;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,230,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2089;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2088;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2091;
                    this.match(CypherParser.T__14);
                    this.state = 2093;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2092;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2095;
                    this.returnItem(); 
                }
                this.state = 2100;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,230,this._ctx);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2101;
            this.returnItem();
            this.state = 2112;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,233,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2103;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2102;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2105;
                    this.match(CypherParser.T__14);
                    this.state = 2107;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2106;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2109;
                    this.returnItem(); 
                }
                this.state = 2114;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,233,this._ctx);
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2115;
            this.func();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_returnItem;
    return this;
}

ReturnItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnItemContext.prototype.constructor = ReturnItemContext;

ReturnItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReturnItemContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

ReturnItemContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

ReturnItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReturnItem(this);
	}
};

ReturnItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReturnItem(this);
	}
};




CypherParser.ReturnItemContext = ReturnItemContext;

CypherParser.prototype.returnItem = function() {

    var localctx = new ReturnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CypherParser.RULE_returnItem);
    try {
        this.state = 2125;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2118;
            this.expression();
            this.state = 2119;
            this.match(CypherParser.SP);
            this.state = 2120;
            this.match(CypherParser.AS);
            this.state = 2121;
            this.match(CypherParser.SP);
            this.state = 2122;
            this.variable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2124;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_call;
    return this;
}

CallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallContext.prototype.constructor = CallContext;

CallContext.prototype.CALL = function() {
    return this.getToken(CypherParser.CALL, 0);
};

CallContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CallContext.prototype.procedureInvocation = function() {
    return this.getTypedRuleContext(ProcedureInvocationContext,0);
};

CallContext.prototype.procedureResults = function() {
    return this.getTypedRuleContext(ProcedureResultsContext,0);
};

CallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCall(this);
	}
};

CallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCall(this);
	}
};




CypherParser.CallContext = CallContext;

CypherParser.prototype.call = function() {

    var localctx = new CallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CypherParser.RULE_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2127;
        this.match(CypherParser.CALL);
        this.state = 2128;
        this.match(CypherParser.SP);
        this.state = 2129;
        this.procedureInvocation();
        this.state = 2131;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
        if(la_===1) {
            this.state = 2130;
            this.match(CypherParser.SP);

        }
        this.state = 2134;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.YIELD) {
            this.state = 2133;
            this.procedureResults();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureInvocation;
    return this;
}

ProcedureInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureInvocationContext.prototype.constructor = ProcedureInvocationContext;

ProcedureInvocationContext.prototype.procedureInvocationBody = function() {
    return this.getTypedRuleContext(ProcedureInvocationBodyContext,0);
};

ProcedureInvocationContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

ProcedureInvocationContext.prototype.procedureArguments = function() {
    return this.getTypedRuleContext(ProcedureArgumentsContext,0);
};

ProcedureInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureInvocation(this);
	}
};

ProcedureInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureInvocation(this);
	}
};




CypherParser.ProcedureInvocationContext = ProcedureInvocationContext;

CypherParser.prototype.procedureInvocation = function() {

    var localctx = new ProcedureInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CypherParser.RULE_procedureInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2136;
        this.procedureInvocationBody();
        this.state = 2138;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
        if(la_===1) {
            this.state = 2137;
            this.match(CypherParser.SP);

        }
        this.state = 2141;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__19) {
            this.state = 2140;
            this.procedureArguments();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureInvocationBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureInvocationBody;
    return this;
}

ProcedureInvocationBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureInvocationBodyContext.prototype.constructor = ProcedureInvocationBodyContext;

ProcedureInvocationBodyContext.prototype.namespace = function() {
    return this.getTypedRuleContext(NamespaceContext,0);
};

ProcedureInvocationBodyContext.prototype.procedureName = function() {
    return this.getTypedRuleContext(ProcedureNameContext,0);
};

ProcedureInvocationBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureInvocationBody(this);
	}
};

ProcedureInvocationBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureInvocationBody(this);
	}
};




CypherParser.ProcedureInvocationBodyContext = ProcedureInvocationBodyContext;

CypherParser.prototype.procedureInvocationBody = function() {

    var localctx = new ProcedureInvocationBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CypherParser.RULE_procedureInvocationBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2143;
        this.namespace();
        this.state = 2144;
        this.procedureName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureArguments;
    return this;
}

ProcedureArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureArgumentsContext.prototype.constructor = ProcedureArgumentsContext;

ProcedureArgumentsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ProcedureArgumentsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ProcedureArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureArguments(this);
	}
};

ProcedureArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureArguments(this);
	}
};




CypherParser.ProcedureArgumentsContext = ProcedureArgumentsContext;

CypherParser.prototype.procedureArguments = function() {

    var localctx = new ProcedureArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CypherParser.RULE_procedureArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2146;
        this.match(CypherParser.T__19);
        this.state = 2148;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
        if(la_===1) {
            this.state = 2147;
            this.match(CypherParser.SP);

        }
        this.state = 2151;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__19))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.CATALOG - 130)) | (1 << (CypherParser.SHOW - 130)) | (1 << (CypherParser.DEFAULT - 130)) | (1 << (CypherParser.DBMS - 130)) | (1 << (CypherParser.DATABASE - 130)) | (1 << (CypherParser.DATABASES - 130)) | (1 << (CypherParser.GRAPH - 130)) | (1 << (CypherParser.GRAPHS - 130)) | (1 << (CypherParser.REPLACE - 130)) | (1 << (CypherParser.IF - 130)) | (1 << (CypherParser.STOP - 130)) | (1 << (CypherParser.ROLE - 130)) | (1 << (CypherParser.ROLES - 130)) | (1 << (CypherParser.USER - 130)) | (1 << (CypherParser.USERS - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.CHANGE - 130)) | (1 << (CypherParser.REQUIRED - 130)) | (1 << (CypherParser.STATUS - 130)) | (1 << (CypherParser.ACTIVE - 130)) | (1 << (CypherParser.SUSPENDED - 130)) | (1 << (CypherParser.ALTER - 130)) | (1 << (CypherParser.CURRENT - 130)) | (1 << (CypherParser.TO - 130)) | (1 << (CypherParser.PRIVILEGES - 130)) | (1 << (CypherParser.GRANT - 130)) | (1 << (CypherParser.DENY - 130)) | (1 << (CypherParser.REVOKE - 130)) | (1 << (CypherParser.RELATIONSHIPS - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.NODES - 162)) | (1 << (CypherParser.ELEMENT - 162)) | (1 << (CypherParser.ELEMENTS - 162)) | (1 << (CypherParser.COPY - 162)) | (1 << (CypherParser.OF - 162)) | (1 << (CypherParser.TRAVERSE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.WRITE - 162)) | (1 << (CypherParser.ACCESS - 162)) | (1 << (CypherParser.INDEXES - 162)) | (1 << (CypherParser.MANAGEMENT - 162)) | (1 << (CypherParser.NEW - 162)) | (1 << (CypherParser.LABEL - 162)) | (1 << (CypherParser.LABELS - 162)) | (1 << (CypherParser.NAME - 162)) | (1 << (CypherParser.NAMES - 162)) | (1 << (CypherParser.TYPE - 162)) | (1 << (CypherParser.TYPES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.CONSTRAINTS - 162)) | (1 << (CypherParser.ASSIGN - 162)) | (1 << (CypherParser.BTREE - 162)) | (1 << (CypherParser.EXIST - 162)) | (1 << (CypherParser.FOR - 162)) | (1 << (CypherParser.OPTIONS - 162)) | (1 << (CypherParser.EXECUTE - 162)) | (1 << (CypherParser.DEFINED - 162)) | (1 << (CypherParser.FUNCTION - 162)) | (1 << (CypherParser.FUNCTIONS - 162)) | (1 << (CypherParser.BOOSTED - 162)) | (1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.ADMIN - 194)) | (1 << (CypherParser.ADMINISTRATOR - 194)) | (1 << (CypherParser.BRIEF - 194)) | (1 << (CypherParser.VERBOSE - 194)) | (1 << (CypherParser.OUTPUT - 194)) | (1 << (CypherParser.BUILT - 194)) | (1 << (CypherParser.EACH - 194)) | (1 << (CypherParser.EXECUTABLE - 194)) | (1 << (CypherParser.EXISTENCE - 194)) | (1 << (CypherParser.FULLTEXT - 194)) | (1 << (CypherParser.HOME - 194)) | (1 << (CypherParser.LOOKUP - 194)) | (1 << (CypherParser.RENAME - 194)) | (1 << (CypherParser.StringLiteral - 194)) | (1 << (CypherParser.HexInteger - 194)) | (1 << (CypherParser.DecimalInteger - 194)) | (1 << (CypherParser.OctalInteger - 194)) | (1 << (CypherParser.HexLetter - 194)) | (1 << (CypherParser.ExponentDecimalReal - 194)) | (1 << (CypherParser.RegularDecimalReal - 194)) | (1 << (CypherParser.UnescapedSymbolicName - 194)) | (1 << (CypherParser.EscapedSymbolicName - 194)))) !== 0)) {
            this.state = 2150;
            this.expression();
        }

        this.state = 2163;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,244,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2154;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2153;
                    this.match(CypherParser.SP);
                }

                this.state = 2156;
                this.match(CypherParser.T__14);
                this.state = 2158;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2157;
                    this.match(CypherParser.SP);
                }

                this.state = 2160;
                this.expression(); 
            }
            this.state = 2165;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,244,this._ctx);
        }

        this.state = 2167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2166;
            this.match(CypherParser.SP);
        }

        this.state = 2169;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureResultsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureResults;
    return this;
}

ProcedureResultsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureResultsContext.prototype.constructor = ProcedureResultsContext;

ProcedureResultsContext.prototype.YIELD = function() {
    return this.getToken(CypherParser.YIELD, 0);
};

ProcedureResultsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ProcedureResultsContext.prototype.procedureResult = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureResultContext);
    } else {
        return this.getTypedRuleContext(ProcedureResultContext,i);
    }
};

ProcedureResultsContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

ProcedureResultsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureResults(this);
	}
};

ProcedureResultsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureResults(this);
	}
};




CypherParser.ProcedureResultsContext = ProcedureResultsContext;

CypherParser.prototype.procedureResults = function() {

    var localctx = new ProcedureResultsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CypherParser.RULE_procedureResults);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2171;
        this.match(CypherParser.YIELD);
        this.state = 2172;
        this.match(CypherParser.SP);
        this.state = 2173;
        this.procedureResult();
        this.state = 2184;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2175;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2174;
                    this.match(CypherParser.SP);
                }

                this.state = 2177;
                this.match(CypherParser.T__14);
                this.state = 2179;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2178;
                    this.match(CypherParser.SP);
                }

                this.state = 2181;
                this.procedureResult(); 
            }
            this.state = 2186;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
        }

        this.state = 2189;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
        if(la_===1) {
            this.state = 2187;
            this.match(CypherParser.SP);
            this.state = 2188;
            this.where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureResult;
    return this;
}

ProcedureResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureResultContext.prototype.constructor = ProcedureResultContext;

ProcedureResultContext.prototype.aliasedProcedureResult = function() {
    return this.getTypedRuleContext(AliasedProcedureResultContext,0);
};

ProcedureResultContext.prototype.simpleProcedureResult = function() {
    return this.getTypedRuleContext(SimpleProcedureResultContext,0);
};

ProcedureResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureResult(this);
	}
};

ProcedureResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureResult(this);
	}
};




CypherParser.ProcedureResultContext = ProcedureResultContext;

CypherParser.prototype.procedureResult = function() {

    var localctx = new ProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CypherParser.RULE_procedureResult);
    try {
        this.state = 2193;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2191;
            this.aliasedProcedureResult();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2192;
            this.simpleProcedureResult();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasedProcedureResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_aliasedProcedureResult;
    return this;
}

AliasedProcedureResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasedProcedureResultContext.prototype.constructor = AliasedProcedureResultContext;

AliasedProcedureResultContext.prototype.procedureOutput = function() {
    return this.getTypedRuleContext(ProcedureOutputContext,0);
};

AliasedProcedureResultContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AliasedProcedureResultContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

AliasedProcedureResultContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

AliasedProcedureResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAliasedProcedureResult(this);
	}
};

AliasedProcedureResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAliasedProcedureResult(this);
	}
};




CypherParser.AliasedProcedureResultContext = AliasedProcedureResultContext;

CypherParser.prototype.aliasedProcedureResult = function() {

    var localctx = new AliasedProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CypherParser.RULE_aliasedProcedureResult);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2195;
        this.procedureOutput();
        this.state = 2196;
        this.match(CypherParser.SP);
        this.state = 2197;
        this.match(CypherParser.AS);
        this.state = 2198;
        this.match(CypherParser.SP);
        this.state = 2199;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleProcedureResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_simpleProcedureResult;
    return this;
}

SimpleProcedureResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleProcedureResultContext.prototype.constructor = SimpleProcedureResultContext;

SimpleProcedureResultContext.prototype.procedureOutput = function() {
    return this.getTypedRuleContext(ProcedureOutputContext,0);
};

SimpleProcedureResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSimpleProcedureResult(this);
	}
};

SimpleProcedureResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSimpleProcedureResult(this);
	}
};




CypherParser.SimpleProcedureResultContext = SimpleProcedureResultContext;

CypherParser.prototype.simpleProcedureResult = function() {

    var localctx = new SimpleProcedureResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CypherParser.RULE_simpleProcedureResult);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2201;
        this.procedureOutput();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureOutputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureOutput;
    return this;
}

ProcedureOutputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureOutputContext.prototype.constructor = ProcedureOutputContext;

ProcedureOutputContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ProcedureOutputContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureOutput(this);
	}
};

ProcedureOutputContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureOutput(this);
	}
};




CypherParser.ProcedureOutputContext = ProcedureOutputContext;

CypherParser.prototype.procedureOutput = function() {

    var localctx = new ProcedureOutputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CypherParser.RULE_procedureOutput);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2203;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_order;
    return this;
}

OrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderContext.prototype.constructor = OrderContext;

OrderContext.prototype.ORDER = function() {
    return this.getToken(CypherParser.ORDER, 0);
};

OrderContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OrderContext.prototype.BY = function() {
    return this.getToken(CypherParser.BY, 0);
};

OrderContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

OrderContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOrder(this);
	}
};

OrderContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOrder(this);
	}
};




CypherParser.OrderContext = OrderContext;

CypherParser.prototype.order = function() {

    var localctx = new OrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CypherParser.RULE_order);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2205;
        this.match(CypherParser.ORDER);
        this.state = 2206;
        this.match(CypherParser.SP);
        this.state = 2207;
        this.match(CypherParser.BY);
        this.state = 2208;
        this.match(CypherParser.SP);
        this.state = 2209;
        this.sortItem();
        this.state = 2220;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,253,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2211;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2210;
                    this.match(CypherParser.SP);
                }

                this.state = 2213;
                this.match(CypherParser.T__14);
                this.state = 2215;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2214;
                    this.match(CypherParser.SP);
                }

                this.state = 2217;
                this.sortItem(); 
            }
            this.state = 2222;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,253,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SkipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_skip;
    return this;
}

SkipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SkipContext.prototype.constructor = SkipContext;

SkipContext.prototype.L_SKIP = function() {
    return this.getToken(CypherParser.L_SKIP, 0);
};

SkipContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

SkipContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSkip(this);
	}
};

SkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSkip(this);
	}
};




CypherParser.SkipContext = SkipContext;

CypherParser.prototype.skip = function() {

    var localctx = new SkipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CypherParser.RULE_skip);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2223;
        this.match(CypherParser.L_SKIP);
        this.state = 2224;
        this.match(CypherParser.SP);
        this.state = 2225;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LimitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_limit;
    return this;
}

LimitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitContext.prototype.constructor = LimitContext;

LimitContext.prototype.LIMIT = function() {
    return this.getToken(CypherParser.LIMIT, 0);
};

LimitContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

LimitContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LimitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLimit(this);
	}
};

LimitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLimit(this);
	}
};




CypherParser.LimitContext = LimitContext;

CypherParser.prototype.limit = function() {

    var localctx = new LimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CypherParser.RULE_limit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2227;
        this.match(CypherParser.LIMIT);
        this.state = 2228;
        this.match(CypherParser.SP);
        this.state = 2229;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_sortItem;
    return this;
}

SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;

SortItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SortItemContext.prototype.ASCENDING = function() {
    return this.getToken(CypherParser.ASCENDING, 0);
};

SortItemContext.prototype.ASC = function() {
    return this.getToken(CypherParser.ASC, 0);
};

SortItemContext.prototype.DESCENDING = function() {
    return this.getToken(CypherParser.DESCENDING, 0);
};

SortItemContext.prototype.DESC = function() {
    return this.getToken(CypherParser.DESC, 0);
};

SortItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SortItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSortItem(this);
	}
};

SortItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSortItem(this);
	}
};




CypherParser.SortItemContext = SortItemContext;

CypherParser.prototype.sortItem = function() {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CypherParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2231;
        this.expression();
        this.state = 2239;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
        if(la_===1) {
            this.state = 2233;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2232;
                this.match(CypherParser.SP);
            }

            this.state = 2235;
            _la = this._input.LA(1);
            if(!(((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (CypherParser.ASCENDING - 94)) | (1 << (CypherParser.ASC - 94)) | (1 << (CypherParser.DESCENDING - 94)) | (1 << (CypherParser.DESC - 94)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2237;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
            if(la_===1) {
                this.state = 2236;
                this.match(CypherParser.SP);

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_hint;
    return this;
}

HintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HintContext.prototype.constructor = HintContext;

HintContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


HintContext.prototype.USING = function() {
    return this.getToken(CypherParser.USING, 0);
};

HintContext.prototype.INDEX = function() {
    return this.getToken(CypherParser.INDEX, 0);
};

HintContext.prototype.variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableContext);
    } else {
        return this.getTypedRuleContext(VariableContext,i);
    }
};

HintContext.prototype.nodeLabel = function() {
    return this.getTypedRuleContext(NodeLabelContext,0);
};

HintContext.prototype.propertyKeys = function() {
    return this.getTypedRuleContext(PropertyKeysContext,0);
};

HintContext.prototype.JOIN = function() {
    return this.getToken(CypherParser.JOIN, 0);
};

HintContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

HintContext.prototype.SCAN = function() {
    return this.getToken(CypherParser.SCAN, 0);
};

HintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterHint(this);
	}
};

HintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitHint(this);
	}
};




CypherParser.HintContext = HintContext;

CypherParser.prototype.hint = function() {

    var localctx = new HintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CypherParser.RULE_hint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2241;
            this.match(CypherParser.SP);
        }

        this.state = 2290;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2244;
            this.match(CypherParser.USING);
            this.state = 2245;
            this.match(CypherParser.SP);
            this.state = 2246;
            this.match(CypherParser.INDEX);
            this.state = 2247;
            this.match(CypherParser.SP);
            this.state = 2248;
            this.variable();
            this.state = 2249;
            this.nodeLabel();
            this.state = 2251;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2250;
                this.match(CypherParser.SP);
            }

            this.state = 2253;
            this.match(CypherParser.T__19);
            this.state = 2255;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2254;
                this.match(CypherParser.SP);
            }

            this.state = 2257;
            this.propertyKeys();
            this.state = 2259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2258;
                this.match(CypherParser.SP);
            }

            this.state = 2261;
            this.match(CypherParser.T__20);
            break;

        case 2:
            this.state = 2263;
            this.match(CypherParser.USING);
            this.state = 2264;
            this.match(CypherParser.SP);
            this.state = 2265;
            this.match(CypherParser.JOIN);
            this.state = 2266;
            this.match(CypherParser.SP);
            this.state = 2267;
            this.match(CypherParser.ON);
            this.state = 2268;
            this.match(CypherParser.SP);
            this.state = 2269;
            this.variable();
            this.state = 2280;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,263,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2271;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2270;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2273;
                    this.match(CypherParser.T__14);
                    this.state = 2275;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2274;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2277;
                    this.variable(); 
                }
                this.state = 2282;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,263,this._ctx);
            }

            break;

        case 3:
            this.state = 2283;
            this.match(CypherParser.USING);
            this.state = 2284;
            this.match(CypherParser.SP);
            this.state = 2285;
            this.match(CypherParser.SCAN);
            this.state = 2286;
            this.match(CypherParser.SP);
            this.state = 2287;
            this.variable();
            this.state = 2288;
            this.nodeLabel();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StartClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_startClause;
    return this;
}

StartClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartClauseContext.prototype.constructor = StartClauseContext;

StartClauseContext.prototype.START = function() {
    return this.getToken(CypherParser.START, 0);
};

StartClauseContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


StartClauseContext.prototype.startPoint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StartPointContext);
    } else {
        return this.getTypedRuleContext(StartPointContext,i);
    }
};

StartClauseContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

StartClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStartClause(this);
	}
};

StartClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStartClause(this);
	}
};




CypherParser.StartClauseContext = StartClauseContext;

CypherParser.prototype.startClause = function() {

    var localctx = new StartClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CypherParser.RULE_startClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2292;
        this.match(CypherParser.START);
        this.state = 2293;
        this.match(CypherParser.SP);
        this.state = 2294;
        this.startPoint();
        this.state = 2305;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,267,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2296;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2295;
                    this.match(CypherParser.SP);
                }

                this.state = 2298;
                this.match(CypherParser.T__14);
                this.state = 2300;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2299;
                    this.match(CypherParser.SP);
                }

                this.state = 2302;
                this.startPoint(); 
            }
            this.state = 2307;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,267,this._ctx);
        }

        this.state = 2309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.WHERE) {
            this.state = 2308;
            this.where();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StartPointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_startPoint;
    return this;
}

StartPointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartPointContext.prototype.constructor = StartPointContext;

StartPointContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

StartPointContext.prototype.lookup = function() {
    return this.getTypedRuleContext(LookupContext,0);
};

StartPointContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


StartPointContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStartPoint(this);
	}
};

StartPointContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStartPoint(this);
	}
};




CypherParser.StartPointContext = StartPointContext;

CypherParser.prototype.startPoint = function() {

    var localctx = new StartPointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CypherParser.RULE_startPoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2311;
        this.variable();
        this.state = 2313;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2312;
            this.match(CypherParser.SP);
        }

        this.state = 2315;
        this.match(CypherParser.T__11);
        this.state = 2317;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2316;
            this.match(CypherParser.SP);
        }

        this.state = 2319;
        this.lookup();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_lookup;
    return this;
}

LookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LookupContext.prototype.constructor = LookupContext;

LookupContext.prototype.nodeLookup = function() {
    return this.getTypedRuleContext(NodeLookupContext,0);
};

LookupContext.prototype.relationshipLookup = function() {
    return this.getTypedRuleContext(RelationshipLookupContext,0);
};

LookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLookup(this);
	}
};

LookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLookup(this);
	}
};




CypherParser.LookupContext = LookupContext;

CypherParser.prototype.lookup = function() {

    var localctx = new LookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CypherParser.RULE_lookup);
    try {
        this.state = 2323;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.NODE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2321;
            this.nodeLookup();
            break;
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2322;
            this.relationshipLookup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLookup;
    return this;
}

NodeLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeLookupContext.prototype.constructor = NodeLookupContext;

NodeLookupContext.prototype.NODE = function() {
    return this.getToken(CypherParser.NODE, 0);
};

NodeLookupContext.prototype.identifiedIndexLookup = function() {
    return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);
};

NodeLookupContext.prototype.indexQuery = function() {
    return this.getTypedRuleContext(IndexQueryContext,0);
};

NodeLookupContext.prototype.idLookup = function() {
    return this.getTypedRuleContext(IdLookupContext,0);
};

NodeLookupContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

NodeLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodeLookup(this);
	}
};

NodeLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodeLookup(this);
	}
};




CypherParser.NodeLookupContext = NodeLookupContext;

CypherParser.prototype.nodeLookup = function() {

    var localctx = new NodeLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CypherParser.RULE_nodeLookup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2325;
        this.match(CypherParser.NODE);
        this.state = 2327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2326;
            this.match(CypherParser.SP);
        }

        this.state = 2332;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2329;
            this.identifiedIndexLookup();
            break;

        case 2:
            this.state = 2330;
            this.indexQuery();
            break;

        case 3:
            this.state = 2331;
            this.idLookup();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipLookup;
    return this;
}

RelationshipLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipLookupContext.prototype.constructor = RelationshipLookupContext;

RelationshipLookupContext.prototype.RELATIONSHIP = function() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
};

RelationshipLookupContext.prototype.REL = function() {
    return this.getToken(CypherParser.REL, 0);
};

RelationshipLookupContext.prototype.identifiedIndexLookup = function() {
    return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);
};

RelationshipLookupContext.prototype.indexQuery = function() {
    return this.getTypedRuleContext(IndexQueryContext,0);
};

RelationshipLookupContext.prototype.idLookup = function() {
    return this.getTypedRuleContext(IdLookupContext,0);
};

RelationshipLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipLookup(this);
	}
};

RelationshipLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipLookup(this);
	}
};




CypherParser.RelationshipLookupContext = RelationshipLookupContext;

CypherParser.prototype.relationshipLookup = function() {

    var localctx = new RelationshipLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CypherParser.RULE_relationshipLookup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2334;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.RELATIONSHIP || _la===CypherParser.REL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2338;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2335;
            this.identifiedIndexLookup();
            break;

        case 2:
            this.state = 2336;
            this.indexQuery();
            break;

        case 3:
            this.state = 2337;
            this.idLookup();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifiedIndexLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_identifiedIndexLookup;
    return this;
}

IdentifiedIndexLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifiedIndexLookupContext.prototype.constructor = IdentifiedIndexLookupContext;

IdentifiedIndexLookupContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

IdentifiedIndexLookupContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

IdentifiedIndexLookupContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

IdentifiedIndexLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIdentifiedIndexLookup(this);
	}
};

IdentifiedIndexLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIdentifiedIndexLookup(this);
	}
};




CypherParser.IdentifiedIndexLookupContext = IdentifiedIndexLookupContext;

CypherParser.prototype.identifiedIndexLookup = function() {

    var localctx = new IdentifiedIndexLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CypherParser.RULE_identifiedIndexLookup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2340;
        this.match(CypherParser.T__1);
        this.state = 2341;
        this.symbolicName();
        this.state = 2342;
        this.match(CypherParser.T__19);
        this.state = 2343;
        this.symbolicName();
        this.state = 2344;
        this.match(CypherParser.T__11);
        this.state = 2347;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.StringLiteral:
            this.state = 2345;
            this.match(CypherParser.StringLiteral);
            break;
        case CypherParser.T__13:
        case CypherParser.T__33:
            this.state = 2346;
            this.parameter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2349;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_indexQuery;
    return this;
}

IndexQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexQueryContext.prototype.constructor = IndexQueryContext;

IndexQueryContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

IndexQueryContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

IndexQueryContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

IndexQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIndexQuery(this);
	}
};

IndexQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIndexQuery(this);
	}
};




CypherParser.IndexQueryContext = IndexQueryContext;

CypherParser.prototype.indexQuery = function() {

    var localctx = new IndexQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CypherParser.RULE_indexQuery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2351;
        this.match(CypherParser.T__1);
        this.state = 2352;
        this.symbolicName();
        this.state = 2353;
        this.match(CypherParser.T__19);
        this.state = 2356;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.StringLiteral:
            this.state = 2354;
            this.match(CypherParser.StringLiteral);
            break;
        case CypherParser.T__13:
        case CypherParser.T__33:
            this.state = 2355;
            this.parameter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2358;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_idLookup;
    return this;
}

IdLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdLookupContext.prototype.constructor = IdLookupContext;

IdLookupContext.prototype.literalIds = function() {
    return this.getTypedRuleContext(LiteralIdsContext,0);
};

IdLookupContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

IdLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIdLookup(this);
	}
};

IdLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIdLookup(this);
	}
};




CypherParser.IdLookupContext = IdLookupContext;

CypherParser.prototype.idLookup = function() {

    var localctx = new IdLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CypherParser.RULE_idLookup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2360;
        this.match(CypherParser.T__19);
        this.state = 2364;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
            this.state = 2361;
            this.literalIds();
            break;
        case CypherParser.T__13:
        case CypherParser.T__33:
            this.state = 2362;
            this.parameter();
            break;
        case CypherParser.T__18:
            this.state = 2363;
            this.match(CypherParser.T__18);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2366;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralIdsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literalIds;
    return this;
}

LiteralIdsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralIdsContext.prototype.constructor = LiteralIdsContext;

LiteralIdsContext.prototype.integerLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
    } else {
        return this.getTypedRuleContext(IntegerLiteralContext,i);
    }
};

LiteralIdsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LiteralIdsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLiteralIds(this);
	}
};

LiteralIdsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLiteralIds(this);
	}
};




CypherParser.LiteralIdsContext = LiteralIdsContext;

CypherParser.prototype.literalIds = function() {

    var localctx = new LiteralIdsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CypherParser.RULE_literalIds);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2368;
        this.integerLiteral();
        this.state = 2379;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__14 || _la===CypherParser.SP) {
            this.state = 2370;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2369;
                this.match(CypherParser.SP);
            }

            this.state = 2372;
            this.match(CypherParser.T__14);
            this.state = 2374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2373;
                this.match(CypherParser.SP);
            }

            this.state = 2376;
            this.integerLiteral();
            this.state = 2381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_where;
    return this;
}

WhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereContext.prototype.constructor = WhereContext;

WhereContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

WhereContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

WhereContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterWhere(this);
	}
};

WhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitWhere(this);
	}
};




CypherParser.WhereContext = WhereContext;

CypherParser.prototype.where = function() {

    var localctx = new WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CypherParser.RULE_where);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2382;
        this.match(CypherParser.WHERE);
        this.state = 2383;
        this.match(CypherParser.SP);
        this.state = 2384;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_pattern;
    return this;
}

PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternContext.prototype.constructor = PatternContext;

PatternContext.prototype.patternPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternPartContext);
    } else {
        return this.getTypedRuleContext(PatternPartContext,i);
    }
};

PatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPattern(this);
	}
};

PatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPattern(this);
	}
};




CypherParser.PatternContext = PatternContext;

CypherParser.prototype.pattern = function() {

    var localctx = new PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CypherParser.RULE_pattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2386;
        this.patternPart();
        this.state = 2397;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,283,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2387;
                    this.match(CypherParser.SP);
                }

                this.state = 2390;
                this.match(CypherParser.T__14);
                this.state = 2392;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2391;
                    this.match(CypherParser.SP);
                }

                this.state = 2394;
                this.patternPart(); 
            }
            this.state = 2399;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,283,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternPart;
    return this;
}

PatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternPartContext.prototype.constructor = PatternPartContext;

PatternPartContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

PatternPartContext.prototype.anonymousPatternPart = function() {
    return this.getTypedRuleContext(AnonymousPatternPartContext,0);
};

PatternPartContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PatternPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPatternPart(this);
	}
};

PatternPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPatternPart(this);
	}
};




CypherParser.PatternPartContext = PatternPartContext;

CypherParser.prototype.patternPart = function() {

    var localctx = new PatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CypherParser.RULE_patternPart);
    var _la = 0; // Token type
    try {
        this.state = 2411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2400;
            this.variable();
            this.state = 2402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2401;
                this.match(CypherParser.SP);
            }

            this.state = 2404;
            this.match(CypherParser.T__11);
            this.state = 2406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2405;
                this.match(CypherParser.SP);
            }

            this.state = 2408;
            this.anonymousPatternPart();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2410;
            this.anonymousPatternPart();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonymousPatternPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anonymousPatternPart;
    return this;
}

AnonymousPatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousPatternPartContext.prototype.constructor = AnonymousPatternPartContext;

AnonymousPatternPartContext.prototype.shortestPathPatternFunction = function() {
    return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);
};

AnonymousPatternPartContext.prototype.patternElement = function() {
    return this.getTypedRuleContext(PatternElementContext,0);
};

AnonymousPatternPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAnonymousPatternPart(this);
	}
};

AnonymousPatternPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAnonymousPatternPart(this);
	}
};




CypherParser.AnonymousPatternPartContext = AnonymousPatternPartContext;

CypherParser.prototype.anonymousPatternPart = function() {

    var localctx = new AnonymousPatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CypherParser.RULE_anonymousPatternPart);
    try {
        this.state = 2415;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
            this.enterOuterAlt(localctx, 1);
            this.state = 2413;
            this.shortestPathPatternFunction();
            break;
        case CypherParser.T__19:
            this.enterOuterAlt(localctx, 2);
            this.state = 2414;
            this.patternElement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElement;
    return this;
}

PatternElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternElementContext.prototype.constructor = PatternElementContext;

PatternElementContext.prototype.nodePattern = function() {
    return this.getTypedRuleContext(NodePatternContext,0);
};

PatternElementContext.prototype.patternElementChain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternElementChainContext);
    } else {
        return this.getTypedRuleContext(PatternElementChainContext,i);
    }
};

PatternElementContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PatternElementContext.prototype.patternElement = function() {
    return this.getTypedRuleContext(PatternElementContext,0);
};

PatternElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPatternElement(this);
	}
};

PatternElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPatternElement(this);
	}
};




CypherParser.PatternElementContext = PatternElementContext;

CypherParser.prototype.patternElement = function() {

    var localctx = new PatternElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CypherParser.RULE_patternElement);
    var _la = 0; // Token type
    try {
        this.state = 2431;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2417;
            this.nodePattern();
            this.state = 2424;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,289,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2419;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2418;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2421;
                    this.patternElementChain(); 
                }
                this.state = 2426;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,289,this._ctx);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2427;
            this.match(CypherParser.T__19);
            this.state = 2428;
            this.patternElement();
            this.state = 2429;
            this.match(CypherParser.T__20);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodePatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodePattern;
    return this;
}

NodePatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodePatternContext.prototype.constructor = NodePatternContext;

NodePatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NodePatternContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

NodePatternContext.prototype.nodeLabels = function() {
    return this.getTypedRuleContext(NodeLabelsContext,0);
};

NodePatternContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

NodePatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodePattern(this);
	}
};

NodePatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodePattern(this);
	}
};




CypherParser.NodePatternContext = NodePatternContext;

CypherParser.prototype.nodePattern = function() {

    var localctx = new NodePatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CypherParser.RULE_nodePattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2433;
        this.match(CypherParser.T__19);
        this.state = 2435;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2434;
            this.match(CypherParser.SP);
        }

        this.state = 2441;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.CATALOG - 118)) | (1 << (CypherParser.SHOW - 118)) | (1 << (CypherParser.DEFAULT - 118)) | (1 << (CypherParser.DBMS - 118)) | (1 << (CypherParser.DATABASE - 118)) | (1 << (CypherParser.DATABASES - 118)) | (1 << (CypherParser.GRAPH - 118)) | (1 << (CypherParser.GRAPHS - 118)) | (1 << (CypherParser.REPLACE - 118)) | (1 << (CypherParser.IF - 118)) | (1 << (CypherParser.STOP - 118)) | (1 << (CypherParser.ROLE - 118)) | (1 << (CypherParser.ROLES - 118)) | (1 << (CypherParser.USER - 118)) | (1 << (CypherParser.USERS - 118)) | (1 << (CypherParser.POPULATED - 118)) | (1 << (CypherParser.PASSWORD - 118)) | (1 << (CypherParser.CHANGE - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (CypherParser.REQUIRED - 150)) | (1 << (CypherParser.STATUS - 150)) | (1 << (CypherParser.ACTIVE - 150)) | (1 << (CypherParser.SUSPENDED - 150)) | (1 << (CypherParser.ALTER - 150)) | (1 << (CypherParser.CURRENT - 150)) | (1 << (CypherParser.TO - 150)) | (1 << (CypherParser.PRIVILEGES - 150)) | (1 << (CypherParser.GRANT - 150)) | (1 << (CypherParser.DENY - 150)) | (1 << (CypherParser.REVOKE - 150)) | (1 << (CypherParser.RELATIONSHIPS - 150)) | (1 << (CypherParser.NODES - 150)) | (1 << (CypherParser.ELEMENT - 150)) | (1 << (CypherParser.ELEMENTS - 150)) | (1 << (CypherParser.COPY - 150)) | (1 << (CypherParser.OF - 150)) | (1 << (CypherParser.TRAVERSE - 150)) | (1 << (CypherParser.READ - 150)) | (1 << (CypherParser.WRITE - 150)) | (1 << (CypherParser.ACCESS - 150)) | (1 << (CypherParser.INDEXES - 150)) | (1 << (CypherParser.MANAGEMENT - 150)) | (1 << (CypherParser.NEW - 150)) | (1 << (CypherParser.LABEL - 150)) | (1 << (CypherParser.LABELS - 150)) | (1 << (CypherParser.NAME - 150)) | (1 << (CypherParser.NAMES - 150)) | (1 << (CypherParser.TYPE - 150)) | (1 << (CypherParser.TYPES - 150)) | (1 << (CypherParser.PROPERTY - 150)) | (1 << (CypherParser.CONSTRAINTS - 150)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (CypherParser.ASSIGN - 182)) | (1 << (CypherParser.BTREE - 182)) | (1 << (CypherParser.EXIST - 182)) | (1 << (CypherParser.FOR - 182)) | (1 << (CypherParser.OPTIONS - 182)) | (1 << (CypherParser.EXECUTE - 182)) | (1 << (CypherParser.DEFINED - 182)) | (1 << (CypherParser.FUNCTION - 182)) | (1 << (CypherParser.FUNCTIONS - 182)) | (1 << (CypherParser.BOOSTED - 182)) | (1 << (CypherParser.PROCEDURE - 182)) | (1 << (CypherParser.PROCEDURES - 182)) | (1 << (CypherParser.ADMIN - 182)) | (1 << (CypherParser.ADMINISTRATOR - 182)) | (1 << (CypherParser.BRIEF - 182)) | (1 << (CypherParser.VERBOSE - 182)) | (1 << (CypherParser.OUTPUT - 182)) | (1 << (CypherParser.BUILT - 182)) | (1 << (CypherParser.EACH - 182)) | (1 << (CypherParser.EXECUTABLE - 182)) | (1 << (CypherParser.EXISTENCE - 182)) | (1 << (CypherParser.FULLTEXT - 182)) | (1 << (CypherParser.HOME - 182)) | (1 << (CypherParser.LOOKUP - 182)) | (1 << (CypherParser.RENAME - 182)) | (1 << (CypherParser.HexLetter - 182)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
            this.state = 2437;
            this.variable();
            this.state = 2439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2438;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__1) {
            this.state = 2443;
            this.nodeLabels();
            this.state = 2445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2444;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2453;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__13 || _la===CypherParser.T__33) {
            this.state = 2449;
            this.properties();
            this.state = 2451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2450;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2455;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternElementChainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternElementChain;
    return this;
}

PatternElementChainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternElementChainContext.prototype.constructor = PatternElementChainContext;

PatternElementChainContext.prototype.relationshipPattern = function() {
    return this.getTypedRuleContext(RelationshipPatternContext,0);
};

PatternElementChainContext.prototype.nodePattern = function() {
    return this.getTypedRuleContext(NodePatternContext,0);
};

PatternElementChainContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

PatternElementChainContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPatternElementChain(this);
	}
};

PatternElementChainContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPatternElementChain(this);
	}
};




CypherParser.PatternElementChainContext = PatternElementChainContext;

CypherParser.prototype.patternElementChain = function() {

    var localctx = new PatternElementChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CypherParser.RULE_patternElementChain);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2457;
        this.relationshipPattern();
        this.state = 2459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2458;
            this.match(CypherParser.SP);
        }

        this.state = 2461;
        this.nodePattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPattern;
    return this;
}

RelationshipPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPatternContext.prototype.constructor = RelationshipPatternContext;

RelationshipPatternContext.prototype.relationshipPatternStart = function() {
    return this.getTypedRuleContext(RelationshipPatternStartContext,0);
};

RelationshipPatternContext.prototype.relationshipPatternEnd = function() {
    return this.getTypedRuleContext(RelationshipPatternEndContext,0);
};

RelationshipPatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipPatternContext.prototype.relationshipDetail = function() {
    return this.getTypedRuleContext(RelationshipDetailContext,0);
};

RelationshipPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPattern(this);
	}
};

RelationshipPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPattern(this);
	}
};




CypherParser.RelationshipPatternContext = RelationshipPatternContext;

CypherParser.prototype.relationshipPattern = function() {

    var localctx = new RelationshipPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CypherParser.RULE_relationshipPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2463;
        this.relationshipPatternStart();
        this.state = 2465;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
        if(la_===1) {
            this.state = 2464;
            this.match(CypherParser.SP);

        }
        this.state = 2468;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__16) {
            this.state = 2467;
            this.relationshipDetail();
        }

        this.state = 2471;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2470;
            this.match(CypherParser.SP);
        }

        this.state = 2473;
        this.relationshipPatternEnd();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPatternStartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternStart;
    return this;
}

RelationshipPatternStartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPatternStartContext.prototype.constructor = RelationshipPatternStartContext;

RelationshipPatternStartContext.prototype.leftArrowHead = function() {
    return this.getTypedRuleContext(LeftArrowHeadContext,0);
};

RelationshipPatternStartContext.prototype.dash = function() {
    return this.getTypedRuleContext(DashContext,0);
};

RelationshipPatternStartContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

RelationshipPatternStartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPatternStart(this);
	}
};

RelationshipPatternStartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPatternStart(this);
	}
};




CypherParser.RelationshipPatternStartContext = RelationshipPatternStartContext;

CypherParser.prototype.relationshipPatternStart = function() {

    var localctx = new RelationshipPatternStartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CypherParser.RULE_relationshipPatternStart);
    var _la = 0; // Token type
    try {
        this.state = 2482;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__29:
        case CypherParser.T__34:
        case CypherParser.T__35:
        case CypherParser.T__36:
        case CypherParser.T__37:
            this.enterOuterAlt(localctx, 1);
            this.state = 2475;
            this.leftArrowHead();
            this.state = 2477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2476;
                this.match(CypherParser.SP);
            }

            this.state = 2479;
            this.dash();
            break;
        case CypherParser.T__2:
        case CypherParser.T__42:
        case CypherParser.T__43:
        case CypherParser.T__44:
        case CypherParser.T__45:
        case CypherParser.T__46:
        case CypherParser.T__47:
        case CypherParser.T__48:
        case CypherParser.T__49:
        case CypherParser.T__50:
        case CypherParser.T__51:
        case CypherParser.T__52:
            this.enterOuterAlt(localctx, 2);
            this.state = 2481;
            this.dash();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipPatternEndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipPatternEnd;
    return this;
}

RelationshipPatternEndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipPatternEndContext.prototype.constructor = RelationshipPatternEndContext;

RelationshipPatternEndContext.prototype.dash = function() {
    return this.getTypedRuleContext(DashContext,0);
};

RelationshipPatternEndContext.prototype.rightArrowHead = function() {
    return this.getTypedRuleContext(RightArrowHeadContext,0);
};

RelationshipPatternEndContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

RelationshipPatternEndContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipPatternEnd(this);
	}
};

RelationshipPatternEndContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipPatternEnd(this);
	}
};




CypherParser.RelationshipPatternEndContext = RelationshipPatternEndContext;

CypherParser.prototype.relationshipPatternEnd = function() {

    var localctx = new RelationshipPatternEndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CypherParser.RULE_relationshipPatternEnd);
    var _la = 0; // Token type
    try {
        this.state = 2491;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2484;
            this.dash();
            this.state = 2486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2485;
                this.match(CypherParser.SP);
            }

            this.state = 2488;
            this.rightArrowHead();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2490;
            this.dash();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipDetailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipDetail;
    return this;
}

RelationshipDetailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipDetailContext.prototype.constructor = RelationshipDetailContext;

RelationshipDetailContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipDetailContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

RelationshipDetailContext.prototype.relationshipTypes = function() {
    return this.getTypedRuleContext(RelationshipTypesContext,0);
};

RelationshipDetailContext.prototype.rangeLiteral = function() {
    return this.getTypedRuleContext(RangeLiteralContext,0);
};

RelationshipDetailContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

RelationshipDetailContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipDetail(this);
	}
};

RelationshipDetailContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipDetail(this);
	}
};




CypherParser.RelationshipDetailContext = RelationshipDetailContext;

CypherParser.prototype.relationshipDetail = function() {

    var localctx = new RelationshipDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CypherParser.RULE_relationshipDetail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2493;
        this.match(CypherParser.T__16);
        this.state = 2495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2494;
            this.match(CypherParser.SP);
        }

        this.state = 2501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.CATALOG - 118)) | (1 << (CypherParser.SHOW - 118)) | (1 << (CypherParser.DEFAULT - 118)) | (1 << (CypherParser.DBMS - 118)) | (1 << (CypherParser.DATABASE - 118)) | (1 << (CypherParser.DATABASES - 118)) | (1 << (CypherParser.GRAPH - 118)) | (1 << (CypherParser.GRAPHS - 118)) | (1 << (CypherParser.REPLACE - 118)) | (1 << (CypherParser.IF - 118)) | (1 << (CypherParser.STOP - 118)) | (1 << (CypherParser.ROLE - 118)) | (1 << (CypherParser.ROLES - 118)) | (1 << (CypherParser.USER - 118)) | (1 << (CypherParser.USERS - 118)) | (1 << (CypherParser.POPULATED - 118)) | (1 << (CypherParser.PASSWORD - 118)) | (1 << (CypherParser.CHANGE - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (CypherParser.REQUIRED - 150)) | (1 << (CypherParser.STATUS - 150)) | (1 << (CypherParser.ACTIVE - 150)) | (1 << (CypherParser.SUSPENDED - 150)) | (1 << (CypherParser.ALTER - 150)) | (1 << (CypherParser.CURRENT - 150)) | (1 << (CypherParser.TO - 150)) | (1 << (CypherParser.PRIVILEGES - 150)) | (1 << (CypherParser.GRANT - 150)) | (1 << (CypherParser.DENY - 150)) | (1 << (CypherParser.REVOKE - 150)) | (1 << (CypherParser.RELATIONSHIPS - 150)) | (1 << (CypherParser.NODES - 150)) | (1 << (CypherParser.ELEMENT - 150)) | (1 << (CypherParser.ELEMENTS - 150)) | (1 << (CypherParser.COPY - 150)) | (1 << (CypherParser.OF - 150)) | (1 << (CypherParser.TRAVERSE - 150)) | (1 << (CypherParser.READ - 150)) | (1 << (CypherParser.WRITE - 150)) | (1 << (CypherParser.ACCESS - 150)) | (1 << (CypherParser.INDEXES - 150)) | (1 << (CypherParser.MANAGEMENT - 150)) | (1 << (CypherParser.NEW - 150)) | (1 << (CypherParser.LABEL - 150)) | (1 << (CypherParser.LABELS - 150)) | (1 << (CypherParser.NAME - 150)) | (1 << (CypherParser.NAMES - 150)) | (1 << (CypherParser.TYPE - 150)) | (1 << (CypherParser.TYPES - 150)) | (1 << (CypherParser.PROPERTY - 150)) | (1 << (CypherParser.CONSTRAINTS - 150)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (CypherParser.ASSIGN - 182)) | (1 << (CypherParser.BTREE - 182)) | (1 << (CypherParser.EXIST - 182)) | (1 << (CypherParser.FOR - 182)) | (1 << (CypherParser.OPTIONS - 182)) | (1 << (CypherParser.EXECUTE - 182)) | (1 << (CypherParser.DEFINED - 182)) | (1 << (CypherParser.FUNCTION - 182)) | (1 << (CypherParser.FUNCTIONS - 182)) | (1 << (CypherParser.BOOSTED - 182)) | (1 << (CypherParser.PROCEDURE - 182)) | (1 << (CypherParser.PROCEDURES - 182)) | (1 << (CypherParser.ADMIN - 182)) | (1 << (CypherParser.ADMINISTRATOR - 182)) | (1 << (CypherParser.BRIEF - 182)) | (1 << (CypherParser.VERBOSE - 182)) | (1 << (CypherParser.OUTPUT - 182)) | (1 << (CypherParser.BUILT - 182)) | (1 << (CypherParser.EACH - 182)) | (1 << (CypherParser.EXECUTABLE - 182)) | (1 << (CypherParser.EXISTENCE - 182)) | (1 << (CypherParser.FULLTEXT - 182)) | (1 << (CypherParser.HOME - 182)) | (1 << (CypherParser.LOOKUP - 182)) | (1 << (CypherParser.RENAME - 182)) | (1 << (CypherParser.HexLetter - 182)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
            this.state = 2497;
            this.variable();
            this.state = 2499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2498;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__1) {
            this.state = 2503;
            this.relationshipTypes();
            this.state = 2505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2504;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__18) {
            this.state = 2509;
            this.rangeLiteral();
        }

        this.state = 2516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__13 || _la===CypherParser.T__33) {
            this.state = 2512;
            this.properties();
            this.state = 2514;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2513;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2518;
        this.match(CypherParser.T__17);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_properties;
    return this;
}

PropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertiesContext.prototype.constructor = PropertiesContext;

PropertiesContext.prototype.mapLiteral = function() {
    return this.getTypedRuleContext(MapLiteralContext,0);
};

PropertiesContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

PropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProperties(this);
	}
};

PropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProperties(this);
	}
};




CypherParser.PropertiesContext = PropertiesContext;

CypherParser.prototype.properties = function() {

    var localctx = new PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CypherParser.RULE_properties);
    try {
        this.state = 2522;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2520;
            this.mapLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2521;
            this.parameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relType;
    return this;
}

RelTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelTypeContext.prototype.constructor = RelTypeContext;

RelTypeContext.prototype.relTypeName = function() {
    return this.getTypedRuleContext(RelTypeNameContext,0);
};

RelTypeContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

RelTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelType(this);
	}
};

RelTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelType(this);
	}
};




CypherParser.RelTypeContext = RelTypeContext;

CypherParser.prototype.relType = function() {

    var localctx = new RelTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CypherParser.RULE_relType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2524;
        this.match(CypherParser.T__1);
        this.state = 2526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2525;
            this.match(CypherParser.SP);
        }

        this.state = 2528;
        this.relTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipTypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipTypes;
    return this;
}

RelationshipTypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipTypesContext.prototype.constructor = RelationshipTypesContext;

RelationshipTypesContext.prototype.relationshipType = function() {
    return this.getTypedRuleContext(RelationshipTypeContext,0);
};

RelationshipTypesContext.prototype.relationshipTypeOptionalColon = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationshipTypeOptionalColonContext);
    } else {
        return this.getTypedRuleContext(RelationshipTypeOptionalColonContext,i);
    }
};

RelationshipTypesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipTypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipTypes(this);
	}
};

RelationshipTypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipTypes(this);
	}
};




CypherParser.RelationshipTypesContext = RelationshipTypesContext;

CypherParser.prototype.relationshipTypes = function() {

    var localctx = new RelationshipTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CypherParser.RULE_relationshipTypes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2530;
        this.relationshipType();
        this.state = 2538;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,317,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2531;
                    this.match(CypherParser.SP);
                }

                this.state = 2534;
                this.match(CypherParser.T__22);
                this.state = 2535;
                this.relationshipTypeOptionalColon(); 
            }
            this.state = 2540;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,317,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipType;
    return this;
}

RelationshipTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipTypeContext.prototype.constructor = RelationshipTypeContext;

RelationshipTypeContext.prototype.relTypeName = function() {
    return this.getTypedRuleContext(RelTypeNameContext,0);
};

RelationshipTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipType(this);
	}
};

RelationshipTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipType(this);
	}
};




CypherParser.RelationshipTypeContext = RelationshipTypeContext;

CypherParser.prototype.relationshipType = function() {

    var localctx = new RelationshipTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CypherParser.RULE_relationshipType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2541;
        this.match(CypherParser.T__1);
        this.state = 2542;
        this.relTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipTypeOptionalColonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipTypeOptionalColon;
    return this;
}

RelationshipTypeOptionalColonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipTypeOptionalColonContext.prototype.constructor = RelationshipTypeOptionalColonContext;

RelationshipTypeOptionalColonContext.prototype.relTypeName = function() {
    return this.getTypedRuleContext(RelTypeNameContext,0);
};

RelationshipTypeOptionalColonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipTypeOptionalColon(this);
	}
};

RelationshipTypeOptionalColonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipTypeOptionalColon(this);
	}
};




CypherParser.RelationshipTypeOptionalColonContext = RelationshipTypeOptionalColonContext;

CypherParser.prototype.relationshipTypeOptionalColon = function() {

    var localctx = new RelationshipTypeOptionalColonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CypherParser.RULE_relationshipTypeOptionalColon);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__1) {
            this.state = 2544;
            this.match(CypherParser.T__1);
        }

        this.state = 2547;
        this.relTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeLabelsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabels;
    return this;
}

NodeLabelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeLabelsContext.prototype.constructor = NodeLabelsContext;

NodeLabelsContext.prototype.nodeLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NodeLabelContext);
    } else {
        return this.getTypedRuleContext(NodeLabelContext,i);
    }
};

NodeLabelsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NodeLabelsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodeLabels(this);
	}
};

NodeLabelsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodeLabels(this);
	}
};




CypherParser.NodeLabelsContext = NodeLabelsContext;

CypherParser.prototype.nodeLabels = function() {

    var localctx = new NodeLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CypherParser.RULE_nodeLabels);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2549;
        this.nodeLabel();
        this.state = 2556;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,320,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2551;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2550;
                    this.match(CypherParser.SP);
                }

                this.state = 2553;
                this.nodeLabel(); 
            }
            this.state = 2558;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,320,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NodeLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_nodeLabel;
    return this;
}

NodeLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NodeLabelContext.prototype.constructor = NodeLabelContext;

NodeLabelContext.prototype.labelName = function() {
    return this.getTypedRuleContext(LabelNameContext,0);
};

NodeLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNodeLabel(this);
	}
};

NodeLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNodeLabel(this);
	}
};




CypherParser.NodeLabelContext = NodeLabelContext;

CypherParser.prototype.nodeLabel = function() {

    var localctx = new NodeLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CypherParser.RULE_nodeLabel);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2559;
        this.match(CypherParser.T__1);
        this.state = 2560;
        this.labelName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangeLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rangeLiteral;
    return this;
}

RangeLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeLiteralContext.prototype.constructor = RangeLiteralContext;

RangeLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RangeLiteralContext.prototype.integerLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerLiteralContext);
    } else {
        return this.getTypedRuleContext(IntegerLiteralContext,i);
    }
};

RangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRangeLiteral(this);
	}
};

RangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRangeLiteral(this);
	}
};




CypherParser.RangeLiteralContext = RangeLiteralContext;

CypherParser.prototype.rangeLiteral = function() {

    var localctx = new RangeLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CypherParser.RULE_rangeLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2562;
        this.match(CypherParser.T__18);
        this.state = 2564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2563;
            this.match(CypherParser.SP);
        }

        this.state = 2570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 210)) & ~0x1f) == 0 && ((1 << (_la - 210)) & ((1 << (CypherParser.HexInteger - 210)) | (1 << (CypherParser.DecimalInteger - 210)) | (1 << (CypherParser.OctalInteger - 210)))) !== 0)) {
            this.state = 2566;
            this.integerLiteral();
            this.state = 2568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2567;
                this.match(CypherParser.SP);
            }

        }

        this.state = 2582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__23) {
            this.state = 2572;
            this.match(CypherParser.T__23);
            this.state = 2574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2573;
                this.match(CypherParser.SP);
            }

            this.state = 2580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 210)) & ~0x1f) == 0 && ((1 << (_la - 210)) & ((1 << (CypherParser.HexInteger - 210)) | (1 << (CypherParser.DecimalInteger - 210)) | (1 << (CypherParser.OctalInteger - 210)))) !== 0)) {
                this.state = 2576;
                this.integerLiteral();
                this.state = 2578;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2577;
                    this.match(CypherParser.SP);
                }

            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_labelName;
    return this;
}

LabelNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelNameContext.prototype.constructor = LabelNameContext;

LabelNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

LabelNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLabelName(this);
	}
};

LabelNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLabelName(this);
	}
};




CypherParser.LabelNameContext = LabelNameContext;

CypherParser.prototype.labelName = function() {

    var localctx = new LabelNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CypherParser.RULE_labelName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2584;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relTypeName;
    return this;
}

RelTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelTypeNameContext.prototype.constructor = RelTypeNameContext;

RelTypeNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

RelTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelTypeName(this);
	}
};

RelTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelTypeName(this);
	}
};




CypherParser.RelTypeNameContext = RelTypeNameContext;

CypherParser.prototype.relTypeName = function() {

    var localctx = new RelTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CypherParser.RULE_relTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2586;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.orExpression = function() {
    return this.getTypedRuleContext(OrExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExpression(this);
	}
};




CypherParser.ExpressionContext = ExpressionContext;

CypherParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CypherParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2588;
        this.orExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_orExpression;
    return this;
}

OrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrExpressionContext.prototype.constructor = OrExpressionContext;

OrExpressionContext.prototype.xorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(XorExpressionContext);
    } else {
        return this.getTypedRuleContext(XorExpressionContext,i);
    }
};

OrExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OrExpressionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.OR);
    } else {
        return this.getToken(CypherParser.OR, i);
    }
};


OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOrExpression(this);
	}
};

OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOrExpression(this);
	}
};




CypherParser.OrExpressionContext = OrExpressionContext;

CypherParser.prototype.orExpression = function() {

    var localctx = new OrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CypherParser.RULE_orExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2590;
        this.xorExpression();
        this.state = 2597;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,328,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2591;
                this.match(CypherParser.SP);
                this.state = 2592;
                this.match(CypherParser.OR);
                this.state = 2593;
                this.match(CypherParser.SP);
                this.state = 2594;
                this.xorExpression(); 
            }
            this.state = 2599;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,328,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function XorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_xorExpression;
    return this;
}

XorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XorExpressionContext.prototype.constructor = XorExpressionContext;

XorExpressionContext.prototype.andExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AndExpressionContext);
    } else {
        return this.getTypedRuleContext(AndExpressionContext,i);
    }
};

XorExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


XorExpressionContext.prototype.XOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.XOR);
    } else {
        return this.getToken(CypherParser.XOR, i);
    }
};


XorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterXorExpression(this);
	}
};

XorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitXorExpression(this);
	}
};




CypherParser.XorExpressionContext = XorExpressionContext;

CypherParser.prototype.xorExpression = function() {

    var localctx = new XorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CypherParser.RULE_xorExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2600;
        this.andExpression();
        this.state = 2607;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,329,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2601;
                this.match(CypherParser.SP);
                this.state = 2602;
                this.match(CypherParser.XOR);
                this.state = 2603;
                this.match(CypherParser.SP);
                this.state = 2604;
                this.andExpression(); 
            }
            this.state = 2609;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,329,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_andExpression;
    return this;
}

AndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

AndExpressionContext.prototype.notExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NotExpressionContext);
    } else {
        return this.getTypedRuleContext(NotExpressionContext,i);
    }
};

AndExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AndExpressionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.AND);
    } else {
        return this.getToken(CypherParser.AND, i);
    }
};


AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAndExpression(this);
	}
};




CypherParser.AndExpressionContext = AndExpressionContext;

CypherParser.prototype.andExpression = function() {

    var localctx = new AndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CypherParser.RULE_andExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2610;
        this.notExpression();
        this.state = 2617;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,330,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2611;
                this.match(CypherParser.SP);
                this.state = 2612;
                this.match(CypherParser.AND);
                this.state = 2613;
                this.match(CypherParser.SP);
                this.state = 2614;
                this.notExpression(); 
            }
            this.state = 2619;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,330,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_notExpression;
    return this;
}

NotExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

NotExpressionContext.prototype.comparisonExpression = function() {
    return this.getTypedRuleContext(ComparisonExpressionContext,0);
};

NotExpressionContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.NOT);
    } else {
        return this.getToken(CypherParser.NOT, i);
    }
};


NotExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNotExpression(this);
	}
};




CypherParser.NotExpressionContext = NotExpressionContext;

CypherParser.prototype.notExpression = function() {

    var localctx = new NotExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CypherParser.RULE_notExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2626;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,332,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2620;
                this.match(CypherParser.NOT);
                this.state = 2622;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2621;
                    this.match(CypherParser.SP);
                }
         
            }
            this.state = 2628;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,332,this._ctx);
        }

        this.state = 2629;
        this.comparisonExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_comparisonExpression;
    return this;
}

ComparisonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonExpressionContext.prototype.constructor = ComparisonExpressionContext;

ComparisonExpressionContext.prototype.addOrSubtractExpression = function() {
    return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);
};

ComparisonExpressionContext.prototype.partialComparisonExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartialComparisonExpressionContext);
    } else {
        return this.getTypedRuleContext(PartialComparisonExpressionContext,i);
    }
};

ComparisonExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ComparisonExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterComparisonExpression(this);
	}
};

ComparisonExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitComparisonExpression(this);
	}
};




CypherParser.ComparisonExpressionContext = ComparisonExpressionContext;

CypherParser.prototype.comparisonExpression = function() {

    var localctx = new ComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CypherParser.RULE_comparisonExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2631;
        this.addOrSubtractExpression();
        this.state = 2638;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,334,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2633;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2632;
                    this.match(CypherParser.SP);
                }

                this.state = 2635;
                this.partialComparisonExpression(); 
            }
            this.state = 2640;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,334,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AddOrSubtractExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_addOrSubtractExpression;
    return this;
}

AddOrSubtractExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AddOrSubtractExpressionContext.prototype.constructor = AddOrSubtractExpressionContext;

AddOrSubtractExpressionContext.prototype.multiplyDivideModuloExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiplyDivideModuloExpressionContext);
    } else {
        return this.getTypedRuleContext(MultiplyDivideModuloExpressionContext,i);
    }
};

AddOrSubtractExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AddOrSubtractExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAddOrSubtractExpression(this);
	}
};

AddOrSubtractExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAddOrSubtractExpression(this);
	}
};




CypherParser.AddOrSubtractExpressionContext = AddOrSubtractExpressionContext;

CypherParser.prototype.addOrSubtractExpression = function() {

    var localctx = new AddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CypherParser.RULE_addOrSubtractExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2641;
        this.multiplyDivideModuloExpression();
        this.state = 2660;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,340,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2658;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2643;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2642;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2645;
                    this.match(CypherParser.T__12);
                    this.state = 2647;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2646;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2649;
                    this.multiplyDivideModuloExpression();
                    break;

                case 2:
                    this.state = 2651;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2650;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2653;
                    this.match(CypherParser.T__2);
                    this.state = 2655;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2654;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2657;
                    this.multiplyDivideModuloExpression();
                    break;

                } 
            }
            this.state = 2662;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,340,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplyDivideModuloExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_multiplyDivideModuloExpression;
    return this;
}

MultiplyDivideModuloExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplyDivideModuloExpressionContext.prototype.constructor = MultiplyDivideModuloExpressionContext;

MultiplyDivideModuloExpressionContext.prototype.powerOfExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PowerOfExpressionContext);
    } else {
        return this.getTypedRuleContext(PowerOfExpressionContext,i);
    }
};

MultiplyDivideModuloExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MultiplyDivideModuloExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMultiplyDivideModuloExpression(this);
	}
};

MultiplyDivideModuloExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMultiplyDivideModuloExpression(this);
	}
};




CypherParser.MultiplyDivideModuloExpressionContext = MultiplyDivideModuloExpressionContext;

CypherParser.prototype.multiplyDivideModuloExpression = function() {

    var localctx = new MultiplyDivideModuloExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CypherParser.RULE_multiplyDivideModuloExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2663;
        this.powerOfExpression();
        this.state = 2690;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,348,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2688;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2665;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2664;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2667;
                    this.match(CypherParser.T__18);
                    this.state = 2669;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2668;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2671;
                    this.powerOfExpression();
                    break;

                case 2:
                    this.state = 2673;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2672;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2675;
                    this.match(CypherParser.T__5);
                    this.state = 2677;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2676;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2679;
                    this.powerOfExpression();
                    break;

                case 3:
                    this.state = 2681;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2680;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2683;
                    this.match(CypherParser.T__24);
                    this.state = 2685;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2684;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2687;
                    this.powerOfExpression();
                    break;

                } 
            }
            this.state = 2692;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,348,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PowerOfExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_powerOfExpression;
    return this;
}

PowerOfExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowerOfExpressionContext.prototype.constructor = PowerOfExpressionContext;

PowerOfExpressionContext.prototype.unaryAddOrSubtractExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnaryAddOrSubtractExpressionContext);
    } else {
        return this.getTypedRuleContext(UnaryAddOrSubtractExpressionContext,i);
    }
};

PowerOfExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PowerOfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPowerOfExpression(this);
	}
};

PowerOfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPowerOfExpression(this);
	}
};




CypherParser.PowerOfExpressionContext = PowerOfExpressionContext;

CypherParser.prototype.powerOfExpression = function() {

    var localctx = new PowerOfExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CypherParser.RULE_powerOfExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2693;
        this.unaryAddOrSubtractExpression();
        this.state = 2704;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,351,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2695;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2694;
                    this.match(CypherParser.SP);
                }

                this.state = 2697;
                this.match(CypherParser.T__25);
                this.state = 2699;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2698;
                    this.match(CypherParser.SP);
                }

                this.state = 2701;
                this.unaryAddOrSubtractExpression(); 
            }
            this.state = 2706;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,351,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryAddOrSubtractExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_unaryAddOrSubtractExpression;
    return this;
}

UnaryAddOrSubtractExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryAddOrSubtractExpressionContext.prototype.constructor = UnaryAddOrSubtractExpressionContext;

UnaryAddOrSubtractExpressionContext.prototype.stringListNullOperatorExpression = function() {
    return this.getTypedRuleContext(StringListNullOperatorExpressionContext,0);
};

UnaryAddOrSubtractExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


UnaryAddOrSubtractExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterUnaryAddOrSubtractExpression(this);
	}
};

UnaryAddOrSubtractExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitUnaryAddOrSubtractExpression(this);
	}
};




CypherParser.UnaryAddOrSubtractExpressionContext = UnaryAddOrSubtractExpressionContext;

CypherParser.prototype.unaryAddOrSubtractExpression = function() {

    var localctx = new UnaryAddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CypherParser.RULE_unaryAddOrSubtractExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2713;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__2 || _la===CypherParser.T__12) {
            this.state = 2707;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.T__2 || _la===CypherParser.T__12)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2709;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2708;
                this.match(CypherParser.SP);
            }

            this.state = 2715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2716;
        this.stringListNullOperatorExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringListNullOperatorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_stringListNullOperatorExpression;
    return this;
}

StringListNullOperatorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringListNullOperatorExpressionContext.prototype.constructor = StringListNullOperatorExpressionContext;

StringListNullOperatorExpressionContext.prototype.propertyOrLabelsExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyOrLabelsExpressionContext);
    } else {
        return this.getTypedRuleContext(PropertyOrLabelsExpressionContext,i);
    }
};

StringListNullOperatorExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

StringListNullOperatorExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


StringListNullOperatorExpressionContext.prototype.IS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.IS);
    } else {
        return this.getToken(CypherParser.IS, i);
    }
};


StringListNullOperatorExpressionContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.NULL);
    } else {
        return this.getToken(CypherParser.NULL, i);
    }
};


StringListNullOperatorExpressionContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.NOT);
    } else {
        return this.getToken(CypherParser.NOT, i);
    }
};


StringListNullOperatorExpressionContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.IN);
    } else {
        return this.getToken(CypherParser.IN, i);
    }
};


StringListNullOperatorExpressionContext.prototype.STARTS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.STARTS);
    } else {
        return this.getToken(CypherParser.STARTS, i);
    }
};


StringListNullOperatorExpressionContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.WITH);
    } else {
        return this.getToken(CypherParser.WITH, i);
    }
};


StringListNullOperatorExpressionContext.prototype.ENDS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.ENDS);
    } else {
        return this.getToken(CypherParser.ENDS, i);
    }
};


StringListNullOperatorExpressionContext.prototype.CONTAINS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.CONTAINS);
    } else {
        return this.getToken(CypherParser.CONTAINS, i);
    }
};


StringListNullOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStringListNullOperatorExpression(this);
	}
};

StringListNullOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStringListNullOperatorExpression(this);
	}
};




CypherParser.StringListNullOperatorExpressionContext = StringListNullOperatorExpressionContext;

CypherParser.prototype.stringListNullOperatorExpression = function() {

    var localctx = new StringListNullOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CypherParser.RULE_stringListNullOperatorExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2718;
        this.propertyOrLabelsExpression();
        this.state = 2772;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,362,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2770;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2720;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2719;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2722;
                    this.match(CypherParser.T__16);
                    this.state = 2723;
                    this.expression();
                    this.state = 2724;
                    this.match(CypherParser.T__17);
                    break;

                case 2:
                    this.state = 2727;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2726;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2729;
                    this.match(CypherParser.T__16);
                    this.state = 2731;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__19))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.CATALOG - 130)) | (1 << (CypherParser.SHOW - 130)) | (1 << (CypherParser.DEFAULT - 130)) | (1 << (CypherParser.DBMS - 130)) | (1 << (CypherParser.DATABASE - 130)) | (1 << (CypherParser.DATABASES - 130)) | (1 << (CypherParser.GRAPH - 130)) | (1 << (CypherParser.GRAPHS - 130)) | (1 << (CypherParser.REPLACE - 130)) | (1 << (CypherParser.IF - 130)) | (1 << (CypherParser.STOP - 130)) | (1 << (CypherParser.ROLE - 130)) | (1 << (CypherParser.ROLES - 130)) | (1 << (CypherParser.USER - 130)) | (1 << (CypherParser.USERS - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.CHANGE - 130)) | (1 << (CypherParser.REQUIRED - 130)) | (1 << (CypherParser.STATUS - 130)) | (1 << (CypherParser.ACTIVE - 130)) | (1 << (CypherParser.SUSPENDED - 130)) | (1 << (CypherParser.ALTER - 130)) | (1 << (CypherParser.CURRENT - 130)) | (1 << (CypherParser.TO - 130)) | (1 << (CypherParser.PRIVILEGES - 130)) | (1 << (CypherParser.GRANT - 130)) | (1 << (CypherParser.DENY - 130)) | (1 << (CypherParser.REVOKE - 130)) | (1 << (CypherParser.RELATIONSHIPS - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.NODES - 162)) | (1 << (CypherParser.ELEMENT - 162)) | (1 << (CypherParser.ELEMENTS - 162)) | (1 << (CypherParser.COPY - 162)) | (1 << (CypherParser.OF - 162)) | (1 << (CypherParser.TRAVERSE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.WRITE - 162)) | (1 << (CypherParser.ACCESS - 162)) | (1 << (CypherParser.INDEXES - 162)) | (1 << (CypherParser.MANAGEMENT - 162)) | (1 << (CypherParser.NEW - 162)) | (1 << (CypherParser.LABEL - 162)) | (1 << (CypherParser.LABELS - 162)) | (1 << (CypherParser.NAME - 162)) | (1 << (CypherParser.NAMES - 162)) | (1 << (CypherParser.TYPE - 162)) | (1 << (CypherParser.TYPES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.CONSTRAINTS - 162)) | (1 << (CypherParser.ASSIGN - 162)) | (1 << (CypherParser.BTREE - 162)) | (1 << (CypherParser.EXIST - 162)) | (1 << (CypherParser.FOR - 162)) | (1 << (CypherParser.OPTIONS - 162)) | (1 << (CypherParser.EXECUTE - 162)) | (1 << (CypherParser.DEFINED - 162)) | (1 << (CypherParser.FUNCTION - 162)) | (1 << (CypherParser.FUNCTIONS - 162)) | (1 << (CypherParser.BOOSTED - 162)) | (1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.ADMIN - 194)) | (1 << (CypherParser.ADMINISTRATOR - 194)) | (1 << (CypherParser.BRIEF - 194)) | (1 << (CypherParser.VERBOSE - 194)) | (1 << (CypherParser.OUTPUT - 194)) | (1 << (CypherParser.BUILT - 194)) | (1 << (CypherParser.EACH - 194)) | (1 << (CypherParser.EXECUTABLE - 194)) | (1 << (CypherParser.EXISTENCE - 194)) | (1 << (CypherParser.FULLTEXT - 194)) | (1 << (CypherParser.HOME - 194)) | (1 << (CypherParser.LOOKUP - 194)) | (1 << (CypherParser.RENAME - 194)) | (1 << (CypherParser.StringLiteral - 194)) | (1 << (CypherParser.HexInteger - 194)) | (1 << (CypherParser.DecimalInteger - 194)) | (1 << (CypherParser.OctalInteger - 194)) | (1 << (CypherParser.HexLetter - 194)) | (1 << (CypherParser.ExponentDecimalReal - 194)) | (1 << (CypherParser.RegularDecimalReal - 194)) | (1 << (CypherParser.UnescapedSymbolicName - 194)) | (1 << (CypherParser.EscapedSymbolicName - 194)))) !== 0)) {
                        this.state = 2730;
                        this.expression();
                    }

                    this.state = 2733;
                    this.match(CypherParser.T__23);
                    this.state = 2735;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__19))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.CATALOG - 130)) | (1 << (CypherParser.SHOW - 130)) | (1 << (CypherParser.DEFAULT - 130)) | (1 << (CypherParser.DBMS - 130)) | (1 << (CypherParser.DATABASE - 130)) | (1 << (CypherParser.DATABASES - 130)) | (1 << (CypherParser.GRAPH - 130)) | (1 << (CypherParser.GRAPHS - 130)) | (1 << (CypherParser.REPLACE - 130)) | (1 << (CypherParser.IF - 130)) | (1 << (CypherParser.STOP - 130)) | (1 << (CypherParser.ROLE - 130)) | (1 << (CypherParser.ROLES - 130)) | (1 << (CypherParser.USER - 130)) | (1 << (CypherParser.USERS - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.CHANGE - 130)) | (1 << (CypherParser.REQUIRED - 130)) | (1 << (CypherParser.STATUS - 130)) | (1 << (CypherParser.ACTIVE - 130)) | (1 << (CypherParser.SUSPENDED - 130)) | (1 << (CypherParser.ALTER - 130)) | (1 << (CypherParser.CURRENT - 130)) | (1 << (CypherParser.TO - 130)) | (1 << (CypherParser.PRIVILEGES - 130)) | (1 << (CypherParser.GRANT - 130)) | (1 << (CypherParser.DENY - 130)) | (1 << (CypherParser.REVOKE - 130)) | (1 << (CypherParser.RELATIONSHIPS - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.NODES - 162)) | (1 << (CypherParser.ELEMENT - 162)) | (1 << (CypherParser.ELEMENTS - 162)) | (1 << (CypherParser.COPY - 162)) | (1 << (CypherParser.OF - 162)) | (1 << (CypherParser.TRAVERSE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.WRITE - 162)) | (1 << (CypherParser.ACCESS - 162)) | (1 << (CypherParser.INDEXES - 162)) | (1 << (CypherParser.MANAGEMENT - 162)) | (1 << (CypherParser.NEW - 162)) | (1 << (CypherParser.LABEL - 162)) | (1 << (CypherParser.LABELS - 162)) | (1 << (CypherParser.NAME - 162)) | (1 << (CypherParser.NAMES - 162)) | (1 << (CypherParser.TYPE - 162)) | (1 << (CypherParser.TYPES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.CONSTRAINTS - 162)) | (1 << (CypherParser.ASSIGN - 162)) | (1 << (CypherParser.BTREE - 162)) | (1 << (CypherParser.EXIST - 162)) | (1 << (CypherParser.FOR - 162)) | (1 << (CypherParser.OPTIONS - 162)) | (1 << (CypherParser.EXECUTE - 162)) | (1 << (CypherParser.DEFINED - 162)) | (1 << (CypherParser.FUNCTION - 162)) | (1 << (CypherParser.FUNCTIONS - 162)) | (1 << (CypherParser.BOOSTED - 162)) | (1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.ADMIN - 194)) | (1 << (CypherParser.ADMINISTRATOR - 194)) | (1 << (CypherParser.BRIEF - 194)) | (1 << (CypherParser.VERBOSE - 194)) | (1 << (CypherParser.OUTPUT - 194)) | (1 << (CypherParser.BUILT - 194)) | (1 << (CypherParser.EACH - 194)) | (1 << (CypherParser.EXECUTABLE - 194)) | (1 << (CypherParser.EXISTENCE - 194)) | (1 << (CypherParser.FULLTEXT - 194)) | (1 << (CypherParser.HOME - 194)) | (1 << (CypherParser.LOOKUP - 194)) | (1 << (CypherParser.RENAME - 194)) | (1 << (CypherParser.StringLiteral - 194)) | (1 << (CypherParser.HexInteger - 194)) | (1 << (CypherParser.DecimalInteger - 194)) | (1 << (CypherParser.OctalInteger - 194)) | (1 << (CypherParser.HexLetter - 194)) | (1 << (CypherParser.ExponentDecimalReal - 194)) | (1 << (CypherParser.RegularDecimalReal - 194)) | (1 << (CypherParser.UnescapedSymbolicName - 194)) | (1 << (CypherParser.EscapedSymbolicName - 194)))) !== 0)) {
                        this.state = 2734;
                        this.expression();
                    }

                    this.state = 2737;
                    this.match(CypherParser.T__17);
                    break;

                case 3:
                    this.state = 2754;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 2739;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===CypherParser.SP) {
                            this.state = 2738;
                            this.match(CypherParser.SP);
                        }

                        this.state = 2741;
                        this.match(CypherParser.T__26);
                        break;

                    case 2:
                        this.state = 2742;
                        this.match(CypherParser.SP);
                        this.state = 2743;
                        this.match(CypherParser.IN);
                        break;

                    case 3:
                        this.state = 2744;
                        this.match(CypherParser.SP);
                        this.state = 2745;
                        this.match(CypherParser.STARTS);
                        this.state = 2746;
                        this.match(CypherParser.SP);
                        this.state = 2747;
                        this.match(CypherParser.WITH);
                        break;

                    case 4:
                        this.state = 2748;
                        this.match(CypherParser.SP);
                        this.state = 2749;
                        this.match(CypherParser.ENDS);
                        this.state = 2750;
                        this.match(CypherParser.SP);
                        this.state = 2751;
                        this.match(CypherParser.WITH);
                        break;

                    case 5:
                        this.state = 2752;
                        this.match(CypherParser.SP);
                        this.state = 2753;
                        this.match(CypherParser.CONTAINS);
                        break;

                    }
                    this.state = 2757;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 2756;
                        this.match(CypherParser.SP);
                    }

                    this.state = 2759;
                    this.propertyOrLabelsExpression();
                    break;

                case 4:
                    this.state = 2760;
                    this.match(CypherParser.SP);
                    this.state = 2761;
                    this.match(CypherParser.IS);
                    this.state = 2762;
                    this.match(CypherParser.SP);
                    this.state = 2763;
                    this.match(CypherParser.NULL);
                    break;

                case 5:
                    this.state = 2764;
                    this.match(CypherParser.SP);
                    this.state = 2765;
                    this.match(CypherParser.IS);
                    this.state = 2766;
                    this.match(CypherParser.SP);
                    this.state = 2767;
                    this.match(CypherParser.NOT);
                    this.state = 2768;
                    this.match(CypherParser.SP);
                    this.state = 2769;
                    this.match(CypherParser.NULL);
                    break;

                } 
            }
            this.state = 2774;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,362,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyOrLabelsExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyOrLabelsExpression;
    return this;
}

PropertyOrLabelsExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyOrLabelsExpressionContext.prototype.constructor = PropertyOrLabelsExpressionContext;

PropertyOrLabelsExpressionContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

PropertyOrLabelsExpressionContext.prototype.propertyLookup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyLookupContext);
    } else {
        return this.getTypedRuleContext(PropertyLookupContext,i);
    }
};

PropertyOrLabelsExpressionContext.prototype.nodeLabels = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NodeLabelsContext);
    } else {
        return this.getTypedRuleContext(NodeLabelsContext,i);
    }
};

PropertyOrLabelsExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyOrLabelsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyOrLabelsExpression(this);
	}
};

PropertyOrLabelsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyOrLabelsExpression(this);
	}
};




CypherParser.PropertyOrLabelsExpressionContext = PropertyOrLabelsExpressionContext;

CypherParser.prototype.propertyOrLabelsExpression = function() {

    var localctx = new PropertyOrLabelsExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CypherParser.RULE_propertyOrLabelsExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2775;
        this.atom();
        this.state = 2785;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,365,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2777;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 2776;
                    this.match(CypherParser.SP);
                }

                this.state = 2781;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CypherParser.T__6:
                    this.state = 2779;
                    this.propertyLookup();
                    break;
                case CypherParser.T__1:
                    this.state = 2780;
                    this.nodeLabels();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 2787;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,365,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterFunction;
    return this;
}

FilterFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterFunctionContext.prototype.constructor = FilterFunctionContext;

FilterFunctionContext.prototype.filterFunctionName = function() {
    return this.getTypedRuleContext(FilterFunctionNameContext,0);
};

FilterFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

FilterFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


FilterFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFilterFunction(this);
	}
};

FilterFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFilterFunction(this);
	}
};




CypherParser.FilterFunctionContext = FilterFunctionContext;

CypherParser.prototype.filterFunction = function() {

    var localctx = new FilterFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CypherParser.RULE_filterFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2788;
        this.filterFunctionName();
        this.state = 2790;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2789;
            this.match(CypherParser.SP);
        }

        this.state = 2792;
        this.match(CypherParser.T__19);
        this.state = 2794;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2793;
            this.match(CypherParser.SP);
        }

        this.state = 2796;
        this.filterExpression();
        this.state = 2798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2797;
            this.match(CypherParser.SP);
        }

        this.state = 2800;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterFunctionName;
    return this;
}

FilterFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterFunctionNameContext.prototype.constructor = FilterFunctionNameContext;

FilterFunctionNameContext.prototype.FILTER = function() {
    return this.getToken(CypherParser.FILTER, 0);
};

FilterFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFilterFunctionName(this);
	}
};

FilterFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFilterFunctionName(this);
	}
};




CypherParser.FilterFunctionNameContext = FilterFunctionNameContext;

CypherParser.prototype.filterFunctionName = function() {

    var localctx = new FilterFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CypherParser.RULE_filterFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2802;
        this.match(CypherParser.FILTER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExistsFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_existsFunction;
    return this;
}

ExistsFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExistsFunctionContext.prototype.constructor = ExistsFunctionContext;

ExistsFunctionContext.prototype.existsFunctionName = function() {
    return this.getTypedRuleContext(ExistsFunctionNameContext,0);
};

ExistsFunctionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExistsFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ExistsFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExistsFunction(this);
	}
};

ExistsFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExistsFunction(this);
	}
};




CypherParser.ExistsFunctionContext = ExistsFunctionContext;

CypherParser.prototype.existsFunction = function() {

    var localctx = new ExistsFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CypherParser.RULE_existsFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2804;
        this.existsFunctionName();
        this.state = 2806;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2805;
            this.match(CypherParser.SP);
        }

        this.state = 2808;
        this.match(CypherParser.T__19);
        this.state = 2810;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2809;
            this.match(CypherParser.SP);
        }

        this.state = 2812;
        this.expression();
        this.state = 2814;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2813;
            this.match(CypherParser.SP);
        }

        this.state = 2816;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExistsFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_existsFunctionName;
    return this;
}

ExistsFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExistsFunctionNameContext.prototype.constructor = ExistsFunctionNameContext;

ExistsFunctionNameContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

ExistsFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExistsFunctionName(this);
	}
};

ExistsFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExistsFunctionName(this);
	}
};




CypherParser.ExistsFunctionNameContext = ExistsFunctionNameContext;

CypherParser.prototype.existsFunctionName = function() {

    var localctx = new ExistsFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CypherParser.RULE_existsFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2818;
        this.match(CypherParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allFunction;
    return this;
}

AllFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllFunctionContext.prototype.constructor = AllFunctionContext;

AllFunctionContext.prototype.allFunctionName = function() {
    return this.getTypedRuleContext(AllFunctionNameContext,0);
};

AllFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

AllFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AllFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAllFunction(this);
	}
};

AllFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAllFunction(this);
	}
};




CypherParser.AllFunctionContext = AllFunctionContext;

CypherParser.prototype.allFunction = function() {

    var localctx = new AllFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CypherParser.RULE_allFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2820;
        this.allFunctionName();
        this.state = 2822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2821;
            this.match(CypherParser.SP);
        }

        this.state = 2824;
        this.match(CypherParser.T__19);
        this.state = 2826;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2825;
            this.match(CypherParser.SP);
        }

        this.state = 2828;
        this.filterExpression();
        this.state = 2830;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2829;
            this.match(CypherParser.SP);
        }

        this.state = 2832;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allFunctionName;
    return this;
}

AllFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllFunctionNameContext.prototype.constructor = AllFunctionNameContext;

AllFunctionNameContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

AllFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAllFunctionName(this);
	}
};

AllFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAllFunctionName(this);
	}
};




CypherParser.AllFunctionNameContext = AllFunctionNameContext;

CypherParser.prototype.allFunctionName = function() {

    var localctx = new AllFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CypherParser.RULE_allFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2834;
        this.match(CypherParser.ALL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnyFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyFunction;
    return this;
}

AnyFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnyFunctionContext.prototype.constructor = AnyFunctionContext;

AnyFunctionContext.prototype.anyFunctionName = function() {
    return this.getTypedRuleContext(AnyFunctionNameContext,0);
};

AnyFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

AnyFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AnyFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAnyFunction(this);
	}
};

AnyFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAnyFunction(this);
	}
};




CypherParser.AnyFunctionContext = AnyFunctionContext;

CypherParser.prototype.anyFunction = function() {

    var localctx = new AnyFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CypherParser.RULE_anyFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2836;
        this.anyFunctionName();
        this.state = 2838;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2837;
            this.match(CypherParser.SP);
        }

        this.state = 2840;
        this.match(CypherParser.T__19);
        this.state = 2842;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2841;
            this.match(CypherParser.SP);
        }

        this.state = 2844;
        this.filterExpression();
        this.state = 2846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2845;
            this.match(CypherParser.SP);
        }

        this.state = 2848;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnyFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_anyFunctionName;
    return this;
}

AnyFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnyFunctionNameContext.prototype.constructor = AnyFunctionNameContext;

AnyFunctionNameContext.prototype.ANY = function() {
    return this.getToken(CypherParser.ANY, 0);
};

AnyFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAnyFunctionName(this);
	}
};

AnyFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAnyFunctionName(this);
	}
};




CypherParser.AnyFunctionNameContext = AnyFunctionNameContext;

CypherParser.prototype.anyFunctionName = function() {

    var localctx = new AnyFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CypherParser.RULE_anyFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2850;
        this.match(CypherParser.ANY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoneFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_noneFunction;
    return this;
}

NoneFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoneFunctionContext.prototype.constructor = NoneFunctionContext;

NoneFunctionContext.prototype.noneFunctionName = function() {
    return this.getTypedRuleContext(NoneFunctionNameContext,0);
};

NoneFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

NoneFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


NoneFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNoneFunction(this);
	}
};

NoneFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNoneFunction(this);
	}
};




CypherParser.NoneFunctionContext = NoneFunctionContext;

CypherParser.prototype.noneFunction = function() {

    var localctx = new NoneFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CypherParser.RULE_noneFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2852;
        this.noneFunctionName();
        this.state = 2854;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2853;
            this.match(CypherParser.SP);
        }

        this.state = 2856;
        this.match(CypherParser.T__19);
        this.state = 2858;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2857;
            this.match(CypherParser.SP);
        }

        this.state = 2860;
        this.filterExpression();
        this.state = 2862;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2861;
            this.match(CypherParser.SP);
        }

        this.state = 2864;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoneFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_noneFunctionName;
    return this;
}

NoneFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoneFunctionNameContext.prototype.constructor = NoneFunctionNameContext;

NoneFunctionNameContext.prototype.NONE = function() {
    return this.getToken(CypherParser.NONE, 0);
};

NoneFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNoneFunctionName(this);
	}
};

NoneFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNoneFunctionName(this);
	}
};




CypherParser.NoneFunctionNameContext = NoneFunctionNameContext;

CypherParser.prototype.noneFunctionName = function() {

    var localctx = new NoneFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CypherParser.RULE_noneFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2866;
        this.match(CypherParser.NONE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleFunction;
    return this;
}

SingleFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleFunctionContext.prototype.constructor = SingleFunctionContext;

SingleFunctionContext.prototype.singleFunctionName = function() {
    return this.getTypedRuleContext(SingleFunctionNameContext,0);
};

SingleFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

SingleFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


SingleFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSingleFunction(this);
	}
};

SingleFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSingleFunction(this);
	}
};




CypherParser.SingleFunctionContext = SingleFunctionContext;

CypherParser.prototype.singleFunction = function() {

    var localctx = new SingleFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CypherParser.RULE_singleFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2868;
        this.singleFunctionName();
        this.state = 2870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2869;
            this.match(CypherParser.SP);
        }

        this.state = 2872;
        this.match(CypherParser.T__19);
        this.state = 2874;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2873;
            this.match(CypherParser.SP);
        }

        this.state = 2876;
        this.filterExpression();
        this.state = 2878;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2877;
            this.match(CypherParser.SP);
        }

        this.state = 2880;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_singleFunctionName;
    return this;
}

SingleFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleFunctionNameContext.prototype.constructor = SingleFunctionNameContext;

SingleFunctionNameContext.prototype.SINGLE = function() {
    return this.getToken(CypherParser.SINGLE, 0);
};

SingleFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSingleFunctionName(this);
	}
};

SingleFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSingleFunctionName(this);
	}
};




CypherParser.SingleFunctionNameContext = SingleFunctionNameContext;

CypherParser.prototype.singleFunctionName = function() {

    var localctx = new SingleFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CypherParser.RULE_singleFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2882;
        this.match(CypherParser.SINGLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtractFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_extractFunction;
    return this;
}

ExtractFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtractFunctionContext.prototype.constructor = ExtractFunctionContext;

ExtractFunctionContext.prototype.extractFunctionName = function() {
    return this.getTypedRuleContext(ExtractFunctionNameContext,0);
};

ExtractFunctionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

ExtractFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ExtractFunctionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExtractFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExtractFunction(this);
	}
};

ExtractFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExtractFunction(this);
	}
};




CypherParser.ExtractFunctionContext = ExtractFunctionContext;

CypherParser.prototype.extractFunction = function() {

    var localctx = new ExtractFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CypherParser.RULE_extractFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2884;
        this.extractFunctionName();
        this.state = 2886;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2885;
            this.match(CypherParser.SP);
        }

        this.state = 2888;
        this.match(CypherParser.T__19);
        this.state = 2890;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2889;
            this.match(CypherParser.SP);
        }

        this.state = 2892;
        this.filterExpression();
        this.state = 2901;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,388,this._ctx);
        if(la_===1) {
            this.state = 2894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2893;
                this.match(CypherParser.SP);
            }

            this.state = 2896;
            this.match(CypherParser.T__22);
            this.state = 2898;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2897;
                this.match(CypherParser.SP);
            }

            this.state = 2900;
            this.expression();

        }
        this.state = 2904;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2903;
            this.match(CypherParser.SP);
        }

        this.state = 2906;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtractFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_extractFunctionName;
    return this;
}

ExtractFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtractFunctionNameContext.prototype.constructor = ExtractFunctionNameContext;

ExtractFunctionNameContext.prototype.EXTRACT = function() {
    return this.getToken(CypherParser.EXTRACT, 0);
};

ExtractFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterExtractFunctionName(this);
	}
};

ExtractFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitExtractFunctionName(this);
	}
};




CypherParser.ExtractFunctionNameContext = ExtractFunctionNameContext;

CypherParser.prototype.extractFunctionName = function() {

    var localctx = new ExtractFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CypherParser.RULE_extractFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2908;
        this.match(CypherParser.EXTRACT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_reduceFunction;
    return this;
}

ReduceFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceFunctionContext.prototype.constructor = ReduceFunctionContext;

ReduceFunctionContext.prototype.reduceFunctionName = function() {
    return this.getTypedRuleContext(ReduceFunctionNameContext,0);
};

ReduceFunctionContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

ReduceFunctionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ReduceFunctionContext.prototype.idInColl = function() {
    return this.getTypedRuleContext(IdInCollContext,0);
};

ReduceFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ReduceFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReduceFunction(this);
	}
};

ReduceFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReduceFunction(this);
	}
};




CypherParser.ReduceFunctionContext = ReduceFunctionContext;

CypherParser.prototype.reduceFunction = function() {

    var localctx = new ReduceFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CypherParser.RULE_reduceFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2910;
        this.reduceFunctionName();
        this.state = 2912;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2911;
            this.match(CypherParser.SP);
        }

        this.state = 2914;
        this.match(CypherParser.T__19);
        this.state = 2916;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2915;
            this.match(CypherParser.SP);
        }

        this.state = 2918;
        this.variable();
        this.state = 2920;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2919;
            this.match(CypherParser.SP);
        }

        this.state = 2922;
        this.match(CypherParser.T__11);
        this.state = 2924;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2923;
            this.match(CypherParser.SP);
        }

        this.state = 2926;
        this.expression();
        this.state = 2928;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2927;
            this.match(CypherParser.SP);
        }

        this.state = 2930;
        this.match(CypherParser.T__14);
        this.state = 2932;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2931;
            this.match(CypherParser.SP);
        }

        this.state = 2934;
        this.idInColl();
        this.state = 2936;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2935;
            this.match(CypherParser.SP);
        }

        this.state = 2938;
        this.match(CypherParser.T__22);
        this.state = 2940;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2939;
            this.match(CypherParser.SP);
        }

        this.state = 2942;
        this.expression();
        this.state = 2944;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 2943;
            this.match(CypherParser.SP);
        }

        this.state = 2946;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_reduceFunctionName;
    return this;
}

ReduceFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceFunctionNameContext.prototype.constructor = ReduceFunctionNameContext;

ReduceFunctionNameContext.prototype.REDUCE = function() {
    return this.getToken(CypherParser.REDUCE, 0);
};

ReduceFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterReduceFunctionName(this);
	}
};

ReduceFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitReduceFunctionName(this);
	}
};




CypherParser.ReduceFunctionNameContext = ReduceFunctionNameContext;

CypherParser.prototype.reduceFunctionName = function() {

    var localctx = new ReduceFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CypherParser.RULE_reduceFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2948;
        this.match(CypherParser.REDUCE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortestPathPatternFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_shortestPathPatternFunction;
    return this;
}

ShortestPathPatternFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortestPathPatternFunctionContext.prototype.constructor = ShortestPathPatternFunctionContext;

ShortestPathPatternFunctionContext.prototype.shortestPathFunctionName = function() {
    return this.getTypedRuleContext(ShortestPathFunctionNameContext,0);
};

ShortestPathPatternFunctionContext.prototype.patternElement = function() {
    return this.getTypedRuleContext(PatternElementContext,0);
};

ShortestPathPatternFunctionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ShortestPathPatternFunctionContext.prototype.allShortestPathFunctionName = function() {
    return this.getTypedRuleContext(AllShortestPathFunctionNameContext,0);
};

ShortestPathPatternFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterShortestPathPatternFunction(this);
	}
};

ShortestPathPatternFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitShortestPathPatternFunction(this);
	}
};




CypherParser.ShortestPathPatternFunctionContext = ShortestPathPatternFunctionContext;

CypherParser.prototype.shortestPathPatternFunction = function() {

    var localctx = new ShortestPathPatternFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CypherParser.RULE_shortestPathPatternFunction);
    var _la = 0; // Token type
    try {
        this.state = 2978;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.SHORTESTPATH:
            this.enterOuterAlt(localctx, 1);
            this.state = 2950;
            this.shortestPathFunctionName();
            this.state = 2952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2951;
                this.match(CypherParser.SP);
            }

            this.state = 2954;
            this.match(CypherParser.T__19);
            this.state = 2956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2955;
                this.match(CypherParser.SP);
            }

            this.state = 2958;
            this.patternElement();
            this.state = 2960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2959;
                this.match(CypherParser.SP);
            }

            this.state = 2962;
            this.match(CypherParser.T__20);
            break;
        case CypherParser.ALLSHORTESTPATHS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2964;
            this.allShortestPathFunctionName();
            this.state = 2966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2965;
                this.match(CypherParser.SP);
            }

            this.state = 2968;
            this.match(CypherParser.T__19);
            this.state = 2970;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2969;
                this.match(CypherParser.SP);
            }

            this.state = 2972;
            this.patternElement();
            this.state = 2974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2973;
                this.match(CypherParser.SP);
            }

            this.state = 2976;
            this.match(CypherParser.T__20);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortestPathFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_shortestPathFunctionName;
    return this;
}

ShortestPathFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortestPathFunctionNameContext.prototype.constructor = ShortestPathFunctionNameContext;

ShortestPathFunctionNameContext.prototype.SHORTESTPATH = function() {
    return this.getToken(CypherParser.SHORTESTPATH, 0);
};

ShortestPathFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterShortestPathFunctionName(this);
	}
};

ShortestPathFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitShortestPathFunctionName(this);
	}
};




CypherParser.ShortestPathFunctionNameContext = ShortestPathFunctionNameContext;

CypherParser.prototype.shortestPathFunctionName = function() {

    var localctx = new ShortestPathFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CypherParser.RULE_shortestPathFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2980;
        this.match(CypherParser.SHORTESTPATH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllShortestPathFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allShortestPathFunctionName;
    return this;
}

AllShortestPathFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllShortestPathFunctionNameContext.prototype.constructor = AllShortestPathFunctionNameContext;

AllShortestPathFunctionNameContext.prototype.ALLSHORTESTPATHS = function() {
    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
};

AllShortestPathFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAllShortestPathFunctionName(this);
	}
};

AllShortestPathFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAllShortestPathFunctionName(this);
	}
};




CypherParser.AllShortestPathFunctionNameContext = AllShortestPathFunctionNameContext;

CypherParser.prototype.allShortestPathFunctionName = function() {

    var localctx = new AllShortestPathFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CypherParser.RULE_allShortestPathFunctionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2982;
        this.match(CypherParser.ALLSHORTESTPATHS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

AtomContext.prototype.parameter = function() {
    return this.getTypedRuleContext(ParameterContext,0);
};

AtomContext.prototype.caseExpression = function() {
    return this.getTypedRuleContext(CaseExpressionContext,0);
};

AtomContext.prototype.COUNT = function() {
    return this.getToken(CypherParser.COUNT, 0);
};

AtomContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


AtomContext.prototype.listComprehension = function() {
    return this.getTypedRuleContext(ListComprehensionContext,0);
};

AtomContext.prototype.patternComprehension = function() {
    return this.getTypedRuleContext(PatternComprehensionContext,0);
};

AtomContext.prototype.filterFunction = function() {
    return this.getTypedRuleContext(FilterFunctionContext,0);
};

AtomContext.prototype.extractFunction = function() {
    return this.getTypedRuleContext(ExtractFunctionContext,0);
};

AtomContext.prototype.reduceFunction = function() {
    return this.getTypedRuleContext(ReduceFunctionContext,0);
};

AtomContext.prototype.allFunction = function() {
    return this.getTypedRuleContext(AllFunctionContext,0);
};

AtomContext.prototype.anyFunction = function() {
    return this.getTypedRuleContext(AnyFunctionContext,0);
};

AtomContext.prototype.noneFunction = function() {
    return this.getTypedRuleContext(NoneFunctionContext,0);
};

AtomContext.prototype.singleFunction = function() {
    return this.getTypedRuleContext(SingleFunctionContext,0);
};

AtomContext.prototype.existsFunction = function() {
    return this.getTypedRuleContext(ExistsFunctionContext,0);
};

AtomContext.prototype.shortestPathPatternFunction = function() {
    return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);
};

AtomContext.prototype.relationshipsPattern = function() {
    return this.getTypedRuleContext(RelationshipsPatternContext,0);
};

AtomContext.prototype.parenthesizedExpression = function() {
    return this.getTypedRuleContext(ParenthesizedExpressionContext,0);
};

AtomContext.prototype.functionInvocation = function() {
    return this.getTypedRuleContext(FunctionInvocationContext,0);
};

AtomContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAtom(this);
	}
};




CypherParser.AtomContext = AtomContext;

CypherParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CypherParser.RULE_atom);
    var _la = 0; // Token type
    try {
        this.state = 3015;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,409,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2984;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2985;
            this.parameter();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2986;
            this.caseExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2987;
            this.match(CypherParser.COUNT);
            this.state = 2989;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2988;
                this.match(CypherParser.SP);
            }

            this.state = 2991;
            this.match(CypherParser.T__19);
            this.state = 2993;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2992;
                this.match(CypherParser.SP);
            }

            this.state = 2995;
            this.match(CypherParser.T__18);
            this.state = 2997;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 2996;
                this.match(CypherParser.SP);
            }

            this.state = 2999;
            this.match(CypherParser.T__20);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3000;
            this.listComprehension();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 3001;
            this.patternComprehension();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 3002;
            this.filterFunction();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 3003;
            this.extractFunction();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 3004;
            this.reduceFunction();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 3005;
            this.allFunction();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 3006;
            this.anyFunction();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 3007;
            this.noneFunction();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 3008;
            this.singleFunction();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 3009;
            this.existsFunction();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 3010;
            this.shortestPathPatternFunction();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 3011;
            this.relationshipsPattern();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 3012;
            this.parenthesizedExpression();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 3013;
            this.functionInvocation();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 3014;
            this.variable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

LiteralContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

LiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

LiteralContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

LiteralContext.prototype.mapLiteral = function() {
    return this.getTypedRuleContext(MapLiteralContext,0);
};

LiteralContext.prototype.listLiteral = function() {
    return this.getTypedRuleContext(ListLiteralContext,0);
};

LiteralContext.prototype.mapProjection = function() {
    return this.getTypedRuleContext(MapProjectionContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLiteral(this);
	}
};




CypherParser.LiteralContext = LiteralContext;

CypherParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CypherParser.RULE_literal);
    try {
        this.state = 3024;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,410,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3017;
            this.numberLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3018;
            this.stringLiteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3019;
            this.booleanLiteral();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3020;
            this.match(CypherParser.NULL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3021;
            this.mapLiteral();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 3022;
            this.listLiteral();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 3023;
            this.mapProjection();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitStringLiteral(this);
	}
};




CypherParser.StringLiteralContext = StringLiteralContext;

CypherParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CypherParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3026;
        this.match(CypherParser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(CypherParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(CypherParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitBooleanLiteral(this);
	}
};




CypherParser.BooleanLiteralContext = BooleanLiteralContext;

CypherParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, CypherParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3028;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.TRUE || _la===CypherParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ListLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_listLiteral;
    return this;
}

ListLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListLiteralContext.prototype.constructor = ListLiteralContext;

ListLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ListLiteralContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterListLiteral(this);
	}
};

ListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitListLiteral(this);
	}
};




CypherParser.ListLiteralContext = ListLiteralContext;

CypherParser.prototype.listLiteral = function() {

    var localctx = new ListLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, CypherParser.RULE_listLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3030;
        this.match(CypherParser.T__16);
        this.state = 3032;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3031;
            this.match(CypherParser.SP);
        }

        this.state = 3051;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__19))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.CATALOG - 130)) | (1 << (CypherParser.SHOW - 130)) | (1 << (CypherParser.DEFAULT - 130)) | (1 << (CypherParser.DBMS - 130)) | (1 << (CypherParser.DATABASE - 130)) | (1 << (CypherParser.DATABASES - 130)) | (1 << (CypherParser.GRAPH - 130)) | (1 << (CypherParser.GRAPHS - 130)) | (1 << (CypherParser.REPLACE - 130)) | (1 << (CypherParser.IF - 130)) | (1 << (CypherParser.STOP - 130)) | (1 << (CypherParser.ROLE - 130)) | (1 << (CypherParser.ROLES - 130)) | (1 << (CypherParser.USER - 130)) | (1 << (CypherParser.USERS - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.CHANGE - 130)) | (1 << (CypherParser.REQUIRED - 130)) | (1 << (CypherParser.STATUS - 130)) | (1 << (CypherParser.ACTIVE - 130)) | (1 << (CypherParser.SUSPENDED - 130)) | (1 << (CypherParser.ALTER - 130)) | (1 << (CypherParser.CURRENT - 130)) | (1 << (CypherParser.TO - 130)) | (1 << (CypherParser.PRIVILEGES - 130)) | (1 << (CypherParser.GRANT - 130)) | (1 << (CypherParser.DENY - 130)) | (1 << (CypherParser.REVOKE - 130)) | (1 << (CypherParser.RELATIONSHIPS - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.NODES - 162)) | (1 << (CypherParser.ELEMENT - 162)) | (1 << (CypherParser.ELEMENTS - 162)) | (1 << (CypherParser.COPY - 162)) | (1 << (CypherParser.OF - 162)) | (1 << (CypherParser.TRAVERSE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.WRITE - 162)) | (1 << (CypherParser.ACCESS - 162)) | (1 << (CypherParser.INDEXES - 162)) | (1 << (CypherParser.MANAGEMENT - 162)) | (1 << (CypherParser.NEW - 162)) | (1 << (CypherParser.LABEL - 162)) | (1 << (CypherParser.LABELS - 162)) | (1 << (CypherParser.NAME - 162)) | (1 << (CypherParser.NAMES - 162)) | (1 << (CypherParser.TYPE - 162)) | (1 << (CypherParser.TYPES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.CONSTRAINTS - 162)) | (1 << (CypherParser.ASSIGN - 162)) | (1 << (CypherParser.BTREE - 162)) | (1 << (CypherParser.EXIST - 162)) | (1 << (CypherParser.FOR - 162)) | (1 << (CypherParser.OPTIONS - 162)) | (1 << (CypherParser.EXECUTE - 162)) | (1 << (CypherParser.DEFINED - 162)) | (1 << (CypherParser.FUNCTION - 162)) | (1 << (CypherParser.FUNCTIONS - 162)) | (1 << (CypherParser.BOOSTED - 162)) | (1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.ADMIN - 194)) | (1 << (CypherParser.ADMINISTRATOR - 194)) | (1 << (CypherParser.BRIEF - 194)) | (1 << (CypherParser.VERBOSE - 194)) | (1 << (CypherParser.OUTPUT - 194)) | (1 << (CypherParser.BUILT - 194)) | (1 << (CypherParser.EACH - 194)) | (1 << (CypherParser.EXECUTABLE - 194)) | (1 << (CypherParser.EXISTENCE - 194)) | (1 << (CypherParser.FULLTEXT - 194)) | (1 << (CypherParser.HOME - 194)) | (1 << (CypherParser.LOOKUP - 194)) | (1 << (CypherParser.RENAME - 194)) | (1 << (CypherParser.StringLiteral - 194)) | (1 << (CypherParser.HexInteger - 194)) | (1 << (CypherParser.DecimalInteger - 194)) | (1 << (CypherParser.OctalInteger - 194)) | (1 << (CypherParser.HexLetter - 194)) | (1 << (CypherParser.ExponentDecimalReal - 194)) | (1 << (CypherParser.RegularDecimalReal - 194)) | (1 << (CypherParser.UnescapedSymbolicName - 194)) | (1 << (CypherParser.EscapedSymbolicName - 194)))) !== 0)) {
            this.state = 3034;
            this.expression();
            this.state = 3036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3035;
                this.match(CypherParser.SP);
            }

            this.state = 3048;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 3038;
                this.match(CypherParser.T__14);
                this.state = 3040;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3039;
                    this.match(CypherParser.SP);
                }

                this.state = 3042;
                this.expression();
                this.state = 3044;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3043;
                    this.match(CypherParser.SP);
                }

                this.state = 3050;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 3053;
        this.match(CypherParser.T__17);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartialComparisonExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_partialComparisonExpression;
    return this;
}

PartialComparisonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartialComparisonExpressionContext.prototype.constructor = PartialComparisonExpressionContext;

PartialComparisonExpressionContext.prototype.addOrSubtractExpression = function() {
    return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);
};

PartialComparisonExpressionContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

PartialComparisonExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPartialComparisonExpression(this);
	}
};

PartialComparisonExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPartialComparisonExpression(this);
	}
};




CypherParser.PartialComparisonExpressionContext = PartialComparisonExpressionContext;

CypherParser.prototype.partialComparisonExpression = function() {

    var localctx = new PartialComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, CypherParser.RULE_partialComparisonExpression);
    var _la = 0; // Token type
    try {
        this.state = 3090;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__11:
            this.enterOuterAlt(localctx, 1);
            this.state = 3055;
            this.match(CypherParser.T__11);
            this.state = 3057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3056;
                this.match(CypherParser.SP);
            }

            this.state = 3059;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__27:
            this.enterOuterAlt(localctx, 2);
            this.state = 3060;
            this.match(CypherParser.T__27);
            this.state = 3062;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3061;
                this.match(CypherParser.SP);
            }

            this.state = 3064;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__28:
            this.enterOuterAlt(localctx, 3);
            this.state = 3065;
            this.match(CypherParser.T__28);
            this.state = 3067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3066;
                this.match(CypherParser.SP);
            }

            this.state = 3069;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__29:
            this.enterOuterAlt(localctx, 4);
            this.state = 3070;
            this.match(CypherParser.T__29);
            this.state = 3072;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3071;
                this.match(CypherParser.SP);
            }

            this.state = 3074;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__30:
            this.enterOuterAlt(localctx, 5);
            this.state = 3075;
            this.match(CypherParser.T__30);
            this.state = 3077;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3076;
                this.match(CypherParser.SP);
            }

            this.state = 3079;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__31:
            this.enterOuterAlt(localctx, 6);
            this.state = 3080;
            this.match(CypherParser.T__31);
            this.state = 3082;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3081;
                this.match(CypherParser.SP);
            }

            this.state = 3084;
            this.addOrSubtractExpression();
            break;
        case CypherParser.T__32:
            this.enterOuterAlt(localctx, 7);
            this.state = 3085;
            this.match(CypherParser.T__32);
            this.state = 3087;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3086;
                this.match(CypherParser.SP);
            }

            this.state = 3089;
            this.addOrSubtractExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParenthesizedExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parenthesizedExpression;
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesizedExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitParenthesizedExpression(this);
	}
};




CypherParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

CypherParser.prototype.parenthesizedExpression = function() {

    var localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, CypherParser.RULE_parenthesizedExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3092;
        this.match(CypherParser.T__19);
        this.state = 3094;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3093;
            this.match(CypherParser.SP);
        }

        this.state = 3096;
        this.expression();
        this.state = 3098;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3097;
            this.match(CypherParser.SP);
        }

        this.state = 3100;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationshipsPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_relationshipsPattern;
    return this;
}

RelationshipsPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationshipsPatternContext.prototype.constructor = RelationshipsPatternContext;

RelationshipsPatternContext.prototype.nodePattern = function() {
    return this.getTypedRuleContext(NodePatternContext,0);
};

RelationshipsPatternContext.prototype.patternElementChain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternElementChainContext);
    } else {
        return this.getTypedRuleContext(PatternElementChainContext,i);
    }
};

RelationshipsPatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


RelationshipsPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRelationshipsPattern(this);
	}
};

RelationshipsPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRelationshipsPattern(this);
	}
};




CypherParser.RelationshipsPatternContext = RelationshipsPatternContext;

CypherParser.prototype.relationshipsPattern = function() {

    var localctx = new RelationshipsPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, CypherParser.RULE_relationshipsPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3102;
        this.nodePattern();
        this.state = 3107; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 3104;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===CypherParser.SP) {
        		    this.state = 3103;
        		    this.match(CypherParser.SP);
        		}

        		this.state = 3106;
        		this.patternElementChain();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 3109; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,428, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_filterExpression;
    return this;
}

FilterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterExpressionContext.prototype.constructor = FilterExpressionContext;

FilterExpressionContext.prototype.idInColl = function() {
    return this.getTypedRuleContext(IdInCollContext,0);
};

FilterExpressionContext.prototype.where = function() {
    return this.getTypedRuleContext(WhereContext,0);
};

FilterExpressionContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

FilterExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFilterExpression(this);
	}
};

FilterExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFilterExpression(this);
	}
};




CypherParser.FilterExpressionContext = FilterExpressionContext;

CypherParser.prototype.filterExpression = function() {

    var localctx = new FilterExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, CypherParser.RULE_filterExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3111;
        this.idInColl();
        this.state = 3116;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
        if(la_===1) {
            this.state = 3113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3112;
                this.match(CypherParser.SP);
            }

            this.state = 3115;
            this.where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdInCollContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_idInColl;
    return this;
}

IdInCollContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdInCollContext.prototype.constructor = IdInCollContext;

IdInCollContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

IdInCollContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


IdInCollContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

IdInCollContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IdInCollContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIdInColl(this);
	}
};

IdInCollContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIdInColl(this);
	}
};




CypherParser.IdInCollContext = IdInCollContext;

CypherParser.prototype.idInColl = function() {

    var localctx = new IdInCollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, CypherParser.RULE_idInColl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3118;
        this.variable();
        this.state = 3119;
        this.match(CypherParser.SP);
        this.state = 3120;
        this.match(CypherParser.IN);
        this.state = 3121;
        this.match(CypherParser.SP);
        this.state = 3122;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionInvocation;
    return this;
}

FunctionInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionInvocationContext.prototype.constructor = FunctionInvocationContext;

FunctionInvocationContext.prototype.functionInvocationBody = function() {
    return this.getTypedRuleContext(FunctionInvocationBodyContext,0);
};

FunctionInvocationContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


FunctionInvocationContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

FunctionInvocationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFunctionInvocation(this);
	}
};

FunctionInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFunctionInvocation(this);
	}
};




CypherParser.FunctionInvocationContext = FunctionInvocationContext;

CypherParser.prototype.functionInvocation = function() {

    var localctx = new FunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, CypherParser.RULE_functionInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3124;
        this.functionInvocationBody();
        this.state = 3126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3125;
            this.match(CypherParser.SP);
        }

        this.state = 3128;
        this.match(CypherParser.T__19);
        this.state = 3130;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3129;
            this.match(CypherParser.SP);
        }

        this.state = 3136;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,434,this._ctx);
        if(la_===1) {
            this.state = 3132;
            this.match(CypherParser.DISTINCT);
            this.state = 3134;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3133;
                this.match(CypherParser.SP);
            }


        }
        this.state = 3155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__16) | (1 << CypherParser.T__19))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CypherParser.T__33 - 34)) | (1 << (CypherParser.CYPHER - 34)) | (1 << (CypherParser.EXPLAIN - 34)) | (1 << (CypherParser.PROFILE - 34)) | (1 << (CypherParser.USING - 34)) | (1 << (CypherParser.PERIODIC - 34)) | (1 << (CypherParser.COMMIT - 34)) | (1 << (CypherParser.UNION - 34)) | (1 << (CypherParser.ALL - 34)) | (1 << (CypherParser.CREATE - 34)) | (1 << (CypherParser.DROP - 34)) | (1 << (CypherParser.INDEX - 34)) | (1 << (CypherParser.ON - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CypherParser.CONSTRAINT - 66)) | (1 << (CypherParser.ASSERT - 66)) | (1 << (CypherParser.IS - 66)) | (1 << (CypherParser.UNIQUE - 66)) | (1 << (CypherParser.EXISTS - 66)) | (1 << (CypherParser.LOAD - 66)) | (1 << (CypherParser.CSV - 66)) | (1 << (CypherParser.WITH - 66)) | (1 << (CypherParser.HEADERS - 66)) | (1 << (CypherParser.FROM - 66)) | (1 << (CypherParser.AS - 66)) | (1 << (CypherParser.FIELDTERMINATOR - 66)) | (1 << (CypherParser.OPTIONAL - 66)) | (1 << (CypherParser.MATCH - 66)) | (1 << (CypherParser.UNWIND - 66)) | (1 << (CypherParser.MERGE - 66)) | (1 << (CypherParser.SET - 66)) | (1 << (CypherParser.DETACH - 66)) | (1 << (CypherParser.DELETE - 66)) | (1 << (CypherParser.REMOVE - 66)) | (1 << (CypherParser.FOREACH - 66)) | (1 << (CypherParser.IN - 66)) | (1 << (CypherParser.DISTINCT - 66)) | (1 << (CypherParser.RETURN - 66)) | (1 << (CypherParser.ORDER - 66)) | (1 << (CypherParser.BY - 66)) | (1 << (CypherParser.L_SKIP - 66)) | (1 << (CypherParser.LIMIT - 66)) | (1 << (CypherParser.ASCENDING - 66)) | (1 << (CypherParser.ASC - 66)) | (1 << (CypherParser.DESCENDING - 66)) | (1 << (CypherParser.DESC - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.SCAN - 98)) | (1 << (CypherParser.START - 98)) | (1 << (CypherParser.NODE - 98)) | (1 << (CypherParser.RELATIONSHIP - 98)) | (1 << (CypherParser.REL - 98)) | (1 << (CypherParser.WHERE - 98)) | (1 << (CypherParser.SHORTESTPATH - 98)) | (1 << (CypherParser.ALLSHORTESTPATHS - 98)) | (1 << (CypherParser.OR - 98)) | (1 << (CypherParser.XOR - 98)) | (1 << (CypherParser.AND - 98)) | (1 << (CypherParser.NOT - 98)) | (1 << (CypherParser.STARTS - 98)) | (1 << (CypherParser.ENDS - 98)) | (1 << (CypherParser.CONTAINS - 98)) | (1 << (CypherParser.NULL - 98)) | (1 << (CypherParser.COUNT - 98)) | (1 << (CypherParser.FILTER - 98)) | (1 << (CypherParser.EXTRACT - 98)) | (1 << (CypherParser.ANY - 98)) | (1 << (CypherParser.NONE - 98)) | (1 << (CypherParser.SINGLE - 98)) | (1 << (CypherParser.TRUE - 98)) | (1 << (CypherParser.FALSE - 98)) | (1 << (CypherParser.REDUCE - 98)) | (1 << (CypherParser.CASE - 98)) | (1 << (CypherParser.ELSE - 98)) | (1 << (CypherParser.END - 98)) | (1 << (CypherParser.WHEN - 98)) | (1 << (CypherParser.THEN - 98)) | (1 << (CypherParser.CALL - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.YIELD - 130)) | (1 << (CypherParser.KEY - 130)) | (1 << (CypherParser.CATALOG - 130)) | (1 << (CypherParser.SHOW - 130)) | (1 << (CypherParser.DEFAULT - 130)) | (1 << (CypherParser.DBMS - 130)) | (1 << (CypherParser.DATABASE - 130)) | (1 << (CypherParser.DATABASES - 130)) | (1 << (CypherParser.GRAPH - 130)) | (1 << (CypherParser.GRAPHS - 130)) | (1 << (CypherParser.REPLACE - 130)) | (1 << (CypherParser.IF - 130)) | (1 << (CypherParser.STOP - 130)) | (1 << (CypherParser.ROLE - 130)) | (1 << (CypherParser.ROLES - 130)) | (1 << (CypherParser.USER - 130)) | (1 << (CypherParser.USERS - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.CHANGE - 130)) | (1 << (CypherParser.REQUIRED - 130)) | (1 << (CypherParser.STATUS - 130)) | (1 << (CypherParser.ACTIVE - 130)) | (1 << (CypherParser.SUSPENDED - 130)) | (1 << (CypherParser.ALTER - 130)) | (1 << (CypherParser.CURRENT - 130)) | (1 << (CypherParser.TO - 130)) | (1 << (CypherParser.PRIVILEGES - 130)) | (1 << (CypherParser.GRANT - 130)) | (1 << (CypherParser.DENY - 130)) | (1 << (CypherParser.REVOKE - 130)) | (1 << (CypherParser.RELATIONSHIPS - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.NODES - 162)) | (1 << (CypherParser.ELEMENT - 162)) | (1 << (CypherParser.ELEMENTS - 162)) | (1 << (CypherParser.COPY - 162)) | (1 << (CypherParser.OF - 162)) | (1 << (CypherParser.TRAVERSE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.WRITE - 162)) | (1 << (CypherParser.ACCESS - 162)) | (1 << (CypherParser.INDEXES - 162)) | (1 << (CypherParser.MANAGEMENT - 162)) | (1 << (CypherParser.NEW - 162)) | (1 << (CypherParser.LABEL - 162)) | (1 << (CypherParser.LABELS - 162)) | (1 << (CypherParser.NAME - 162)) | (1 << (CypherParser.NAMES - 162)) | (1 << (CypherParser.TYPE - 162)) | (1 << (CypherParser.TYPES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.CONSTRAINTS - 162)) | (1 << (CypherParser.ASSIGN - 162)) | (1 << (CypherParser.BTREE - 162)) | (1 << (CypherParser.EXIST - 162)) | (1 << (CypherParser.FOR - 162)) | (1 << (CypherParser.OPTIONS - 162)) | (1 << (CypherParser.EXECUTE - 162)) | (1 << (CypherParser.DEFINED - 162)) | (1 << (CypherParser.FUNCTION - 162)) | (1 << (CypherParser.FUNCTIONS - 162)) | (1 << (CypherParser.BOOSTED - 162)) | (1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.ADMIN - 194)) | (1 << (CypherParser.ADMINISTRATOR - 194)) | (1 << (CypherParser.BRIEF - 194)) | (1 << (CypherParser.VERBOSE - 194)) | (1 << (CypherParser.OUTPUT - 194)) | (1 << (CypherParser.BUILT - 194)) | (1 << (CypherParser.EACH - 194)) | (1 << (CypherParser.EXECUTABLE - 194)) | (1 << (CypherParser.EXISTENCE - 194)) | (1 << (CypherParser.FULLTEXT - 194)) | (1 << (CypherParser.HOME - 194)) | (1 << (CypherParser.LOOKUP - 194)) | (1 << (CypherParser.RENAME - 194)) | (1 << (CypherParser.StringLiteral - 194)) | (1 << (CypherParser.HexInteger - 194)) | (1 << (CypherParser.DecimalInteger - 194)) | (1 << (CypherParser.OctalInteger - 194)) | (1 << (CypherParser.HexLetter - 194)) | (1 << (CypherParser.ExponentDecimalReal - 194)) | (1 << (CypherParser.RegularDecimalReal - 194)) | (1 << (CypherParser.UnescapedSymbolicName - 194)) | (1 << (CypherParser.EscapedSymbolicName - 194)))) !== 0)) {
            this.state = 3138;
            this.expression();
            this.state = 3140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3139;
                this.match(CypherParser.SP);
            }

            this.state = 3152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 3142;
                this.match(CypherParser.T__14);
                this.state = 3144;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3143;
                    this.match(CypherParser.SP);
                }

                this.state = 3146;
                this.expression();
                this.state = 3148;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3147;
                    this.match(CypherParser.SP);
                }

                this.state = 3154;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 3157;
        this.match(CypherParser.T__20);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionInvocationBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionInvocationBody;
    return this;
}

FunctionInvocationBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionInvocationBodyContext.prototype.constructor = FunctionInvocationBodyContext;

FunctionInvocationBodyContext.prototype.namespace = function() {
    return this.getTypedRuleContext(NamespaceContext,0);
};

FunctionInvocationBodyContext.prototype.functionName = function() {
    return this.getTypedRuleContext(FunctionNameContext,0);
};

FunctionInvocationBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFunctionInvocationBody(this);
	}
};

FunctionInvocationBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFunctionInvocationBody(this);
	}
};




CypherParser.FunctionInvocationBodyContext = FunctionInvocationBodyContext;

CypherParser.prototype.functionInvocationBody = function() {

    var localctx = new FunctionInvocationBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, CypherParser.RULE_functionInvocationBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3159;
        this.namespace();
        this.state = 3160;
        this.functionName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_functionName;
    return this;
}

FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionNameContext.prototype.constructor = FunctionNameContext;

FunctionNameContext.prototype.UnescapedSymbolicName = function() {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
};

FunctionNameContext.prototype.EscapedSymbolicName = function() {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
};

FunctionNameContext.prototype.COUNT = function() {
    return this.getToken(CypherParser.COUNT, 0);
};

FunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterFunctionName(this);
	}
};

FunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitFunctionName(this);
	}
};




CypherParser.FunctionNameContext = FunctionNameContext;

CypherParser.prototype.functionName = function() {

    var localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, CypherParser.RULE_functionName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3162;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.COUNT || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcedureNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_procedureName;
    return this;
}

ProcedureNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureNameContext.prototype.constructor = ProcedureNameContext;

ProcedureNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ProcedureNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterProcedureName(this);
	}
};

ProcedureNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitProcedureName(this);
	}
};




CypherParser.ProcedureNameContext = ProcedureNameContext;

CypherParser.prototype.procedureName = function() {

    var localctx = new ProcedureNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, CypherParser.RULE_procedureName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3164;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ListComprehensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_listComprehension;
    return this;
}

ListComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListComprehensionContext.prototype.constructor = ListComprehensionContext;

ListComprehensionContext.prototype.filterExpression = function() {
    return this.getTypedRuleContext(FilterExpressionContext,0);
};

ListComprehensionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


ListComprehensionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ListComprehensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterListComprehension(this);
	}
};

ListComprehensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitListComprehension(this);
	}
};




CypherParser.ListComprehensionContext = ListComprehensionContext;

CypherParser.prototype.listComprehension = function() {

    var localctx = new ListComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, CypherParser.RULE_listComprehension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3166;
        this.match(CypherParser.T__16);
        this.state = 3168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3167;
            this.match(CypherParser.SP);
        }

        this.state = 3170;
        this.filterExpression();
        this.state = 3179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
        if(la_===1) {
            this.state = 3172;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3171;
                this.match(CypherParser.SP);
            }

            this.state = 3174;
            this.match(CypherParser.T__22);
            this.state = 3176;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3175;
                this.match(CypherParser.SP);
            }

            this.state = 3178;
            this.expression();

        }
        this.state = 3182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3181;
            this.match(CypherParser.SP);
        }

        this.state = 3184;
        this.match(CypherParser.T__17);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PatternComprehensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_patternComprehension;
    return this;
}

PatternComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternComprehensionContext.prototype.constructor = PatternComprehensionContext;

PatternComprehensionContext.prototype.relationshipsPattern = function() {
    return this.getTypedRuleContext(RelationshipsPatternContext,0);
};

PatternComprehensionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PatternComprehensionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PatternComprehensionContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

PatternComprehensionContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

PatternComprehensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPatternComprehension(this);
	}
};

PatternComprehensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPatternComprehension(this);
	}
};




CypherParser.PatternComprehensionContext = PatternComprehensionContext;

CypherParser.prototype.patternComprehension = function() {

    var localctx = new PatternComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, CypherParser.RULE_patternComprehension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3186;
        this.match(CypherParser.T__16);
        this.state = 3188;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3187;
            this.match(CypherParser.SP);
        }

        this.state = 3198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.CATALOG - 118)) | (1 << (CypherParser.SHOW - 118)) | (1 << (CypherParser.DEFAULT - 118)) | (1 << (CypherParser.DBMS - 118)) | (1 << (CypherParser.DATABASE - 118)) | (1 << (CypherParser.DATABASES - 118)) | (1 << (CypherParser.GRAPH - 118)) | (1 << (CypherParser.GRAPHS - 118)) | (1 << (CypherParser.REPLACE - 118)) | (1 << (CypherParser.IF - 118)) | (1 << (CypherParser.STOP - 118)) | (1 << (CypherParser.ROLE - 118)) | (1 << (CypherParser.ROLES - 118)) | (1 << (CypherParser.USER - 118)) | (1 << (CypherParser.USERS - 118)) | (1 << (CypherParser.POPULATED - 118)) | (1 << (CypherParser.PASSWORD - 118)) | (1 << (CypherParser.CHANGE - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (CypherParser.REQUIRED - 150)) | (1 << (CypherParser.STATUS - 150)) | (1 << (CypherParser.ACTIVE - 150)) | (1 << (CypherParser.SUSPENDED - 150)) | (1 << (CypherParser.ALTER - 150)) | (1 << (CypherParser.CURRENT - 150)) | (1 << (CypherParser.TO - 150)) | (1 << (CypherParser.PRIVILEGES - 150)) | (1 << (CypherParser.GRANT - 150)) | (1 << (CypherParser.DENY - 150)) | (1 << (CypherParser.REVOKE - 150)) | (1 << (CypherParser.RELATIONSHIPS - 150)) | (1 << (CypherParser.NODES - 150)) | (1 << (CypherParser.ELEMENT - 150)) | (1 << (CypherParser.ELEMENTS - 150)) | (1 << (CypherParser.COPY - 150)) | (1 << (CypherParser.OF - 150)) | (1 << (CypherParser.TRAVERSE - 150)) | (1 << (CypherParser.READ - 150)) | (1 << (CypherParser.WRITE - 150)) | (1 << (CypherParser.ACCESS - 150)) | (1 << (CypherParser.INDEXES - 150)) | (1 << (CypherParser.MANAGEMENT - 150)) | (1 << (CypherParser.NEW - 150)) | (1 << (CypherParser.LABEL - 150)) | (1 << (CypherParser.LABELS - 150)) | (1 << (CypherParser.NAME - 150)) | (1 << (CypherParser.NAMES - 150)) | (1 << (CypherParser.TYPE - 150)) | (1 << (CypherParser.TYPES - 150)) | (1 << (CypherParser.PROPERTY - 150)) | (1 << (CypherParser.CONSTRAINTS - 150)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (CypherParser.ASSIGN - 182)) | (1 << (CypherParser.BTREE - 182)) | (1 << (CypherParser.EXIST - 182)) | (1 << (CypherParser.FOR - 182)) | (1 << (CypherParser.OPTIONS - 182)) | (1 << (CypherParser.EXECUTE - 182)) | (1 << (CypherParser.DEFINED - 182)) | (1 << (CypherParser.FUNCTION - 182)) | (1 << (CypherParser.FUNCTIONS - 182)) | (1 << (CypherParser.BOOSTED - 182)) | (1 << (CypherParser.PROCEDURE - 182)) | (1 << (CypherParser.PROCEDURES - 182)) | (1 << (CypherParser.ADMIN - 182)) | (1 << (CypherParser.ADMINISTRATOR - 182)) | (1 << (CypherParser.BRIEF - 182)) | (1 << (CypherParser.VERBOSE - 182)) | (1 << (CypherParser.OUTPUT - 182)) | (1 << (CypherParser.BUILT - 182)) | (1 << (CypherParser.EACH - 182)) | (1 << (CypherParser.EXECUTABLE - 182)) | (1 << (CypherParser.EXISTENCE - 182)) | (1 << (CypherParser.FULLTEXT - 182)) | (1 << (CypherParser.HOME - 182)) | (1 << (CypherParser.LOOKUP - 182)) | (1 << (CypherParser.RENAME - 182)) | (1 << (CypherParser.HexLetter - 182)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
            this.state = 3190;
            this.variable();
            this.state = 3192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3191;
                this.match(CypherParser.SP);
            }

            this.state = 3194;
            this.match(CypherParser.T__11);
            this.state = 3196;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3195;
                this.match(CypherParser.SP);
            }

        }

        this.state = 3200;
        this.relationshipsPattern();
        this.state = 3202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3201;
            this.match(CypherParser.SP);
        }

        this.state = 3212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.WHERE) {
            this.state = 3204;
            this.match(CypherParser.WHERE);
            this.state = 3206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3205;
                this.match(CypherParser.SP);
            }

            this.state = 3208;
            this.expression();
            this.state = 3210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3209;
                this.match(CypherParser.SP);
            }

        }

        this.state = 3214;
        this.match(CypherParser.T__22);
        this.state = 3216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3215;
            this.match(CypherParser.SP);
        }

        this.state = 3218;
        this.expression();
        this.state = 3220;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3219;
            this.match(CypherParser.SP);
        }

        this.state = 3222;
        this.match(CypherParser.T__17);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyLookup;
    return this;
}

PropertyLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyLookupContext.prototype.constructor = PropertyLookupContext;

PropertyLookupContext.prototype.propertyKeyName = function() {
    return this.getTypedRuleContext(PropertyKeyNameContext,0);
};

PropertyLookupContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

PropertyLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyLookup(this);
	}
};

PropertyLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyLookup(this);
	}
};




CypherParser.PropertyLookupContext = PropertyLookupContext;

CypherParser.prototype.propertyLookup = function() {

    var localctx = new PropertyLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, CypherParser.RULE_propertyLookup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3224;
        this.match(CypherParser.T__6);
        this.state = 3226;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3225;
            this.match(CypherParser.SP);
        }

        this.state = 3228;
        this.propertyKeyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_caseExpression;
    return this;
}

CaseExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseExpressionContext.prototype.constructor = CaseExpressionContext;

CaseExpressionContext.prototype.END = function() {
    return this.getToken(CypherParser.END, 0);
};

CaseExpressionContext.prototype.ELSE = function() {
    return this.getToken(CypherParser.ELSE, 0);
};

CaseExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CaseExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CaseExpressionContext.prototype.CASE = function() {
    return this.getToken(CypherParser.CASE, 0);
};

CaseExpressionContext.prototype.caseAlternatives = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseAlternativesContext);
    } else {
        return this.getTypedRuleContext(CaseAlternativesContext,i);
    }
};

CaseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCaseExpression(this);
	}
};

CaseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCaseExpression(this);
	}
};




CypherParser.CaseExpressionContext = CaseExpressionContext;

CypherParser.prototype.caseExpression = function() {

    var localctx = new CaseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, CypherParser.RULE_caseExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3252;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,461,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3230;
            this.match(CypherParser.CASE);
            this.state = 3235; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3232;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===CypherParser.SP) {
            		    this.state = 3231;
            		    this.match(CypherParser.SP);
            		}

            		this.state = 3234;
            		this.caseAlternatives();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3237; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,457, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.state = 3239;
            this.match(CypherParser.CASE);
            this.state = 3241;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3240;
                this.match(CypherParser.SP);
            }

            this.state = 3243;
            this.expression();
            this.state = 3248; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3245;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===CypherParser.SP) {
            		    this.state = 3244;
            		    this.match(CypherParser.SP);
            		}

            		this.state = 3247;
            		this.caseAlternatives();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3250; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,460, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
        this.state = 3262;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,464,this._ctx);
        if(la_===1) {
            this.state = 3255;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3254;
                this.match(CypherParser.SP);
            }

            this.state = 3257;
            this.match(CypherParser.ELSE);
            this.state = 3259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3258;
                this.match(CypherParser.SP);
            }

            this.state = 3261;
            this.expression();

        }
        this.state = 3265;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3264;
            this.match(CypherParser.SP);
        }

        this.state = 3267;
        this.match(CypherParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseAlternativesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_caseAlternatives;
    return this;
}

CaseAlternativesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseAlternativesContext.prototype.constructor = CaseAlternativesContext;

CaseAlternativesContext.prototype.WHEN = function() {
    return this.getToken(CypherParser.WHEN, 0);
};

CaseAlternativesContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CaseAlternativesContext.prototype.THEN = function() {
    return this.getToken(CypherParser.THEN, 0);
};

CaseAlternativesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


CaseAlternativesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterCaseAlternatives(this);
	}
};

CaseAlternativesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitCaseAlternatives(this);
	}
};




CypherParser.CaseAlternativesContext = CaseAlternativesContext;

CypherParser.prototype.caseAlternatives = function() {

    var localctx = new CaseAlternativesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, CypherParser.RULE_caseAlternatives);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3269;
        this.match(CypherParser.WHEN);
        this.state = 3271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3270;
            this.match(CypherParser.SP);
        }

        this.state = 3273;
        this.expression();
        this.state = 3275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3274;
            this.match(CypherParser.SP);
        }

        this.state = 3277;
        this.match(CypherParser.THEN);
        this.state = 3279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3278;
            this.match(CypherParser.SP);
        }

        this.state = 3281;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitVariable(this);
	}
};




CypherParser.VariableContext = VariableContext;

CypherParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, CypherParser.RULE_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3283;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.doubleLiteral = function() {
    return this.getTypedRuleContext(DoubleLiteralContext,0);
};

NumberLiteralContext.prototype.integerLiteral = function() {
    return this.getTypedRuleContext(IntegerLiteralContext,0);
};

NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNumberLiteral(this);
	}
};




CypherParser.NumberLiteralContext = NumberLiteralContext;

CypherParser.prototype.numberLiteral = function() {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, CypherParser.RULE_numberLiteral);
    try {
        this.state = 3287;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
            this.enterOuterAlt(localctx, 1);
            this.state = 3285;
            this.doubleLiteral();
            break;
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
            this.enterOuterAlt(localctx, 2);
            this.state = 3286;
            this.integerLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapLiteral;
    return this;
}

MapLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapLiteralContext.prototype.constructor = MapLiteralContext;

MapLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MapLiteralContext.prototype.literalEntry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralEntryContext);
    } else {
        return this.getTypedRuleContext(LiteralEntryContext,i);
    }
};

MapLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMapLiteral(this);
	}
};

MapLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMapLiteral(this);
	}
};




CypherParser.MapLiteralContext = MapLiteralContext;

CypherParser.prototype.mapLiteral = function() {

    var localctx = new MapLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, CypherParser.RULE_mapLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3289;
        this.match(CypherParser.T__13);
        this.state = 3291;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3290;
            this.match(CypherParser.SP);
        }

        this.state = 3310;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.CATALOG - 118)) | (1 << (CypherParser.SHOW - 118)) | (1 << (CypherParser.DEFAULT - 118)) | (1 << (CypherParser.DBMS - 118)) | (1 << (CypherParser.DATABASE - 118)) | (1 << (CypherParser.DATABASES - 118)) | (1 << (CypherParser.GRAPH - 118)) | (1 << (CypherParser.GRAPHS - 118)) | (1 << (CypherParser.REPLACE - 118)) | (1 << (CypherParser.IF - 118)) | (1 << (CypherParser.STOP - 118)) | (1 << (CypherParser.ROLE - 118)) | (1 << (CypherParser.ROLES - 118)) | (1 << (CypherParser.USER - 118)) | (1 << (CypherParser.USERS - 118)) | (1 << (CypherParser.POPULATED - 118)) | (1 << (CypherParser.PASSWORD - 118)) | (1 << (CypherParser.CHANGE - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (CypherParser.REQUIRED - 150)) | (1 << (CypherParser.STATUS - 150)) | (1 << (CypherParser.ACTIVE - 150)) | (1 << (CypherParser.SUSPENDED - 150)) | (1 << (CypherParser.ALTER - 150)) | (1 << (CypherParser.CURRENT - 150)) | (1 << (CypherParser.TO - 150)) | (1 << (CypherParser.PRIVILEGES - 150)) | (1 << (CypherParser.GRANT - 150)) | (1 << (CypherParser.DENY - 150)) | (1 << (CypherParser.REVOKE - 150)) | (1 << (CypherParser.RELATIONSHIPS - 150)) | (1 << (CypherParser.NODES - 150)) | (1 << (CypherParser.ELEMENT - 150)) | (1 << (CypherParser.ELEMENTS - 150)) | (1 << (CypherParser.COPY - 150)) | (1 << (CypherParser.OF - 150)) | (1 << (CypherParser.TRAVERSE - 150)) | (1 << (CypherParser.READ - 150)) | (1 << (CypherParser.WRITE - 150)) | (1 << (CypherParser.ACCESS - 150)) | (1 << (CypherParser.INDEXES - 150)) | (1 << (CypherParser.MANAGEMENT - 150)) | (1 << (CypherParser.NEW - 150)) | (1 << (CypherParser.LABEL - 150)) | (1 << (CypherParser.LABELS - 150)) | (1 << (CypherParser.NAME - 150)) | (1 << (CypherParser.NAMES - 150)) | (1 << (CypherParser.TYPE - 150)) | (1 << (CypherParser.TYPES - 150)) | (1 << (CypherParser.PROPERTY - 150)) | (1 << (CypherParser.CONSTRAINTS - 150)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (CypherParser.ASSIGN - 182)) | (1 << (CypherParser.BTREE - 182)) | (1 << (CypherParser.EXIST - 182)) | (1 << (CypherParser.FOR - 182)) | (1 << (CypherParser.OPTIONS - 182)) | (1 << (CypherParser.EXECUTE - 182)) | (1 << (CypherParser.DEFINED - 182)) | (1 << (CypherParser.FUNCTION - 182)) | (1 << (CypherParser.FUNCTIONS - 182)) | (1 << (CypherParser.BOOSTED - 182)) | (1 << (CypherParser.PROCEDURE - 182)) | (1 << (CypherParser.PROCEDURES - 182)) | (1 << (CypherParser.ADMIN - 182)) | (1 << (CypherParser.ADMINISTRATOR - 182)) | (1 << (CypherParser.BRIEF - 182)) | (1 << (CypherParser.VERBOSE - 182)) | (1 << (CypherParser.OUTPUT - 182)) | (1 << (CypherParser.BUILT - 182)) | (1 << (CypherParser.EACH - 182)) | (1 << (CypherParser.EXECUTABLE - 182)) | (1 << (CypherParser.EXISTENCE - 182)) | (1 << (CypherParser.FULLTEXT - 182)) | (1 << (CypherParser.HOME - 182)) | (1 << (CypherParser.LOOKUP - 182)) | (1 << (CypherParser.RENAME - 182)) | (1 << (CypherParser.HexLetter - 182)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
            this.state = 3293;
            this.literalEntry();
            this.state = 3295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 3294;
                this.match(CypherParser.SP);
            }

            this.state = 3307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__14) {
                this.state = 3297;
                this.match(CypherParser.T__14);
                this.state = 3299;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3298;
                    this.match(CypherParser.SP);
                }

                this.state = 3301;
                this.literalEntry();
                this.state = 3303;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3302;
                    this.match(CypherParser.SP);
                }

                this.state = 3309;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 3312;
        this.match(CypherParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapProjectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapProjection;
    return this;
}

MapProjectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapProjectionContext.prototype.constructor = MapProjectionContext;

MapProjectionContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

MapProjectionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


MapProjectionContext.prototype.mapProjectionVariants = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MapProjectionVariantsContext);
    } else {
        return this.getTypedRuleContext(MapProjectionVariantsContext,i);
    }
};

MapProjectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMapProjection(this);
	}
};

MapProjectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMapProjection(this);
	}
};




CypherParser.MapProjectionContext = MapProjectionContext;

CypherParser.prototype.mapProjection = function() {

    var localctx = new MapProjectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, CypherParser.RULE_mapProjection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3314;
        this.variable();
        this.state = 3316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3315;
            this.match(CypherParser.SP);
        }

        this.state = 3318;
        this.match(CypherParser.T__13);
        this.state = 3320;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
        if(la_===1) {
            this.state = 3319;
            this.match(CypherParser.SP);

        }
        this.state = 3323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__6 || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.CATALOG - 118)) | (1 << (CypherParser.SHOW - 118)) | (1 << (CypherParser.DEFAULT - 118)) | (1 << (CypherParser.DBMS - 118)) | (1 << (CypherParser.DATABASE - 118)) | (1 << (CypherParser.DATABASES - 118)) | (1 << (CypherParser.GRAPH - 118)) | (1 << (CypherParser.GRAPHS - 118)) | (1 << (CypherParser.REPLACE - 118)) | (1 << (CypherParser.IF - 118)) | (1 << (CypherParser.STOP - 118)) | (1 << (CypherParser.ROLE - 118)) | (1 << (CypherParser.ROLES - 118)) | (1 << (CypherParser.USER - 118)) | (1 << (CypherParser.USERS - 118)) | (1 << (CypherParser.POPULATED - 118)) | (1 << (CypherParser.PASSWORD - 118)) | (1 << (CypherParser.CHANGE - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (CypherParser.REQUIRED - 150)) | (1 << (CypherParser.STATUS - 150)) | (1 << (CypherParser.ACTIVE - 150)) | (1 << (CypherParser.SUSPENDED - 150)) | (1 << (CypherParser.ALTER - 150)) | (1 << (CypherParser.CURRENT - 150)) | (1 << (CypherParser.TO - 150)) | (1 << (CypherParser.PRIVILEGES - 150)) | (1 << (CypherParser.GRANT - 150)) | (1 << (CypherParser.DENY - 150)) | (1 << (CypherParser.REVOKE - 150)) | (1 << (CypherParser.RELATIONSHIPS - 150)) | (1 << (CypherParser.NODES - 150)) | (1 << (CypherParser.ELEMENT - 150)) | (1 << (CypherParser.ELEMENTS - 150)) | (1 << (CypherParser.COPY - 150)) | (1 << (CypherParser.OF - 150)) | (1 << (CypherParser.TRAVERSE - 150)) | (1 << (CypherParser.READ - 150)) | (1 << (CypherParser.WRITE - 150)) | (1 << (CypherParser.ACCESS - 150)) | (1 << (CypherParser.INDEXES - 150)) | (1 << (CypherParser.MANAGEMENT - 150)) | (1 << (CypherParser.NEW - 150)) | (1 << (CypherParser.LABEL - 150)) | (1 << (CypherParser.LABELS - 150)) | (1 << (CypherParser.NAME - 150)) | (1 << (CypherParser.NAMES - 150)) | (1 << (CypherParser.TYPE - 150)) | (1 << (CypherParser.TYPES - 150)) | (1 << (CypherParser.PROPERTY - 150)) | (1 << (CypherParser.CONSTRAINTS - 150)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (CypherParser.ASSIGN - 182)) | (1 << (CypherParser.BTREE - 182)) | (1 << (CypherParser.EXIST - 182)) | (1 << (CypherParser.FOR - 182)) | (1 << (CypherParser.OPTIONS - 182)) | (1 << (CypherParser.EXECUTE - 182)) | (1 << (CypherParser.DEFINED - 182)) | (1 << (CypherParser.FUNCTION - 182)) | (1 << (CypherParser.FUNCTIONS - 182)) | (1 << (CypherParser.BOOSTED - 182)) | (1 << (CypherParser.PROCEDURE - 182)) | (1 << (CypherParser.PROCEDURES - 182)) | (1 << (CypherParser.ADMIN - 182)) | (1 << (CypherParser.ADMINISTRATOR - 182)) | (1 << (CypherParser.BRIEF - 182)) | (1 << (CypherParser.VERBOSE - 182)) | (1 << (CypherParser.OUTPUT - 182)) | (1 << (CypherParser.BUILT - 182)) | (1 << (CypherParser.EACH - 182)) | (1 << (CypherParser.EXECUTABLE - 182)) | (1 << (CypherParser.EXISTENCE - 182)) | (1 << (CypherParser.FULLTEXT - 182)) | (1 << (CypherParser.HOME - 182)) | (1 << (CypherParser.LOOKUP - 182)) | (1 << (CypherParser.RENAME - 182)) | (1 << (CypherParser.HexLetter - 182)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
            this.state = 3322;
            this.mapProjectionVariants();
        }

        this.state = 3335;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,481,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3326;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3325;
                    this.match(CypherParser.SP);
                }

                this.state = 3328;
                this.match(CypherParser.T__14);
                this.state = 3330;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3329;
                    this.match(CypherParser.SP);
                }

                this.state = 3332;
                this.mapProjectionVariants(); 
            }
            this.state = 3337;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,481,this._ctx);
        }

        this.state = 3339;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3338;
            this.match(CypherParser.SP);
        }

        this.state = 3341;
        this.match(CypherParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapProjectionVariantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_mapProjectionVariants;
    return this;
}

MapProjectionVariantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapProjectionVariantsContext.prototype.constructor = MapProjectionVariantsContext;

MapProjectionVariantsContext.prototype.literalEntry = function() {
    return this.getTypedRuleContext(LiteralEntryContext,0);
};

MapProjectionVariantsContext.prototype.propertySelector = function() {
    return this.getTypedRuleContext(PropertySelectorContext,0);
};

MapProjectionVariantsContext.prototype.variableSelector = function() {
    return this.getTypedRuleContext(VariableSelectorContext,0);
};

MapProjectionVariantsContext.prototype.allPropertiesSelector = function() {
    return this.getTypedRuleContext(AllPropertiesSelectorContext,0);
};

MapProjectionVariantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterMapProjectionVariants(this);
	}
};

MapProjectionVariantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitMapProjectionVariants(this);
	}
};




CypherParser.MapProjectionVariantsContext = MapProjectionVariantsContext;

CypherParser.prototype.mapProjectionVariants = function() {

    var localctx = new MapProjectionVariantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, CypherParser.RULE_mapProjectionVariants);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3343;
            this.literalEntry();
            break;

        case 2:
            this.state = 3344;
            this.propertySelector();
            break;

        case 3:
            this.state = 3345;
            this.variableSelector();
            break;

        case 4:
            this.state = 3346;
            this.allPropertiesSelector();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralEntryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_literalEntry;
    return this;
}

LiteralEntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralEntryContext.prototype.constructor = LiteralEntryContext;

LiteralEntryContext.prototype.propertyKeyName = function() {
    return this.getTypedRuleContext(PropertyKeyNameContext,0);
};

LiteralEntryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LiteralEntryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LiteralEntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLiteralEntry(this);
	}
};

LiteralEntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLiteralEntry(this);
	}
};




CypherParser.LiteralEntryContext = LiteralEntryContext;

CypherParser.prototype.literalEntry = function() {

    var localctx = new LiteralEntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, CypherParser.RULE_literalEntry);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3349;
        this.propertyKeyName();
        this.state = 3351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3350;
            this.match(CypherParser.SP);
        }

        this.state = 3353;
        this.match(CypherParser.T__1);
        this.state = 3355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3354;
            this.match(CypherParser.SP);
        }

        this.state = 3357;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertySelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertySelector;
    return this;
}

PropertySelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySelectorContext.prototype.constructor = PropertySelectorContext;

PropertySelectorContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

PropertySelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertySelector(this);
	}
};

PropertySelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertySelector(this);
	}
};




CypherParser.PropertySelectorContext = PropertySelectorContext;

CypherParser.prototype.propertySelector = function() {

    var localctx = new PropertySelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, CypherParser.RULE_propertySelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3359;
        this.match(CypherParser.T__6);
        this.state = 3360;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_variableSelector;
    return this;
}

VariableSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableSelectorContext.prototype.constructor = VariableSelectorContext;

VariableSelectorContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

VariableSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterVariableSelector(this);
	}
};

VariableSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitVariableSelector(this);
	}
};




CypherParser.VariableSelectorContext = VariableSelectorContext;

CypherParser.prototype.variableSelector = function() {

    var localctx = new VariableSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, CypherParser.RULE_variableSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3362;
        this.variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AllPropertiesSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_allPropertiesSelector;
    return this;
}

AllPropertiesSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllPropertiesSelectorContext.prototype.constructor = AllPropertiesSelectorContext;


AllPropertiesSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterAllPropertiesSelector(this);
	}
};

AllPropertiesSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitAllPropertiesSelector(this);
	}
};




CypherParser.AllPropertiesSelectorContext = AllPropertiesSelectorContext;

CypherParser.prototype.allPropertiesSelector = function() {

    var localctx = new AllPropertiesSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, CypherParser.RULE_allPropertiesSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3364;
        this.match(CypherParser.T__6);
        this.state = 3365;
        this.match(CypherParser.T__18);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.legacyParameter = function() {
    return this.getTypedRuleContext(LegacyParameterContext,0);
};

ParameterContext.prototype.newParameter = function() {
    return this.getTypedRuleContext(NewParameterContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitParameter(this);
	}
};




CypherParser.ParameterContext = ParameterContext;

CypherParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, CypherParser.RULE_parameter);
    try {
        this.state = 3369;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__13:
            this.enterOuterAlt(localctx, 1);
            this.state = 3367;
            this.legacyParameter();
            break;
        case CypherParser.T__33:
            this.enterOuterAlt(localctx, 2);
            this.state = 3368;
            this.newParameter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LegacyParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_legacyParameter;
    return this;
}

LegacyParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LegacyParameterContext.prototype.constructor = LegacyParameterContext;

LegacyParameterContext.prototype.parameterName = function() {
    return this.getTypedRuleContext(ParameterNameContext,0);
};

LegacyParameterContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


LegacyParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLegacyParameter(this);
	}
};

LegacyParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLegacyParameter(this);
	}
};




CypherParser.LegacyParameterContext = LegacyParameterContext;

CypherParser.prototype.legacyParameter = function() {

    var localctx = new LegacyParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, CypherParser.RULE_legacyParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3371;
        this.match(CypherParser.T__13);
        this.state = 3373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3372;
            this.match(CypherParser.SP);
        }

        this.state = 3375;
        this.parameterName();
        this.state = 3377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 3376;
            this.match(CypherParser.SP);
        }

        this.state = 3379;
        this.match(CypherParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_newParameter;
    return this;
}

NewParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewParameterContext.prototype.constructor = NewParameterContext;

NewParameterContext.prototype.parameterName = function() {
    return this.getTypedRuleContext(ParameterNameContext,0);
};

NewParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNewParameter(this);
	}
};

NewParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNewParameter(this);
	}
};




CypherParser.NewParameterContext = NewParameterContext;

CypherParser.prototype.newParameter = function() {

    var localctx = new NewParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, CypherParser.RULE_newParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3381;
        this.match(CypherParser.T__33);
        this.state = 3382;
        this.parameterName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_parameterName;
    return this;
}

ParameterNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterNameContext.prototype.constructor = ParameterNameContext;

ParameterNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

ParameterNameContext.prototype.DecimalInteger = function() {
    return this.getToken(CypherParser.DecimalInteger, 0);
};

ParameterNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterParameterName(this);
	}
};

ParameterNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitParameterName(this);
	}
};




CypherParser.ParameterNameContext = ParameterNameContext;

CypherParser.prototype.parameterName = function() {

    var localctx = new ParameterNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, CypherParser.RULE_parameterName);
    try {
        this.state = 3386;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.PERIODIC:
        case CypherParser.COMMIT:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.INDEX:
        case CypherParser.ON:
        case CypherParser.CONSTRAINT:
        case CypherParser.ASSERT:
        case CypherParser.IS:
        case CypherParser.UNIQUE:
        case CypherParser.EXISTS:
        case CypherParser.LOAD:
        case CypherParser.CSV:
        case CypherParser.WITH:
        case CypherParser.HEADERS:
        case CypherParser.FROM:
        case CypherParser.AS:
        case CypherParser.FIELDTERMINATOR:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.IN:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.JOIN:
        case CypherParser.SCAN:
        case CypherParser.START:
        case CypherParser.NODE:
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
        case CypherParser.WHERE:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.REDUCE:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CALL:
        case CypherParser.YIELD:
        case CypherParser.KEY:
        case CypherParser.CATALOG:
        case CypherParser.SHOW:
        case CypherParser.DEFAULT:
        case CypherParser.DBMS:
        case CypherParser.DATABASE:
        case CypherParser.DATABASES:
        case CypherParser.GRAPH:
        case CypherParser.GRAPHS:
        case CypherParser.REPLACE:
        case CypherParser.IF:
        case CypherParser.STOP:
        case CypherParser.ROLE:
        case CypherParser.ROLES:
        case CypherParser.USER:
        case CypherParser.USERS:
        case CypherParser.POPULATED:
        case CypherParser.PASSWORD:
        case CypherParser.CHANGE:
        case CypherParser.REQUIRED:
        case CypherParser.STATUS:
        case CypherParser.ACTIVE:
        case CypherParser.SUSPENDED:
        case CypherParser.ALTER:
        case CypherParser.CURRENT:
        case CypherParser.TO:
        case CypherParser.PRIVILEGES:
        case CypherParser.GRANT:
        case CypherParser.DENY:
        case CypherParser.REVOKE:
        case CypherParser.RELATIONSHIPS:
        case CypherParser.NODES:
        case CypherParser.ELEMENT:
        case CypherParser.ELEMENTS:
        case CypherParser.COPY:
        case CypherParser.OF:
        case CypherParser.TRAVERSE:
        case CypherParser.READ:
        case CypherParser.WRITE:
        case CypherParser.ACCESS:
        case CypherParser.INDEXES:
        case CypherParser.MANAGEMENT:
        case CypherParser.NEW:
        case CypherParser.LABEL:
        case CypherParser.LABELS:
        case CypherParser.NAME:
        case CypherParser.NAMES:
        case CypherParser.TYPE:
        case CypherParser.TYPES:
        case CypherParser.PROPERTY:
        case CypherParser.CONSTRAINTS:
        case CypherParser.ASSIGN:
        case CypherParser.BTREE:
        case CypherParser.EXIST:
        case CypherParser.FOR:
        case CypherParser.OPTIONS:
        case CypherParser.EXECUTE:
        case CypherParser.DEFINED:
        case CypherParser.FUNCTION:
        case CypherParser.FUNCTIONS:
        case CypherParser.BOOSTED:
        case CypherParser.PROCEDURE:
        case CypherParser.PROCEDURES:
        case CypherParser.ADMIN:
        case CypherParser.ADMINISTRATOR:
        case CypherParser.BRIEF:
        case CypherParser.VERBOSE:
        case CypherParser.OUTPUT:
        case CypherParser.BUILT:
        case CypherParser.EACH:
        case CypherParser.EXECUTABLE:
        case CypherParser.EXISTENCE:
        case CypherParser.FULLTEXT:
        case CypherParser.HOME:
        case CypherParser.LOOKUP:
        case CypherParser.RENAME:
        case CypherParser.HexLetter:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 1);
            this.state = 3384;
            this.symbolicName();
            break;
        case CypherParser.DecimalInteger:
            this.enterOuterAlt(localctx, 2);
            this.state = 3385;
            this.match(CypherParser.DecimalInteger);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyExpressions;
    return this;
}

PropertyExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyExpressionsContext.prototype.constructor = PropertyExpressionsContext;

PropertyExpressionsContext.prototype.propertyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyExpressionContext);
    } else {
        return this.getTypedRuleContext(PropertyExpressionContext,i);
    }
};

PropertyExpressionsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyExpressions(this);
	}
};

PropertyExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyExpressions(this);
	}
};




CypherParser.PropertyExpressionsContext = PropertyExpressionsContext;

CypherParser.prototype.propertyExpressions = function() {

    var localctx = new PropertyExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, CypherParser.RULE_propertyExpressions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3388;
        this.propertyExpression();
        this.state = 3399;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,492,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3390;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3389;
                    this.match(CypherParser.SP);
                }

                this.state = 3392;
                this.match(CypherParser.T__14);
                this.state = 3394;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3393;
                    this.match(CypherParser.SP);
                }

                this.state = 3396;
                this.propertyExpression(); 
            }
            this.state = 3401;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,492,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyExpression;
    return this;
}

PropertyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyExpressionContext.prototype.constructor = PropertyExpressionContext;

PropertyExpressionContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

PropertyExpressionContext.prototype.propertyLookup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyLookupContext);
    } else {
        return this.getTypedRuleContext(PropertyLookupContext,i);
    }
};

PropertyExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyExpression(this);
	}
};

PropertyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyExpression(this);
	}
};




CypherParser.PropertyExpressionContext = PropertyExpressionContext;

CypherParser.prototype.propertyExpression = function() {

    var localctx = new PropertyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, CypherParser.RULE_propertyExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3402;
        this.atom();
        this.state = 3407; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 3404;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===CypherParser.SP) {
        		    this.state = 3403;
        		    this.match(CypherParser.SP);
        		}

        		this.state = 3406;
        		this.propertyLookup();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 3409; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,494, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyKeysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyKeys;
    return this;
}

PropertyKeysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyKeysContext.prototype.constructor = PropertyKeysContext;

PropertyKeysContext.prototype.propertyKeyName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyKeyNameContext);
    } else {
        return this.getTypedRuleContext(PropertyKeyNameContext,i);
    }
};

PropertyKeysContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


PropertyKeysContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyKeys(this);
	}
};

PropertyKeysContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyKeys(this);
	}
};




CypherParser.PropertyKeysContext = PropertyKeysContext;

CypherParser.prototype.propertyKeys = function() {

    var localctx = new PropertyKeysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, CypherParser.RULE_propertyKeys);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3411;
        this.propertyKeyName();
        this.state = 3422;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,497,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3413;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3412;
                    this.match(CypherParser.SP);
                }

                this.state = 3415;
                this.match(CypherParser.T__14);
                this.state = 3417;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 3416;
                    this.match(CypherParser.SP);
                }

                this.state = 3419;
                this.propertyKeyName(); 
            }
            this.state = 3424;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,497,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyKeyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_propertyKeyName;
    return this;
}

PropertyKeyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyKeyNameContext.prototype.constructor = PropertyKeyNameContext;

PropertyKeyNameContext.prototype.symbolicName = function() {
    return this.getTypedRuleContext(SymbolicNameContext,0);
};

PropertyKeyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterPropertyKeyName(this);
	}
};

PropertyKeyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitPropertyKeyName(this);
	}
};




CypherParser.PropertyKeyNameContext = PropertyKeyNameContext;

CypherParser.prototype.propertyKeyName = function() {

    var localctx = new PropertyKeyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, CypherParser.RULE_propertyKeyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3425;
        this.symbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_integerLiteral;
    return this;
}

IntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

IntegerLiteralContext.prototype.HexInteger = function() {
    return this.getToken(CypherParser.HexInteger, 0);
};

IntegerLiteralContext.prototype.OctalInteger = function() {
    return this.getToken(CypherParser.OctalInteger, 0);
};

IntegerLiteralContext.prototype.DecimalInteger = function() {
    return this.getToken(CypherParser.DecimalInteger, 0);
};

IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitIntegerLiteral(this);
	}
};




CypherParser.IntegerLiteralContext = IntegerLiteralContext;

CypherParser.prototype.integerLiteral = function() {

    var localctx = new IntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, CypherParser.RULE_integerLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3427;
        _la = this._input.LA(1);
        if(!(((((_la - 210)) & ~0x1f) == 0 && ((1 << (_la - 210)) & ((1 << (CypherParser.HexInteger - 210)) | (1 << (CypherParser.DecimalInteger - 210)) | (1 << (CypherParser.OctalInteger - 210)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoubleLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_doubleLiteral;
    return this;
}

DoubleLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoubleLiteralContext.prototype.constructor = DoubleLiteralContext;

DoubleLiteralContext.prototype.ExponentDecimalReal = function() {
    return this.getToken(CypherParser.ExponentDecimalReal, 0);
};

DoubleLiteralContext.prototype.RegularDecimalReal = function() {
    return this.getToken(CypherParser.RegularDecimalReal, 0);
};

DoubleLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDoubleLiteral(this);
	}
};

DoubleLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDoubleLiteral(this);
	}
};




CypherParser.DoubleLiteralContext = DoubleLiteralContext;

CypherParser.prototype.doubleLiteral = function() {

    var localctx = new DoubleLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, CypherParser.RULE_doubleLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3429;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.ExponentDecimalReal || _la===CypherParser.RegularDecimalReal)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_namespace;
    return this;
}

NamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceContext.prototype.constructor = NamespaceContext;

NamespaceContext.prototype.symbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(SymbolicNameContext,i);
    }
};

NamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterNamespace(this);
	}
};

NamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitNamespace(this);
	}
};




CypherParser.NamespaceContext = NamespaceContext;

CypherParser.prototype.namespace = function() {

    var localctx = new NamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, CypherParser.RULE_namespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3436;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,498,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3431;
                this.symbolicName();
                this.state = 3432;
                this.match(CypherParser.T__6); 
            }
            this.state = 3438;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,498,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_leftArrowHead;
    return this;
}

LeftArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftArrowHeadContext.prototype.constructor = LeftArrowHeadContext;


LeftArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterLeftArrowHead(this);
	}
};

LeftArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitLeftArrowHead(this);
	}
};




CypherParser.LeftArrowHeadContext = LeftArrowHeadContext;

CypherParser.prototype.leftArrowHead = function() {

    var localctx = new LeftArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, CypherParser.RULE_leftArrowHead);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3439;
        _la = this._input.LA(1);
        if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.T__29 - 30)) | (1 << (CypherParser.T__34 - 30)) | (1 << (CypherParser.T__35 - 30)) | (1 << (CypherParser.T__36 - 30)) | (1 << (CypherParser.T__37 - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_rightArrowHead;
    return this;
}

RightArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightArrowHeadContext.prototype.constructor = RightArrowHeadContext;


RightArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterRightArrowHead(this);
	}
};

RightArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitRightArrowHead(this);
	}
};




CypherParser.RightArrowHeadContext = RightArrowHeadContext;

CypherParser.prototype.rightArrowHead = function() {

    var localctx = new RightArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, CypherParser.RULE_rightArrowHead);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3441;
        _la = this._input.LA(1);
        if(!(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CypherParser.T__30 - 31)) | (1 << (CypherParser.T__38 - 31)) | (1 << (CypherParser.T__39 - 31)) | (1 << (CypherParser.T__40 - 31)) | (1 << (CypherParser.T__41 - 31)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DashContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_dash;
    return this;
}

DashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DashContext.prototype.constructor = DashContext;


DashContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterDash(this);
	}
};

DashContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitDash(this);
	}
};




CypherParser.DashContext = DashContext;

CypherParser.prototype.dash = function() {

    var localctx = new DashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, CypherParser.RULE_dash);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3443;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.T__2 || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (CypherParser.T__42 - 43)) | (1 << (CypherParser.T__43 - 43)) | (1 << (CypherParser.T__44 - 43)) | (1 << (CypherParser.T__45 - 43)) | (1 << (CypherParser.T__46 - 43)) | (1 << (CypherParser.T__47 - 43)) | (1 << (CypherParser.T__48 - 43)) | (1 << (CypherParser.T__49 - 43)) | (1 << (CypherParser.T__50 - 43)) | (1 << (CypherParser.T__51 - 43)) | (1 << (CypherParser.T__52 - 43)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SymbolicNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_symbolicName;
    return this;
}

SymbolicNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolicNameContext.prototype.constructor = SymbolicNameContext;

SymbolicNameContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

SymbolicNameContext.prototype.UnescapedSymbolicName = function() {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
};

SymbolicNameContext.prototype.EscapedSymbolicName = function() {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
};

SymbolicNameContext.prototype.HexLetter = function() {
    return this.getToken(CypherParser.HexLetter, 0);
};

SymbolicNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterSymbolicName(this);
	}
};

SymbolicNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitSymbolicName(this);
	}
};




CypherParser.SymbolicNameContext = SymbolicNameContext;

CypherParser.prototype.symbolicName = function() {

    var localctx = new SymbolicNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, CypherParser.RULE_symbolicName);
    try {
        this.state = 3449;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CYPHER:
        case CypherParser.EXPLAIN:
        case CypherParser.PROFILE:
        case CypherParser.USING:
        case CypherParser.PERIODIC:
        case CypherParser.COMMIT:
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.CREATE:
        case CypherParser.DROP:
        case CypherParser.INDEX:
        case CypherParser.ON:
        case CypherParser.CONSTRAINT:
        case CypherParser.ASSERT:
        case CypherParser.IS:
        case CypherParser.UNIQUE:
        case CypherParser.EXISTS:
        case CypherParser.LOAD:
        case CypherParser.CSV:
        case CypherParser.WITH:
        case CypherParser.HEADERS:
        case CypherParser.FROM:
        case CypherParser.AS:
        case CypherParser.FIELDTERMINATOR:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.MERGE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.FOREACH:
        case CypherParser.IN:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.JOIN:
        case CypherParser.SCAN:
        case CypherParser.START:
        case CypherParser.NODE:
        case CypherParser.RELATIONSHIP:
        case CypherParser.REL:
        case CypherParser.WHERE:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.REDUCE:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CALL:
        case CypherParser.YIELD:
        case CypherParser.KEY:
        case CypherParser.CATALOG:
        case CypherParser.SHOW:
        case CypherParser.DEFAULT:
        case CypherParser.DBMS:
        case CypherParser.DATABASE:
        case CypherParser.DATABASES:
        case CypherParser.GRAPH:
        case CypherParser.GRAPHS:
        case CypherParser.REPLACE:
        case CypherParser.IF:
        case CypherParser.STOP:
        case CypherParser.ROLE:
        case CypherParser.ROLES:
        case CypherParser.USER:
        case CypherParser.USERS:
        case CypherParser.POPULATED:
        case CypherParser.PASSWORD:
        case CypherParser.CHANGE:
        case CypherParser.REQUIRED:
        case CypherParser.STATUS:
        case CypherParser.ACTIVE:
        case CypherParser.SUSPENDED:
        case CypherParser.ALTER:
        case CypherParser.CURRENT:
        case CypherParser.TO:
        case CypherParser.PRIVILEGES:
        case CypherParser.GRANT:
        case CypherParser.DENY:
        case CypherParser.REVOKE:
        case CypherParser.RELATIONSHIPS:
        case CypherParser.NODES:
        case CypherParser.ELEMENT:
        case CypherParser.ELEMENTS:
        case CypherParser.COPY:
        case CypherParser.OF:
        case CypherParser.TRAVERSE:
        case CypherParser.READ:
        case CypherParser.WRITE:
        case CypherParser.ACCESS:
        case CypherParser.INDEXES:
        case CypherParser.MANAGEMENT:
        case CypherParser.NEW:
        case CypherParser.LABEL:
        case CypherParser.LABELS:
        case CypherParser.NAME:
        case CypherParser.NAMES:
        case CypherParser.TYPE:
        case CypherParser.TYPES:
        case CypherParser.PROPERTY:
        case CypherParser.CONSTRAINTS:
        case CypherParser.ASSIGN:
        case CypherParser.BTREE:
        case CypherParser.EXIST:
        case CypherParser.FOR:
        case CypherParser.OPTIONS:
        case CypherParser.EXECUTE:
        case CypherParser.DEFINED:
        case CypherParser.FUNCTION:
        case CypherParser.FUNCTIONS:
        case CypherParser.BOOSTED:
        case CypherParser.PROCEDURE:
        case CypherParser.PROCEDURES:
        case CypherParser.ADMIN:
        case CypherParser.ADMINISTRATOR:
        case CypherParser.BRIEF:
        case CypherParser.VERBOSE:
        case CypherParser.OUTPUT:
        case CypherParser.BUILT:
        case CypherParser.EACH:
        case CypherParser.EXECUTABLE:
        case CypherParser.EXISTENCE:
        case CypherParser.FULLTEXT:
        case CypherParser.HOME:
        case CypherParser.LOOKUP:
        case CypherParser.RENAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 3445;
            this.keyword();
            break;
        case CypherParser.UnescapedSymbolicName:
            this.enterOuterAlt(localctx, 2);
            this.state = 3446;
            this.match(CypherParser.UnescapedSymbolicName);
            break;
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 3);
            this.state = 3447;
            this.match(CypherParser.EscapedSymbolicName);
            break;
        case CypherParser.HexLetter:
            this.enterOuterAlt(localctx, 4);
            this.state = 3448;
            this.match(CypherParser.HexLetter);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.CYPHER = function() {
    return this.getToken(CypherParser.CYPHER, 0);
};

KeywordContext.prototype.EXPLAIN = function() {
    return this.getToken(CypherParser.EXPLAIN, 0);
};

KeywordContext.prototype.PROFILE = function() {
    return this.getToken(CypherParser.PROFILE, 0);
};

KeywordContext.prototype.USING = function() {
    return this.getToken(CypherParser.USING, 0);
};

KeywordContext.prototype.PERIODIC = function() {
    return this.getToken(CypherParser.PERIODIC, 0);
};

KeywordContext.prototype.COMMIT = function() {
    return this.getToken(CypherParser.COMMIT, 0);
};

KeywordContext.prototype.UNION = function() {
    return this.getToken(CypherParser.UNION, 0);
};

KeywordContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

KeywordContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

KeywordContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

KeywordContext.prototype.INDEX = function() {
    return this.getToken(CypherParser.INDEX, 0);
};

KeywordContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

KeywordContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

KeywordContext.prototype.ASSERT = function() {
    return this.getToken(CypherParser.ASSERT, 0);
};

KeywordContext.prototype.IS = function() {
    return this.getToken(CypherParser.IS, 0);
};

KeywordContext.prototype.UNIQUE = function() {
    return this.getToken(CypherParser.UNIQUE, 0);
};

KeywordContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

KeywordContext.prototype.LOAD = function() {
    return this.getToken(CypherParser.LOAD, 0);
};

KeywordContext.prototype.CSV = function() {
    return this.getToken(CypherParser.CSV, 0);
};

KeywordContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

KeywordContext.prototype.HEADERS = function() {
    return this.getToken(CypherParser.HEADERS, 0);
};

KeywordContext.prototype.FROM = function() {
    return this.getToken(CypherParser.FROM, 0);
};

KeywordContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

KeywordContext.prototype.FIELDTERMINATOR = function() {
    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
};

KeywordContext.prototype.OPTIONAL = function() {
    return this.getToken(CypherParser.OPTIONAL, 0);
};

KeywordContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

KeywordContext.prototype.UNWIND = function() {
    return this.getToken(CypherParser.UNWIND, 0);
};

KeywordContext.prototype.MERGE = function() {
    return this.getToken(CypherParser.MERGE, 0);
};

KeywordContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

KeywordContext.prototype.DETACH = function() {
    return this.getToken(CypherParser.DETACH, 0);
};

KeywordContext.prototype.DELETE = function() {
    return this.getToken(CypherParser.DELETE, 0);
};

KeywordContext.prototype.REMOVE = function() {
    return this.getToken(CypherParser.REMOVE, 0);
};

KeywordContext.prototype.FOREACH = function() {
    return this.getToken(CypherParser.FOREACH, 0);
};

KeywordContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

KeywordContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

KeywordContext.prototype.RETURN = function() {
    return this.getToken(CypherParser.RETURN, 0);
};

KeywordContext.prototype.ORDER = function() {
    return this.getToken(CypherParser.ORDER, 0);
};

KeywordContext.prototype.BY = function() {
    return this.getToken(CypherParser.BY, 0);
};

KeywordContext.prototype.L_SKIP = function() {
    return this.getToken(CypherParser.L_SKIP, 0);
};

KeywordContext.prototype.LIMIT = function() {
    return this.getToken(CypherParser.LIMIT, 0);
};

KeywordContext.prototype.ASCENDING = function() {
    return this.getToken(CypherParser.ASCENDING, 0);
};

KeywordContext.prototype.ASC = function() {
    return this.getToken(CypherParser.ASC, 0);
};

KeywordContext.prototype.DESCENDING = function() {
    return this.getToken(CypherParser.DESCENDING, 0);
};

KeywordContext.prototype.DESC = function() {
    return this.getToken(CypherParser.DESC, 0);
};

KeywordContext.prototype.JOIN = function() {
    return this.getToken(CypherParser.JOIN, 0);
};

KeywordContext.prototype.SCAN = function() {
    return this.getToken(CypherParser.SCAN, 0);
};

KeywordContext.prototype.START = function() {
    return this.getToken(CypherParser.START, 0);
};

KeywordContext.prototype.NODE = function() {
    return this.getToken(CypherParser.NODE, 0);
};

KeywordContext.prototype.RELATIONSHIP = function() {
    return this.getToken(CypherParser.RELATIONSHIP, 0);
};

KeywordContext.prototype.REL = function() {
    return this.getToken(CypherParser.REL, 0);
};

KeywordContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

KeywordContext.prototype.SHORTESTPATH = function() {
    return this.getToken(CypherParser.SHORTESTPATH, 0);
};

KeywordContext.prototype.ALLSHORTESTPATHS = function() {
    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
};

KeywordContext.prototype.OR = function() {
    return this.getToken(CypherParser.OR, 0);
};

KeywordContext.prototype.XOR = function() {
    return this.getToken(CypherParser.XOR, 0);
};

KeywordContext.prototype.AND = function() {
    return this.getToken(CypherParser.AND, 0);
};

KeywordContext.prototype.NOT = function() {
    return this.getToken(CypherParser.NOT, 0);
};

KeywordContext.prototype.STARTS = function() {
    return this.getToken(CypherParser.STARTS, 0);
};

KeywordContext.prototype.ENDS = function() {
    return this.getToken(CypherParser.ENDS, 0);
};

KeywordContext.prototype.CONTAINS = function() {
    return this.getToken(CypherParser.CONTAINS, 0);
};

KeywordContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

KeywordContext.prototype.COUNT = function() {
    return this.getToken(CypherParser.COUNT, 0);
};

KeywordContext.prototype.FILTER = function() {
    return this.getToken(CypherParser.FILTER, 0);
};

KeywordContext.prototype.EXTRACT = function() {
    return this.getToken(CypherParser.EXTRACT, 0);
};

KeywordContext.prototype.ANY = function() {
    return this.getToken(CypherParser.ANY, 0);
};

KeywordContext.prototype.NONE = function() {
    return this.getToken(CypherParser.NONE, 0);
};

KeywordContext.prototype.SINGLE = function() {
    return this.getToken(CypherParser.SINGLE, 0);
};

KeywordContext.prototype.TRUE = function() {
    return this.getToken(CypherParser.TRUE, 0);
};

KeywordContext.prototype.FALSE = function() {
    return this.getToken(CypherParser.FALSE, 0);
};

KeywordContext.prototype.REDUCE = function() {
    return this.getToken(CypherParser.REDUCE, 0);
};

KeywordContext.prototype.CASE = function() {
    return this.getToken(CypherParser.CASE, 0);
};

KeywordContext.prototype.ELSE = function() {
    return this.getToken(CypherParser.ELSE, 0);
};

KeywordContext.prototype.END = function() {
    return this.getToken(CypherParser.END, 0);
};

KeywordContext.prototype.WHEN = function() {
    return this.getToken(CypherParser.WHEN, 0);
};

KeywordContext.prototype.THEN = function() {
    return this.getToken(CypherParser.THEN, 0);
};

KeywordContext.prototype.CALL = function() {
    return this.getToken(CypherParser.CALL, 0);
};

KeywordContext.prototype.YIELD = function() {
    return this.getToken(CypherParser.YIELD, 0);
};

KeywordContext.prototype.KEY = function() {
    return this.getToken(CypherParser.KEY, 0);
};

KeywordContext.prototype.CATALOG = function() {
    return this.getToken(CypherParser.CATALOG, 0);
};

KeywordContext.prototype.SHOW = function() {
    return this.getToken(CypherParser.SHOW, 0);
};

KeywordContext.prototype.DEFAULT = function() {
    return this.getToken(CypherParser.DEFAULT, 0);
};

KeywordContext.prototype.DBMS = function() {
    return this.getToken(CypherParser.DBMS, 0);
};

KeywordContext.prototype.DATABASE = function() {
    return this.getToken(CypherParser.DATABASE, 0);
};

KeywordContext.prototype.DATABASES = function() {
    return this.getToken(CypherParser.DATABASES, 0);
};

KeywordContext.prototype.GRAPH = function() {
    return this.getToken(CypherParser.GRAPH, 0);
};

KeywordContext.prototype.GRAPHS = function() {
    return this.getToken(CypherParser.GRAPHS, 0);
};

KeywordContext.prototype.REPLACE = function() {
    return this.getToken(CypherParser.REPLACE, 0);
};

KeywordContext.prototype.IF = function() {
    return this.getToken(CypherParser.IF, 0);
};

KeywordContext.prototype.STOP = function() {
    return this.getToken(CypherParser.STOP, 0);
};

KeywordContext.prototype.ROLE = function() {
    return this.getToken(CypherParser.ROLE, 0);
};

KeywordContext.prototype.ROLES = function() {
    return this.getToken(CypherParser.ROLES, 0);
};

KeywordContext.prototype.USER = function() {
    return this.getToken(CypherParser.USER, 0);
};

KeywordContext.prototype.USERS = function() {
    return this.getToken(CypherParser.USERS, 0);
};

KeywordContext.prototype.POPULATED = function() {
    return this.getToken(CypherParser.POPULATED, 0);
};

KeywordContext.prototype.PASSWORD = function() {
    return this.getToken(CypherParser.PASSWORD, 0);
};

KeywordContext.prototype.CHANGE = function() {
    return this.getToken(CypherParser.CHANGE, 0);
};

KeywordContext.prototype.REQUIRED = function() {
    return this.getToken(CypherParser.REQUIRED, 0);
};

KeywordContext.prototype.STATUS = function() {
    return this.getToken(CypherParser.STATUS, 0);
};

KeywordContext.prototype.ACTIVE = function() {
    return this.getToken(CypherParser.ACTIVE, 0);
};

KeywordContext.prototype.SUSPENDED = function() {
    return this.getToken(CypherParser.SUSPENDED, 0);
};

KeywordContext.prototype.ALTER = function() {
    return this.getToken(CypherParser.ALTER, 0);
};

KeywordContext.prototype.CURRENT = function() {
    return this.getToken(CypherParser.CURRENT, 0);
};

KeywordContext.prototype.TO = function() {
    return this.getToken(CypherParser.TO, 0);
};

KeywordContext.prototype.PRIVILEGES = function() {
    return this.getToken(CypherParser.PRIVILEGES, 0);
};

KeywordContext.prototype.GRANT = function() {
    return this.getToken(CypherParser.GRANT, 0);
};

KeywordContext.prototype.DENY = function() {
    return this.getToken(CypherParser.DENY, 0);
};

KeywordContext.prototype.REVOKE = function() {
    return this.getToken(CypherParser.REVOKE, 0);
};

KeywordContext.prototype.RELATIONSHIPS = function() {
    return this.getToken(CypherParser.RELATIONSHIPS, 0);
};

KeywordContext.prototype.NODES = function() {
    return this.getToken(CypherParser.NODES, 0);
};

KeywordContext.prototype.ELEMENT = function() {
    return this.getToken(CypherParser.ELEMENT, 0);
};

KeywordContext.prototype.ELEMENTS = function() {
    return this.getToken(CypherParser.ELEMENTS, 0);
};

KeywordContext.prototype.COPY = function() {
    return this.getToken(CypherParser.COPY, 0);
};

KeywordContext.prototype.OF = function() {
    return this.getToken(CypherParser.OF, 0);
};

KeywordContext.prototype.TRAVERSE = function() {
    return this.getToken(CypherParser.TRAVERSE, 0);
};

KeywordContext.prototype.READ = function() {
    return this.getToken(CypherParser.READ, 0);
};

KeywordContext.prototype.WRITE = function() {
    return this.getToken(CypherParser.WRITE, 0);
};

KeywordContext.prototype.ACCESS = function() {
    return this.getToken(CypherParser.ACCESS, 0);
};

KeywordContext.prototype.INDEXES = function() {
    return this.getToken(CypherParser.INDEXES, 0);
};

KeywordContext.prototype.MANAGEMENT = function() {
    return this.getToken(CypherParser.MANAGEMENT, 0);
};

KeywordContext.prototype.NEW = function() {
    return this.getToken(CypherParser.NEW, 0);
};

KeywordContext.prototype.LABEL = function() {
    return this.getToken(CypherParser.LABEL, 0);
};

KeywordContext.prototype.LABELS = function() {
    return this.getToken(CypherParser.LABELS, 0);
};

KeywordContext.prototype.NAME = function() {
    return this.getToken(CypherParser.NAME, 0);
};

KeywordContext.prototype.NAMES = function() {
    return this.getToken(CypherParser.NAMES, 0);
};

KeywordContext.prototype.TYPE = function() {
    return this.getToken(CypherParser.TYPE, 0);
};

KeywordContext.prototype.TYPES = function() {
    return this.getToken(CypherParser.TYPES, 0);
};

KeywordContext.prototype.PROPERTY = function() {
    return this.getToken(CypherParser.PROPERTY, 0);
};

KeywordContext.prototype.CONSTRAINTS = function() {
    return this.getToken(CypherParser.CONSTRAINTS, 0);
};

KeywordContext.prototype.ASSIGN = function() {
    return this.getToken(CypherParser.ASSIGN, 0);
};

KeywordContext.prototype.BTREE = function() {
    return this.getToken(CypherParser.BTREE, 0);
};

KeywordContext.prototype.EXIST = function() {
    return this.getToken(CypherParser.EXIST, 0);
};

KeywordContext.prototype.FOR = function() {
    return this.getToken(CypherParser.FOR, 0);
};

KeywordContext.prototype.OPTIONS = function() {
    return this.getToken(CypherParser.OPTIONS, 0);
};

KeywordContext.prototype.EXECUTE = function() {
    return this.getToken(CypherParser.EXECUTE, 0);
};

KeywordContext.prototype.DEFINED = function() {
    return this.getToken(CypherParser.DEFINED, 0);
};

KeywordContext.prototype.FUNCTION = function() {
    return this.getToken(CypherParser.FUNCTION, 0);
};

KeywordContext.prototype.FUNCTIONS = function() {
    return this.getToken(CypherParser.FUNCTIONS, 0);
};

KeywordContext.prototype.BOOSTED = function() {
    return this.getToken(CypherParser.BOOSTED, 0);
};

KeywordContext.prototype.PROCEDURE = function() {
    return this.getToken(CypherParser.PROCEDURE, 0);
};

KeywordContext.prototype.PROCEDURES = function() {
    return this.getToken(CypherParser.PROCEDURES, 0);
};

KeywordContext.prototype.ADMIN = function() {
    return this.getToken(CypherParser.ADMIN, 0);
};

KeywordContext.prototype.ADMINISTRATOR = function() {
    return this.getToken(CypherParser.ADMINISTRATOR, 0);
};

KeywordContext.prototype.BRIEF = function() {
    return this.getToken(CypherParser.BRIEF, 0);
};

KeywordContext.prototype.VERBOSE = function() {
    return this.getToken(CypherParser.VERBOSE, 0);
};

KeywordContext.prototype.OUTPUT = function() {
    return this.getToken(CypherParser.OUTPUT, 0);
};

KeywordContext.prototype.BUILT = function() {
    return this.getToken(CypherParser.BUILT, 0);
};

KeywordContext.prototype.EACH = function() {
    return this.getToken(CypherParser.EACH, 0);
};

KeywordContext.prototype.EXECUTABLE = function() {
    return this.getToken(CypherParser.EXECUTABLE, 0);
};

KeywordContext.prototype.EXISTENCE = function() {
    return this.getToken(CypherParser.EXISTENCE, 0);
};

KeywordContext.prototype.FULLTEXT = function() {
    return this.getToken(CypherParser.FULLTEXT, 0);
};

KeywordContext.prototype.HOME = function() {
    return this.getToken(CypherParser.HOME, 0);
};

KeywordContext.prototype.LOOKUP = function() {
    return this.getToken(CypherParser.LOOKUP, 0);
};

KeywordContext.prototype.RENAME = function() {
    return this.getToken(CypherParser.RENAME, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitKeyword(this);
	}
};




CypherParser.KeywordContext = KeywordContext;

CypherParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, CypherParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3451;
        _la = this._input.LA(1);
        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.CYPHER - 54)) | (1 << (CypherParser.EXPLAIN - 54)) | (1 << (CypherParser.PROFILE - 54)) | (1 << (CypherParser.USING - 54)) | (1 << (CypherParser.PERIODIC - 54)) | (1 << (CypherParser.COMMIT - 54)) | (1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.INDEX - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.ASSERT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.LOAD - 54)) | (1 << (CypherParser.CSV - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.HEADERS - 54)) | (1 << (CypherParser.FROM - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.FIELDTERMINATOR - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.FOREACH - 86)) | (1 << (CypherParser.IN - 86)) | (1 << (CypherParser.DISTINCT - 86)) | (1 << (CypherParser.RETURN - 86)) | (1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.JOIN - 86)) | (1 << (CypherParser.SCAN - 86)) | (1 << (CypherParser.START - 86)) | (1 << (CypherParser.NODE - 86)) | (1 << (CypherParser.RELATIONSHIP - 86)) | (1 << (CypherParser.REL - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.SHORTESTPATH - 86)) | (1 << (CypherParser.ALLSHORTESTPATHS - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.COUNT - 86)) | (1 << (CypherParser.FILTER - 86)) | (1 << (CypherParser.EXTRACT - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.ANY - 118)) | (1 << (CypherParser.NONE - 118)) | (1 << (CypherParser.SINGLE - 118)) | (1 << (CypherParser.TRUE - 118)) | (1 << (CypherParser.FALSE - 118)) | (1 << (CypherParser.REDUCE - 118)) | (1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.CALL - 118)) | (1 << (CypherParser.YIELD - 118)) | (1 << (CypherParser.KEY - 118)) | (1 << (CypherParser.CATALOG - 118)) | (1 << (CypherParser.SHOW - 118)) | (1 << (CypherParser.DEFAULT - 118)) | (1 << (CypherParser.DBMS - 118)) | (1 << (CypherParser.DATABASE - 118)) | (1 << (CypherParser.DATABASES - 118)) | (1 << (CypherParser.GRAPH - 118)) | (1 << (CypherParser.GRAPHS - 118)) | (1 << (CypherParser.REPLACE - 118)) | (1 << (CypherParser.IF - 118)) | (1 << (CypherParser.STOP - 118)) | (1 << (CypherParser.ROLE - 118)) | (1 << (CypherParser.ROLES - 118)) | (1 << (CypherParser.USER - 118)) | (1 << (CypherParser.USERS - 118)) | (1 << (CypherParser.POPULATED - 118)) | (1 << (CypherParser.PASSWORD - 118)) | (1 << (CypherParser.CHANGE - 118)))) !== 0) || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (CypherParser.REQUIRED - 150)) | (1 << (CypherParser.STATUS - 150)) | (1 << (CypherParser.ACTIVE - 150)) | (1 << (CypherParser.SUSPENDED - 150)) | (1 << (CypherParser.ALTER - 150)) | (1 << (CypherParser.CURRENT - 150)) | (1 << (CypherParser.TO - 150)) | (1 << (CypherParser.PRIVILEGES - 150)) | (1 << (CypherParser.GRANT - 150)) | (1 << (CypherParser.DENY - 150)) | (1 << (CypherParser.REVOKE - 150)) | (1 << (CypherParser.RELATIONSHIPS - 150)) | (1 << (CypherParser.NODES - 150)) | (1 << (CypherParser.ELEMENT - 150)) | (1 << (CypherParser.ELEMENTS - 150)) | (1 << (CypherParser.COPY - 150)) | (1 << (CypherParser.OF - 150)) | (1 << (CypherParser.TRAVERSE - 150)) | (1 << (CypherParser.READ - 150)) | (1 << (CypherParser.WRITE - 150)) | (1 << (CypherParser.ACCESS - 150)) | (1 << (CypherParser.INDEXES - 150)) | (1 << (CypherParser.MANAGEMENT - 150)) | (1 << (CypherParser.NEW - 150)) | (1 << (CypherParser.LABEL - 150)) | (1 << (CypherParser.LABELS - 150)) | (1 << (CypherParser.NAME - 150)) | (1 << (CypherParser.NAMES - 150)) | (1 << (CypherParser.TYPE - 150)) | (1 << (CypherParser.TYPES - 150)) | (1 << (CypherParser.PROPERTY - 150)) | (1 << (CypherParser.CONSTRAINTS - 150)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (CypherParser.ASSIGN - 182)) | (1 << (CypherParser.BTREE - 182)) | (1 << (CypherParser.EXIST - 182)) | (1 << (CypherParser.FOR - 182)) | (1 << (CypherParser.OPTIONS - 182)) | (1 << (CypherParser.EXECUTE - 182)) | (1 << (CypherParser.DEFINED - 182)) | (1 << (CypherParser.FUNCTION - 182)) | (1 << (CypherParser.FUNCTIONS - 182)) | (1 << (CypherParser.BOOSTED - 182)) | (1 << (CypherParser.PROCEDURE - 182)) | (1 << (CypherParser.PROCEDURES - 182)) | (1 << (CypherParser.ADMIN - 182)) | (1 << (CypherParser.ADMINISTRATOR - 182)) | (1 << (CypherParser.BRIEF - 182)) | (1 << (CypherParser.VERBOSE - 182)) | (1 << (CypherParser.OUTPUT - 182)) | (1 << (CypherParser.BUILT - 182)) | (1 << (CypherParser.EACH - 182)) | (1 << (CypherParser.EXECUTABLE - 182)) | (1 << (CypherParser.EXISTENCE - 182)) | (1 << (CypherParser.FULLTEXT - 182)) | (1 << (CypherParser.HOME - 182)) | (1 << (CypherParser.LOOKUP - 182)) | (1 << (CypherParser.RENAME - 182)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.CypherParser = CypherParser;
